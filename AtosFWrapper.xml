<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AtosFWrapper</name>
    </assembly>
    <members>
        <member name="T:Spea.CanInstruments.DcGenType">
            <summary>
            Possible types of DC-Generators that can be installed in a SPEA-Tester.
            </summary>
        </member>
        <member name="F:Spea.CanInstruments.DcGenType.DCG100">
            <summary>
            DCG100: 150V, 44A.
            </summary>
        </member>
        <member name="F:Spea.CanInstruments.DcGenType.DCG110">
            <summary>
            DCG110: 150V, 22A.
            </summary>
        </member>
        <member name="F:Spea.CanInstruments.DcGenType.DCG200">
            <summary>
            DCG200: 600V, 5.5A.
            </summary>
        </member>
        <member name="F:Spea.CanInstruments.DcGenType.DCG300">
            <summary>
            DCG300: 12.5V, 60A.
            </summary>
        </member>
        <member name="F:Spea.CanInstruments.DcGenType.DCG400">
            <summary>
            DCG400: 1000V, 2A
            </summary>
        </member>
        <member name="T:Spea.CanInstruments.DcGen">
            <summary>
            This class represents a DC-Generator connected to the SPEA-Tester via CAN. It provides methods to operate this CAN-Instrument.
            </summary>
        </member>
        <member name="M:Spea.CanInstruments.DcGen.#ctor(Spea.DcGenInstrId,Spea.CanInstruments.DcGenType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.CanInstruments.DcGen"/> class.
            </summary>
            <param name="id">The ID for the DC-Generator.</param>
            <param name="type">The type of the device connected to the SPEA-Tester.</param>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.Id">
            <summary>
            Gets the ID for the DC-Generator.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.Name">
            <summary>
            Gets the ID for the DC-Generator as string.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.Type">
            <summary>
            Gets the type of the DC-Generator.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.IsOn">
            <summary>
            Gets a value indicating whether this DC-Generator is turned on.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.Voltage">
            <summary>
            Gets a measurement of the voltage being outputed by the DC-Generator.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.Current">
            <summary>
            Gets a measurement of the current being supplied or drained by the DC-Generator.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.DcGenIsOnStatus">
            <summary>
            Gets a dictionary showing whether a DC-Generator is on.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.StatusMessages">
            <summary>
            Gets a dictionary with an association of status code and error messages.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.Limits">
            <summary>
            Gets the correspondency between types of DC-Generators and voltage and current limits.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGen.ConnectionPoint">
            <summary>
            Gets or sets the connection point passed by the user when calling <see cref="M:Spea.CanInstruments.DcGen.On(System.Double,System.Double,Spea.DcGenOut,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Spea.CanInstruments.DcGen.On(System.Double,System.Double,Spea.DcGenOut,System.Int32)">
            <summary>
            Connects, sets and enables the DC Generator. <para/>
            The DC output is set to a value of <paramref name="voltage"/> [V] with a current limit of <paramref name="current"/> [A]. <para/>
            A delay can be necessary after the DC Generator is enabled before the voltage can be measured on output, this time can be adjusted with <paramref name="msDelay"/> [ms].
            </summary>
            <param name="voltage">The output voltage [V].</param>
            <param name="current">The current limit [A].</param>
            <param name="out">The connection point for the output.</param>
            <param name="msDelay">The time delay after DC generator is enabled or set.</param>
        </member>
        <member name="M:Spea.CanInstruments.DcGen.Off(System.Int32)">
            <summary>
            Sets the DC Generator to its minimal voltage and current, then after a delay, it disables and disconnects the DC Generator. <para/>
            After setting the DC Generator to its minimal voltage, a delay can be necessary before disabling and disconnecting it. This delay can be adjusted with <paramref name="msDelay"/> [ms].
            </summary>
            <param name="msDelay">The time delay before disabling DC generator, after its voltage is set to the minimal value.</param>
        </member>
        <member name="M:Spea.CanInstruments.DcGen.Set(System.Double,System.Double)">
            <summary>
            Sets new values for the output of this DC Generator.
            </summary>
            <param name="voltage">The output voltage [V].</param>
            <param name="current">The current limit [A].</param>
        </member>
        <member name="M:Spea.CanInstruments.DcGen.GuardStatus(Spea.Status,System.String)">
            <summary>
            It throws an <see cref="T:Spea.CanInstruments.DcGenException"/> if <paramref name="status"/> isn't <see cref="F:Spea.Status.PASS"/>.
            </summary>
            <param name="status">The status returned by a Leo-F method.</param>
            <param name="leoFMethod">The name of the Leo-F method.</param>
            <exception cref="T:Spea.CanInstruments.DcGenException">If status isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.CanInstruments.DcGen.GuardLimits(System.Double,System.Double)">
            <summary>
            Check if the DcGen settings are inside the allowed range.
            </summary>
            <param name="voltage">The voltage setting.</param>
            <param name="current">The current setting.</param>
            <exception cref="T:System.ArgumentException">If settings aren't in the allowed range.</exception>
        </member>
        <member name="T:Spea.CanInstruments.DcGenException">
            <summary>
            Class used to throw exceptions in the DcGen module.
            </summary>
        </member>
        <member name="M:Spea.CanInstruments.DcGenException.#ctor(Spea.CanInstruments.DcGen,System.String,Spea.Status,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.CanInstruments.DcGenException"/> class.
            </summary>
            <param name="dcGen">The DcGen that caused the exception.</param>
            <param name="leoFMethod">The LeoF-Method that caused the exception.</param>
            <param name="status">The status returned by the LeoF-Method.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Spea.CanInstruments.DcGenException.Status">
            <summary>
            Gets the status returned by the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGenException.DcGen">
            <summary>
            Gets the DcGen that caused the exception.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.DcGenException.LeoFMethod">
            <summary>
            Gets the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="T:Spea.CanInstruments.Pps">
            <summary>
            This class represents a PPS connected to the SPEA-Tester via CAN. It provides methods to operate this CAN-Instrument.
            </summary>
        </member>
        <member name="M:Spea.CanInstruments.Pps.#ctor(Spea.PPS)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.CanInstruments.Pps"/> class.
            </summary>
            <param name="id">The ID for the DC-Generator.</param>
        </member>
        <member name="P:Spea.CanInstruments.Pps.Id">
            <summary>
            Gets the ID for the PPS.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.Pps.Name">
            <summary>
            Gets the ID for the PPS as string.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.Pps.IsOn">
            <summary>
            Gets a value indicating whether this PPS is turned on.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.Pps.Voltage">
            <summary>
            Gets a measurement of the voltage being outputed by the PPS.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.Pps.Current">
            <summary>
            Gets a measurement of the current being supplied or drained by the PPS.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.Pps.PPSIsOnStatus">
            <summary>
            Gets a dictionary showing whether a PPS is on.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.Pps.StatusMessages">
            <summary>
            Gets a dictionary with an association of status code and error messages.
            </summary>
        </member>
        <member name="M:Spea.CanInstruments.Pps.On(System.Double,System.Double)">
            <summary>
            Connects, sets and enables the PPS. <para/>
            The PPS output is set to a value of <paramref name="voltage"/> [V] with a current limit of <paramref name="current"/> [A]. <para/>
            </summary>
            <param name="voltage">The output voltage [V].</param>
            <param name="current">The current limit [A].</param>
        </member>
        <member name="M:Spea.CanInstruments.Pps.Off">
            <summary>
            Sets the PPS to its minimal voltage and current, and it disables and disconnects the PPS. <para/>
            </summary>
        </member>
        <member name="M:Spea.CanInstruments.Pps.Set(System.Double,System.Double)">
            <summary>
            Sets new values for the output of this PPS.
            </summary>
            <param name="voltage">The output voltage [V].</param>
            <param name="current">The current limit [A].</param>
        </member>
        <member name="M:Spea.CanInstruments.Pps.GuardStatus(Spea.Status,System.String)">
            <summary>
            It throws an <see cref="T:Spea.CanInstruments.DcGenException"/> if <paramref name="status"/> isn't <see cref="F:Spea.Status.PASS"/>.
            </summary>
            <param name="status">The status returned by a Leo-F method.</param>
            <param name="leoFMethod">The name of the Leo-F method.</param>
            <exception cref="T:Spea.CanInstruments.DcGenException">If status isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="T:Spea.CanInstruments.PPSException">
            <summary>
            Class used to throw exceptions in the DcGen module.
            </summary>
        </member>
        <member name="M:Spea.CanInstruments.PPSException.#ctor(Spea.CanInstruments.Pps,System.String,Spea.Status,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.CanInstruments.PPSException"/> class.
            </summary>
            <param name="pps">The PPS that caused the exception.</param>
            <param name="leoFMethod">The LeoF-Method that caused the exception.</param>
            <param name="status">The status returned by the LeoF-Method.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Spea.CanInstruments.PPSException.Status">
            <summary>
            Gets the status returned by the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.PPSException.Pps">
            <summary>
            Gets the Pps that caused the exception.
            </summary>
        </member>
        <member name="P:Spea.CanInstruments.PPSException.LeoFMethod">
            <summary>
            Gets the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="T:Spea.DvmHotConnectionPoint">
            <summary>
            Enum contains all possible positive connection points for the DVM.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS1">
            <summary>
            ABUS1.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS2">
            <summary>
            ABUS2.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS3">
            <summary>
            ABUS3.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS4">
            <summary>
            ABUS4.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS5">
            <summary>
            ABUS5.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS6">
            <summary>
            ABUS6.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS7">
            <summary>
            ABUS7.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.ABUS8">
            <summary>
            ABUS8.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.EXTCH1P">
            <summary>
            External channel 1.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.EXTCH2P">
            <summary>
            External channel 2.
            </summary>
        </member>
        <member name="F:Spea.DvmHotConnectionPoint.INTERNAL_REF">
            <summary>
            Internal Reference.
            </summary>
        </member>
        <member name="T:Spea.DvmColdConnectionPoint">
            <summary>
            Enum contains all possible negative connection points for the DVM.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS1">
            <summary>
            ABUS1.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS2">
            <summary>
            ABUS2.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS3">
            <summary>
            ABUS3.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS4">
            <summary>
            ABUS4.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS5">
            <summary>
            ABUS5.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS6">
            <summary>
            ABUS6.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS7">
            <summary>
            ABUS7.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.ABUS8">
            <summary>
            ABUS8.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.EXTCH1N">
            <summary>
            External channel 1.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.EXTCH2N">
            <summary>
            External channel 2.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.INTERNAL_REF">
            <summary>
            Internal Reference.
            </summary>
        </member>
        <member name="F:Spea.DvmColdConnectionPoint.EXTERNAL_REF">
            <summary>
            External Reference.
            </summary>
        </member>
        <member name="T:Spea.TriggerOptions">
            <summary>
            Enum contains all possible triggeroptions.
            </summary>
        </member>
        <member name="F:Spea.TriggerOptions.FALLING">
            <summary>
            Trigger at falling edge.
            </summary>
        </member>
        <member name="F:Spea.TriggerOptions.RISING">
            <summary>
            Trigger at rising edge.
            </summary>
        </member>
        <member name="T:Spea.Dvm">
            <summary>
            Class will contain various options for DVM voltage measurement.
            </summary>
        </member>
        <member name="P:Spea.Dvm.StatusMessages">
            <summary>
            Gets a dictionary with an association of status code and error messages.
            </summary>
        </member>
        <member name="M:Spea.Dvm.AutoMeasureDc(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint,System.Double@,System.Double,Spea.DvmVRange)">
            <summary>
            Measures a DC-Voltage with the DVM. Does the connect, measure and disconnect automatically. <para/>
            8 Rows Pre-requirement 1: Before connecting DVM to rows 5, 6, 7 or 8 it is necessary to change the ABUS Channel Mode by calling <see cref="M:Spea.LeoF.ChAbusModeSet(Spea.AbusMode)"/>.
            </summary>
            <param name="hot">DVM connection hot point.</param>
            <param name="cold">DVM connection cold point.</param>
            <param name="measuredValue">Measured value in volts.</param>
            <param name="measureTime">Measure Time (T_ON) in seconds.</param>
            <param name="range">The voltage range for the measurement.</param>
            <returns><see cref="F:Spea.Status.PASS"/>If measurement was successful or <see cref="F:Spea.Status.OVER_RANGE"/>, if the value measured was over the selected voltage range.</returns>
            <exception cref="T:Spea.DvmException">If DVM can't be configured or measurement can't be acquired.</exception>
        </member>
        <member name="M:Spea.Dvm.Connect(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint)">
            <summary>
            Connects DVM. <para/>
            8 Rows Pre-requirement 1: Before connecting DVM to rows 5, 6, 7 or 8 it is necessary to change the ABUS Channel Mode by calling <see cref="M:Spea.LeoF.ChAbusModeSet(Spea.AbusMode)"/>.
            </summary>
            <param name="hot">DVM connection hot point.</param>
            <param name="cold">DVM connection cold point.</param>
            <exception cref="T:Spea.DvmException">If DVM can't be connected to the given connection points.</exception>
        </member>
        <member name="M:Spea.Dvm.Disconnect(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint)">
            <summary>
            Disconnects DVM. <para/>
            8 Rows Pre-requirement 1: Before connecting DVM to rows 5, 6, 7 or 8 it is necessary to change the ABUS Channel Mode by calling <see cref="M:Spea.LeoF.ChAbusModeSet(Spea.AbusMode)"/>.
            </summary>
            <param name="hot">DVM connection hot point.</param>
            <param name="cold">DVM connection cold point.</param>
            <exception cref="T:Spea.DvmException">If DVM can't be disconnected from the given connection points.</exception>
        </member>
        <member name="M:Spea.Dvm.ManualMeasureDc(System.Double@,System.Double,Spea.DvmVRange)">
            <summary>
            Sets DVM and measures a DC value. Connect and disconnect has to be done manually. <para/>
            To connect and disconnect automatically use <see cref="M:Spea.Dvm.AutoMeasureDc(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint,System.Double@,System.Double,Spea.DvmVRange)"/>.
            </summary>
            <param name="measuredValue">Measured value in volts.</param>
            <param name="measureTime">Measure Time (T_ON) in seconds.</param>
            <param name="range">The voltage range for the measurement.</param>
            <returns><see cref="F:Spea.Status.PASS"/>If measurement was successful or <see cref="F:Spea.Status.OVER_RANGE"/>, if the value measured was over the selected voltage range.</returns>
            <exception cref="T:Spea.DvmException">If DVM can't be configured or measurement can't be acquired.</exception>
        </member>
        <member name="M:Spea.Dvm.AutomaticSampleMeasure(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint,System.Double,System.Int32,System.Collections.Generic.List{System.Double}@,Spea.DvmVRange)">
            <summary>
            Connects DVM, measures using DvmReadAll, disconnects DVM and plots the values.
            </summary>
            <param name="hot">Positive connection End.</param>
            <param name="cold">Negative connection End.</param>
            <param name="measureTime">How long should the sampling take.</param>
            <param name="samplerate">Which resoultion should the sampling have.</param>
            <param name="measuredValues">Array with all measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.ManualSampleMeasure(System.Double,System.Int32,System.Collections.Generic.List{System.Double}@,Spea.DvmVRange)">
            <summary>
            Measures using DvmReadAll.
            </summary>
            <param name="measureTime">How long should the sampling take.</param>
            <param name="samplerate">Which resoultion should the sampling have.</param>
            <param name="measuredValues">Array with all measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.AutomaticMeasurePWM(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint,System.Double,System.Int32,System.Double,System.Double,Spea.PwmProperties@,Spea.DvmVRange)">
            <summary>
            Connects DVM, measures using DvmReadAll, calulates all values, disconnects DVM.
            </summary>
            <param name="hot">Positive connection End.</param>
            <param name="cold">Negative connection End.</param>
            <param name="expFrequency">expectedfrequency in hertz.</param>
            <param name="periodicCycles">count of periodic cycle which should be measured.</param>
            <param name="lowThreshHold">low threshhold-volatge for PWM signal.</param>
            <param name="highThreshHold">high threshhold-volatge for PWM signal.</param>
            <param name="pwmParameters">pwm parameters, like frequency, dc-Offset, dutycycle, array with measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.ManualMeasurePWM(System.Double,System.Int32,System.Double,System.Double,Spea.PwmProperties@,Spea.DvmVRange)">
            <summary>
            measures using DvmReadAll, calulates all values.
            </summary>
            <param name="expFrequency">expectedfrequency in hertz.</param>
            <param name="periodicCycles">count of periodic cycle which should be measured.</param>
            <param name="lowThreshHold">low threshhold-volatge for PWM signal.</param>
            <param name="highThreshHold">high threshhold-volatge for PWM signal.</param>
            <param name="pwmParameters">pwm parameters, like frequency, dc-Offset, dutycycle, array with measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.AutomaticMeasureSinusLike(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint,System.Double,System.Int32,Spea.SinusProperties@,Spea.DvmVRange)">
            <summary>
            Connects DVM, measures using DvmReadAll, calulates all values, disconnects DVM.
            </summary>
            <param name="hot">Positive connection End.</param>
            <param name="cold">Negative connection End.</param>
            <param name="expFrequency">expectedfrequency in hertz.</param>
            <param name="periodicCycles">count of periodic cycle which should be measured.</param>
            <param name="sinusParameters">sinus parameters, like frequency, dc-Offset, min, max, rms, array with measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.AutomaticMeasurePulse(Spea.DvmHotConnectionPoint,Spea.DvmColdConnectionPoint,System.Double,System.Double,Spea.TriggerOptions,System.Double,Spea.TriggerOptions,Spea.PulseProperties@,Spea.DvmVRange)">
            <summary>
            Connects DVM, measures using DvmReadAll, calulates all values, disconnects DVM.
            </summary>
            <param name="hot">Positive connection End.</param>
            <param name="cold">Negative connection End.</param>
            <param name="measureTime">duration of the measure.</param>
            <param name="triggerValue1">trigger value of first trigger.</param>
            <param name="triggerOption1">choose when trigger1 is applied.</param>
            <param name="triggerValue2">trigger value of first trigge2.</param>
            <param name="triggerOption2">choose when trigger2 is applied.</param>
            <param name="pulseParameters">pulse parameters, like min, max, interval, array with measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.ManualMeasurePulse(System.Double,System.Double,Spea.TriggerOptions,System.Double,Spea.TriggerOptions,Spea.PulseProperties@,Spea.DvmVRange)">
            <summary>
             measures using DvmReadAll, calulates all values.
            </summary>
            <param name="measureTime">duration of the measure.</param>
            <param name="triggerValue1">trigger value of first trigger.</param>
            <param name="triggerOption1">choose when trigger1 is applied.</param>
            <param name="triggerValue2">trigger value of first trigge2.</param>
            <param name="triggerOption2">choose when trigger2 is applied.</param>
            <param name="pulseParameters">pulse parameters, like min, max, interval, array with measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.ManualMeasureSinusLike(System.Double,System.Int32,Spea.SinusProperties@,Spea.DvmVRange)">
            <summary>
            Measures using DvmReadAll, calulates all values, disconnects DVM.
            </summary>
            <param name="expFrequency">expectedfrequency in hertz.</param>
            <param name="periodicCycles">count of periodic cycle which should be measured.</param>
            <param name="sinusParameters">sinus parameters, like frequency, dc-Offset, min, max, rms, array with measured values.</param>
            <param name="range">Is the sampling below or above 10 volts.</param>
            <returns>STATUS: PASS/FAIL.</returns>
        </member>
        <member name="M:Spea.Dvm.GuardStatus(Spea.Status,System.String)">
            <summary>
            It throws an <see cref="T:Spea.DvmException"/> if <paramref name="status"/> isn't <see cref="F:Spea.Status.PASS"/>.
            </summary>
            <param name="status">The status returned by a Leo-F method.</param>
            <param name="leoFMethod">The name of the Leo-F method.</param>
            <exception cref="T:Spea.DvmException">If status isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Dvm.RMS_Measure(System.Int32,System.Int32,System.Double@,System.Double@,Spea.DvmVRange,System.String)">
            <summary>
            Sample-Measures a signal and calulates RMS and frequency.
            </summary>
        </member>
        <member name="T:Spea.DvmException">
            <summary>
            Class used to throw exceptions in the Dvm module.
            </summary>
        </member>
        <member name="M:Spea.DvmException.#ctor(System.String,Spea.Status,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.DvmException"/> class.
            </summary>
            <param name="leoFMethod">The LeoF-Method that caused the exception.</param>
            <param name="status">The status returned by the LeoF-Method.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Spea.DvmException.Status">
            <summary>
            Gets the status returned by the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="P:Spea.DvmException.LeoFMethod">
            <summary>
            Gets the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="T:Spea.PulseProperties">
            <summary>
            Output paramters for Pulse-Measure-Funkcions.
            </summary>
        </member>
        <member name="P:Spea.PulseProperties.Min">
            <summary>
            Gets the minimal measured value in volts.
            </summary>
        </member>
        <member name="P:Spea.PulseProperties.Max">
            <summary>
            Gets the maximal measured value in volts.
            </summary>
        </member>
        <member name="P:Spea.PulseProperties.Interval">
            <summary>
            Gets the pulse interval in seconds.
            </summary>
        </member>
        <member name="P:Spea.PulseProperties.MeasuredValues">
            <summary>
            Gets a list of the measured values in volts.
            </summary>
        </member>
        <member name="T:Spea.PwmProperties">
            <summary>
            Output paramters for PWM-Measure-Funkcions.
            </summary>
        </member>
        <member name="P:Spea.PwmProperties.DutyCycle">
            <summary>
            Gets the duty cycle in %.
            </summary>
        </member>
        <member name="P:Spea.PwmProperties.Frequency">
            <summary>
            Gets the frequency in hertz.
            </summary>
        </member>
        <member name="P:Spea.PwmProperties.DcOffset">
            <summary>
            Gets the dc offset in volts.
            </summary>
        </member>
        <member name="P:Spea.PwmProperties.MeasuredValues">
            <summary>
            Gets a list of the measured values in volts.
            </summary>
        </member>
        <member name="T:Spea.SinusProperties">
            <summary>
            Output paramters for PWM-Measure-Funkcions.
            </summary>
        </member>
        <member name="P:Spea.SinusProperties.Min">
            <summary>
            Gets the minimal measured value in volts.
            </summary>
        </member>
        <member name="P:Spea.SinusProperties.Max">
            <summary>
            Gets the maximal measured value in volts.
            </summary>
        </member>
        <member name="P:Spea.SinusProperties.Rms">
            <summary>
            Gets the RMS value in volts.
            </summary>
        </member>
        <member name="P:Spea.SinusProperties.Frequency">
            <summary>
            Gets the frequency in hertz.
            </summary>
        </member>
        <member name="P:Spea.SinusProperties.DcOffset">
            <summary>
            Gets the DC offset in volts.
            </summary>
        </member>
        <member name="P:Spea.SinusProperties.MeasuredValues">
            <summary>
            Gets a list of the measured values in volts.
            </summary>
        </member>
        <member name="T:Spea.Extras">
            <summary>
            A class containing convenient functions for programming within the AtosF Framework.
            </summary>
        </member>
        <member name="M:Spea.Extras.AddLeonardoToPath">
            <summary>
            If necessary, it sets the environment variable Path, to allow this test programm to
            run even if it wasn't opened via Leonardo. Runpack still has to be running, however.
            </summary>
            <exception cref="T:System.Exception">
            Thrown when Runpack process (r3g) can't be found.
            </exception>
        </member>
        <member name="M:Spea.Extras.Alarm">
            <summary>
            <para>Stops the Inline-mode, homes the      receiver and opens the door of the system.</para>
            <para>System alarm will also be set by this.</para>
            </summary>
        </member>
        <member name="M:Spea.Extras.Alarm(System.String,System.Boolean)">
            <summary>
            <para>Stops the Inline-mode, homes the receiver and opens the door of the system.</para>
            <para>System alarm will also be set by this.</para>
            </summary>
            <param name="message">Errormessage to be shown on Screen.</param>
            <param name="throwException">Throw an exception with errormessage.</param>
        </member>
        <member name="T:Spea.IniFile">
            <summary>
            Class for handling INI files.
            </summary>
        </member>
        <member name="P:Spea.IniFile.DefaultIniPath">
            <summary>
            Gets or sets default path of the Inifile used.
            </summary>
        </member>
        <member name="P:Spea.IniFile.ObjectsIniPath">
            <summary>
            Gets the path of the Objects.ini of the current selected Leonardo Project.
            </summary>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.Int32@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.UInt32@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.Int16@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.UInt16@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.Double@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.Boolean@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.Single@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.String@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.Byte@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetParsedValueObjectsIni(System.String,System.String,System.DateTime@)">
            <summary>
            Gets a Value from Objects.ini and parses it in the right format.
            Otherwise an Exception is thrown.
            </summary>
            <param name="section">Kection in Objects.ini.</param>
            <param name="key">Key in Objects.ini.</param>
            <param name="parsedValue">Parsed value from Objects.ini.</param>
            <exception cref="T:System.Exception">Could not read or parse value.</exception>
        </member>
        <member name="M:Spea.IniFile.GetValue(System.String,System.String,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="path">The path of the INI file.</param>
            <param name="section">The name of the section containing the key name.</param>
            <param name="key">The name of the key whose associated string is to be retrieved.</param>
            <returns>The retrieved string.</returns>
        </member>
        <member name="M:Spea.IniFile.GetValue(System.String,System.String)">
            <summary>
            Retrieves a string from the specified section in the Objects.ini of the current selected Leonardo Project.
            </summary>
            <param name="section">The name of the section containing the key name.</param>
            <param name="key">The name of the key whose associated string is to be retrieved.</param>
            <returns>The retrieved string.</returns>
        </member>
        <member name="M:Spea.IniFile.SetValue(System.String,System.String,System.String,System.String)">
            <summary>
            Sets the value of a key in specified section in an initialization file.
            </summary>
            <param name="path">The path of the INI file.</param>
            <param name="section">The name of the section containing the key name.</param>
            <param name="key">The name of the key whose associated string is to be retrieved.</param>
            <param name="value">The new value for the string.</param>
            <returns>The retrieved string.</returns>
        </member>
        <member name="M:Spea.IniFile.SetValue(System.String,System.String,System.String)">
            <summary>
            Sets the value of a key in specified section in the Objects.ini of the current selected Leonardo Project.
            </summary>
            <param name="section">The name of the section containing the key name.</param>
            <param name="key">The name of the key whose associated string is to be retrieved.</param>
            <param name="value">The new value for the string.</param>
            <returns>The retrieved string.</returns>
        </member>
        <member name="M:Spea.IniFile.GetPrivateProfileString(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <param name="lpAppName">The name of the section containing the key name. If this parameter is NULL, the GetPrivateProfileString function copies all section names in the file to the supplied buffer.</param>
            <param name="lpKeyName">The name of the key whose associated string is to be retrieved. If this parameter is NULL, all key names in the section specified by the lpAppName parameter are copied to the buffer specified by the lpReturnedString parameter.</param>
            <param name="lpDefault">
            A default string. If the lpKeyName key cannot be found in the initialization file, GetPrivateProfileString copies the default string to the lpReturnedString buffer.
            If this parameter Is NULL, the Default Is an empty String, "".
            Avoid specifying a Default String With trailing blank characters. The Function inserts a null character In the lpReturnedString buffer To strip any trailing blanks.
            </param>
            <param name="lpReturnedString">A pointer to the buffer that receives the retrieved string.</param>
            <param name="nSize">The size of the buffer pointed to by the lpReturnedString parameter, in characters.</param>
            <param name="lpFileName">The name of the initialization file. If this parameter does not contain a full path to the file, the system searches for the file in the Windows directory.</param>
            <returns>The return value is the number of characters copied to the buffer, not including the terminating null character.</returns>
        </member>
        <member name="M:Spea.IniFile.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Copies a string into the specified section of an initialization file.
            </summary>
            <param name="lpAppName">The name of the section to which the string will be copied. If the section does not exist, it is created. The name of the section is case-independent; the string can be any combination of uppercase and lowercase letters.</param>
            <param name="lpKeyName">The name of the key to be associated with a string. If the key does not exist in the specified section, it is created. If this parameter is NULL, the entire section, including all entries within the section, is deleted.</param>
            <param name="lpString">A null-terminated string to be written to the file. If this parameter is NULL, the key pointed to by the lpKeyName parameter is deleted.</param>
            <param name="lpFileName">The name of the initialization file. If the file was created using Unicode characters, the function writes Unicode characters to the file.Otherwise, the function writes ANSI characters.</param>
            <returns>If the function successfully copies the string to the initialization file, the return value is nonzero. If the function fails, or if it flushes the cached version of the most recently accessed initialization file, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="T:Spea.Instruments.StimulusId">
            <summary>
            The possible Stimulus IDs that can be used with the <see cref="T:Spea.Instruments.Stimulus"/> class.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTV1">
            <summary>
            BSTV1 = Booster type V number 1.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTV2">
            <summary>
            BSTV2 = Booster type V number 2.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTV3">
            <summary>
            BSTV3 = Booster type V number 3.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTV4">
            <summary>
            BSTV4 = Booster type V number 4.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTI1">
            <summary>
            BSTI1 = Booster type I number 1.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTI2">
            <summary>
            BSTI2 = Booster type I number 2.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTI3">
            <summary>
            BSTI3 = Booster type I number 3.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.BSTI4">
            <summary>
            BSTI4 = Booster type I number 4.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.DRI1">
            <summary>
            DRI1 = It identifies the driver module number 1.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusId.DRI2">
            <summary>
            DRI2 = It identifies the driver module number 2.
            </summary>
        </member>
        <member name="T:Spea.Instruments.StimulusConnectionPoint">
            <summary>
            Enum contains all possible connection points for a Stimulus.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS1">
            <summary>
            ABUS1.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS2">
            <summary>
            ABUS2.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS3">
            <summary>
            ABUS3.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS4">
            <summary>
            ABUS4.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS5">
            <summary>
            ABUS5.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS6">
            <summary>
            ABUS6.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS7">
            <summary>
            ABUS7.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.ABUS8">
            <summary>
            ABUS8.
            </summary>
        </member>
        <member name="F:Spea.Instruments.StimulusConnectionPoint.EXTERNAL">
            <summary>
            External.
            </summary>
        </member>
        <member name="T:Spea.Instruments.Stimulus">
            <summary>
            This class provides convenient methods for working with drivers and boosters.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.useSense">
            <summary>
            Value indicating whether sense is connected to interface.
            </summary>
        </member>
        <member name="M:Spea.Instruments.Stimulus.#ctor(Spea.Instruments.StimulusId)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.Instruments.Stimulus"/> class.
            </summary>
            <param name="stimulus">The type of Stimulus.</param>
        </member>
        <member name="T:Spea.Instruments.Stimulus.CurrentRange">
            <summary>
            The possible ranges for all Stimuluss.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.CurrentRange.R10uA">
            <summary>
            R10uA = 10uA range.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.CurrentRange.R100uA">
            <summary>
            R100uA = 100uA range.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.CurrentRange.R1mA">
            <summary>
            R1mA = 1mA range.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.CurrentRange.R10mA">
            <summary>
            R10mA = 10mA range.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.CurrentRange.R100mA">
            <summary>
            R100mA = 100mA range.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.CurrentRange.R1A">
            <summary>
            R1A = 1A range.
            </summary>
        </member>
        <member name="F:Spea.Instruments.Stimulus.CurrentRange.R3A">
            <summary>
            R3A = 3A range.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.DriverDevice">
            <summary>
            Gets the slot information for the driver device.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.Id">
            <summary>
            Gets the Stimulus ID.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.Name">
            <summary>
            Gets the Stimulus name.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.Voltage">
            <summary>
            Gets the voltage set for the Stimulus.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.Current">
            <summary>
            Gets the current limit set for the Stimulus.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.Range">
            <summary>
            Gets the current range set for the Stimulus.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.DeviceHasSense">
            <summary>
            Gets a value indicating whether the device has sense.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.UseSense">
            <summary>
            Gets or sets a value indicating whether sense is connected to interface.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxCurrentBstV">
            <summary>
            Gets or sets the maximal allowed configurable current for BSTVs.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MinCurrentBstV">
            <summary>
            Gets or sets the minimal allowed configurable current for BSTVs.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxVoltageBstV">
            <summary>
            Gets or sets the maximal allowed configurable voltage for BSTVs.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxCurrentBstI">
            <summary>
            Gets or sets the maximal allowed configurable current for BSTIs.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MinCurrentBstI">
            <summary>
            Gets or sets the minimal allowed configurable current for BSTIs.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxVoltageBstI">
            <summary>
            Gets or sets the maximal allowed configurable voltage for BSTIs.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxCurrentDri1">
            <summary>
            Gets or sets the maximal allowed configurable current for DRI1.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MinCurrentDri1">
            <summary>
            Gets or sets the minimal allowed configurable current for DRI1.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxVoltageDri1">
            <summary>
            Gets or sets the maximal allowed configurable voltage for DRI1.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxCurrentDri2">
            <summary>
            Gets or sets the maximal allowed configurable current for DRI2.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MinCurrentDri2">
            <summary>
            Gets or sets the minimal allowed configurable current for DRI2.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.MaxVoltageDri2">
            <summary>
            Gets or sets the maximal allowed configurable voltage for DRI2.
            </summary>
        </member>
        <member name="P:Spea.Instruments.Stimulus.StatusMessages">
            <summary>
            Gets a dictionary with an association of status code and error messages.
            </summary>
        </member>
        <member name="M:Spea.Instruments.Stimulus.ConnectStimulus(Spea.Instruments.StimulusConnectionPoint,Spea.Instruments.StimulusConnectionPoint,System.Boolean)">
            <summary>
            Function to connect an Stimulus to the ABUS lines or Interface. <para/>
            Note: Before connecting, the instrumet will be set to 0V and 1mA. This can be undesired if you are already connected.
            </summary>
            <param name="rowPlus">Positive connection point. If left default = Interface connection.</param>
            <param name="rowMinus">Negative connection point. If left default = Interface connection.</param>
            <param name="useSense">A value indicating whether the sense should be enabled after stimulus is connected.</param>
            <exception cref="T:Spea.Instruments.StimulusException">If status of a Leo-F method isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.DisconnectStimulus">
            <summary>
            Disconnects an Stimulus from ABUS or INTERFACE.
            </summary>
            <exception cref="T:Spea.Instruments.StimulusException">If status of a Leo-F method isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.SetStimulus(System.Double,System.Double)">
            <summary>
            Configures and enables the Stimulus to supply the selected <paramref name="voltage"/> with a <paramref name="current"/> limit. <para/>
            </summary>
            <param name="voltage">The voltage that should be supplied by the Stimulus.</param>
            <param name="current">The current limit for the Stimulus.</param>
            <exception cref="T:Spea.Instruments.StimulusException">If status of a Leo-F method isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.SetStimulus(System.Double,System.Double,System.Double@,System.Double,System.Double)">
            <summary>
            Configures and enables the Stimulus to supply the selected <paramref name="voltage"/> with a <paramref name="current"/> limit. <para/>
            The parameters <paramref name="testCurrentLowLimit"/> and <paramref name="testCurrentHighLimit"/> are used to check if the current being sourced or drained
            by the Stimulus after it is enabled is inside an allowed range. <br/>
            If any of the two parameters is different than 0, a current test will be executed with this ranges, otherwise a current test will be performed with the
            maximal configurable current for the specific Stimulus.<para/>
            </summary>
            <param name="voltage">The voltage that should be supplied by the Stimulus.</param>
            <param name="current">The current limit for the Stimulus.</param>
            <param name="measuredCurrent">The current measured on the device if any limit different than 0 was passed to this method.</param>
            <param name="testCurrentLowLimit">The lower limit of the allowed range for the current. If different than 0, a current test will be performed after Stimulus is enabled.</param>
            <param name="testCurrentHighLimit">The upper limit of the allowed range for the current.If different than 0, a current test will be performed after Stimulus is enabled.</param>
            <returns><see cref="F:Spea.Status.FAIL"/> if the test is perfomed and the current is outside of the allowed range, otherwise it returns <see cref="F:Spea.Status.PASS"/>.</returns>
            <exception cref="T:Spea.Instruments.StimulusException">If status of a Leo-F method isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.MeasureStimulusCurrent(System.Double,System.Double,System.Double@,System.Double,System.Int32)">
            <summary>
            Measures the current being supplied or drained by the Stimulus and test it against an allowed range.
            </summary>
            <param name="lowLimit">The lower limit of the allowed range in ampere.</param>
            <param name="highLimit">The upper limit of the allowed range in ampere.</param>
            <param name="measuredValue">[Output] The value that was measured.</param>
            <param name="timeOnMs">The On time of the analog timing for one cycle in milliseconds.</param>
            <param name="numberOfDvmCycles">The number of DVM cycles used to calculate the average of the measured value [minimum = 1].</param>
            <returns><see cref="F:Spea.Status.PASS"/> if current is the allowed range, otherwise <see cref="F:Spea.Status.FAIL"/>.</returns>
        </member>
        <member name="M:Spea.Instruments.Stimulus.MeasureStimulusVoltage(System.Double,System.Double,System.Double@,System.Double,System.Int32)">
            <summary>
            Measures the voltage being present on the Stimulus and test it against an allowed range.
            </summary>
            <param name="lowLimit">The lower limit of the allowed range in volts.</param>
            <param name="highLimit">The upper limit of the allowed range in volts.</param>
            <param name="measuredValue">[Output] The value that was measured.</param>
            <param name="timeOnMs">The On time of the analog timing for one cycle in milliseconds.</param>
            <param name="numberOfDvmCycles">The number of DVM cycles used to calculate the average of the measured value [minimum = 1].</param>
            <returns><see cref="F:Spea.Status.PASS"/> if current is the allowed range, otherwise <see cref="F:Spea.Status.FAIL"/>.</returns>
        </member>
        <member name="M:Spea.Instruments.Stimulus.GetDriverDevice">
            <summary>
            Retrieves the slot information of the driver device of the bay in use.
            </summary>
            <returns>The slot information of the driver device of the bay in use.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unexpected number of racks or bay bridge configuration.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.SelectFilter(System.Double)">
            <summary>
            Select a suitbale cutoff frequency for the Low Pass Filter of the DVM based on the t_On site.
            </summary>
            <param name="timeOnMs">The t_On time in milliseconds.</param>
            <returns>The selected filter.</returns>
        </member>
        <member name="M:Spea.Instruments.Stimulus.SetStimulus(System.Double,System.Double,System.Double@,System.Double,System.Double,System.Boolean)">
            <summary>
            Configures and enables the Stimulus to supply the selected <paramref name="voltage"/> with a <paramref name="current"/> limit. <para/>
            The parameters <paramref name="testCurrentLowLimit"/> and <paramref name="testCurrentHighLimit"/> are used to check if the current being sourced or drained
            by the Stimulus after it is enabled is inside an allowed range. <br/>
            If any of the two parameters is different than 0, a current test will be executed with this ranges, otherwise a current test will be performed with the
            maximal configurable current for the specific Stimulus.<para/>
            If <paramref name="measure"/> is set to false, the measurement will not be performed.
            </summary>
            <param name="voltage">The voltage that should be supplied by the Stimulus.</param>
            <param name="current">The current limit for the Stimulus.</param>
            <param name="measuredCurrent">The current measured on the device if any limit different than 0 was passed to this method.</param>
            <param name="testCurrentLowLimit">The lower limit of the allowed range for the current. If different than 0, a current test will be performed after Stimulus is enabled.</param>
            <param name="testCurrentHighLimit">The upper limit of the allowed range for the current.If different than 0, a current test will be performed after Stimulus is enabled.</param>
            <param name="measure">A value indicating if the measurement should be performed.</param>
            <returns><see cref="F:Spea.Status.FAIL"/> if the test is perfomed and the current is outside of the allowed range, otherwise it returns <see cref="F:Spea.Status.PASS"/>.</returns>
            <exception cref="T:Spea.Instruments.StimulusException">If status of a Leo-F method isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.SetStimulusSettings">
            <summary>
            Sets the limits of the drivers based on <see cref="P:Spea.Instruments.Stimulus.DriverDevice"/>.
            </summary>
        </member>
        <member name="M:Spea.Instruments.Stimulus.DisconnectStimulusFromMbus(System.Boolean)">
            <summary>
            Disconnect Stimulus from MBUS depending on <see cref="P:Spea.Instruments.Stimulus.Id"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If <see cref="P:Spea.Instruments.Stimulus.Id"/> is not supported.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.DvmSetForCurrentMeasurement(System.Double,System.Double,Spea.DvmFilter)">
            <summary>
            Calls <see cref="M:Spea.LeoF.DvmSet(Spea.DvmInputStage,Spea.DvmCoupling,Spea.DvmFilter,Spea.DvmVRange,Spea.DvmMeasMode,Spea.DvmMeasType,Spea.DvmAcqRam)"/> with the right parameters depending
            on the Stimulus and the test limits.
            </summary>
            <param name="lowLimit">The lower limit of the allowed range in ampere.</param>
            <param name="highLimit">The upper limit of the allowed range in ampere.</param>
            <param name="filter">The filter to be used during the DVM measurement.</param>
            <exception cref="T:System.ArgumentException">If <see cref="P:Spea.Instruments.Stimulus.Id"/> is not supported.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.DvmSetForVoltageMeasurement(System.Double,System.Double,Spea.DvmFilter)">
            <summary>
            Calls <see cref="M:Spea.LeoF.DvmSet(Spea.DvmInputStage,Spea.DvmCoupling,Spea.DvmFilter,Spea.DvmVRange,Spea.DvmMeasMode,Spea.DvmMeasType,Spea.DvmAcqRam)"/> with the right parameters depending
            on the Stimulus and the test limits.
            </summary>
            <param name="lowLimit">>The lower limit of the allowed range in volts.</param>
            <param name="highLimit">>The upper limit of the allowed range in volts.</param>
            <param name="filter">The filter to be used during the DVM measurement.</param>
            <exception cref="T:System.ArgumentException">If <see cref="P:Spea.Instruments.Stimulus.Id"/> is not supported.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.GetCurrentMeasurementFactor">
            <summary>
            Calculates and retrieves the current measurement factor used to convert the value read from the DVM to ampere depending
            on the <see cref="P:Spea.Instruments.Stimulus.Id"/> and <see cref="P:Spea.Instruments.Stimulus.Current"/>.
            </summary>
            <returns>The current measurement factor.</returns>
            <exception cref="T:System.ArgumentException">If <see cref="P:Spea.Instruments.Stimulus.Id"/> is not supported.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.GetVoltageMeasurementFactor">
            <summary>
            Calculates and retrieves the voltage measurement factor used to convert the value read from the DVM to volts depending
            on the <see cref="P:Spea.Instruments.Stimulus.Id"/> and <see cref="P:Spea.Instruments.Stimulus.Voltage"/>.
            </summary>
            <returns>The voltgae measurement factor.</returns>
            <exception cref="T:System.ArgumentException">If <see cref="P:Spea.Instruments.Stimulus.Id"/> is not supported.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.ConnectStimulusToMbus(System.Boolean)">
            <summary>
            Connects Stimulus to MBUS1 for measuring the Stimulus current.
            </summary>
            <exception cref="T:System.ArgumentException">If <see cref="P:Spea.Instruments.Stimulus.Id"/> is not supported.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.DvmRead(System.Int32)">
            <summary>
            Gets the average value read from the DVM1 after n cycles.
            </summary>
            <param name="numberOfDvmCycles">The number of cycles used to calculate the average.</param>
            <returns>The average value read from the DVM1.</returns>
        </member>
        <member name="M:Spea.Instruments.Stimulus.UpdateStimulusSettings(System.Double,System.Double,Spea.Instruments.Stimulus.CurrentRange)">
            <summary>
            Sets <see cref="P:Spea.Instruments.Stimulus.Voltage"/>, <see cref="P:Spea.Instruments.Stimulus.Current"/> and <see cref="P:Spea.Instruments.Stimulus.Range"/> with new values.
            </summary>
            <param name="voltage">New voltage.</param>
            <param name="current">New current.</param>
            <param name="range">New range.</param>
        </member>
        <member name="M:Spea.Instruments.Stimulus.GuardStatus(Spea.Status,System.String)">
            <summary>
            It throws an <see cref="T:Spea.Instruments.StimulusException"/> if <paramref name="status"/> isn't <see cref="F:Spea.Status.PASS"/>.
            </summary>
            <param name="status">The status returned by a Leo-F method.</param>
            <param name="leoFMethod">The name of the Leo-F method.</param>
            <exception cref="T:Spea.Instruments.StimulusException">If status isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.GuardStimulusLimits(System.Double,System.Double)">
            <summary>
            Check if the Stimulus settings are inside the allowed range.
            </summary>
            <param name="voltage">The voltage setting.</param>
            <param name="current">The current setting.</param>
            <exception cref="T:System.ArgumentException">If <see cref="P:Spea.Instruments.Stimulus.Id"/> is not supported or  if settings aren't in the allowed range.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.SetBooster(System.Double,System.Double)">
            <summary>
            Sets the Stimulus with new settings and enables the Stimulus.
            </summary>
            <param name="voltage">The new voltage.</param>
            <param name="current">The new current limit.</param>
            <returns>The new current range.</returns>
            <exception cref="T:Spea.Instruments.StimulusException">If status of a Leo-F method isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.SetDriver(System.Double,System.Double)">
            <summary>
            Sets the Stimulus with new settings and enables the Stimulus.
            </summary>
            <param name="voltage">The new voltage.</param>
            <param name="current">The new current limit.</param>
            <returns>The new current range.</returns>
            <exception cref="T:Spea.Instruments.StimulusException">If status of a Leo-F method isn't <see cref="F:Spea.Status.PASS"/>.</exception>
        </member>
        <member name="M:Spea.Instruments.Stimulus.GetMaxCurrent">
            <summary>
            Returns the Maximal configurable current for an Stimulus.
            </summary>
            <returns>The Maximal configurable current for an Stimulus.</returns>
        </member>
        <member name="T:Spea.Instruments.StimulusException">
            <summary>
            Class used to throw exceptions in the Stimulus module.
            </summary>
        </member>
        <member name="M:Spea.Instruments.StimulusException.#ctor(Spea.Instruments.Stimulus,System.String,Spea.Status,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.Instruments.StimulusException"/> class.
            </summary>
            <param name="stimulus">The Stimulus that caused the exception.</param>
            <param name="leoFMethod">The LeoF-Method that caused the exception.</param>
            <param name="status">The status returned by the LeoF-Method.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Spea.Instruments.StimulusException.Status">
            <summary>
            Gets the status returned by the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="P:Spea.Instruments.StimulusException.Stimulus">
            <summary>
            Gets the Stimulus that caused the exception.
            </summary>
        </member>
        <member name="P:Spea.Instruments.StimulusException.LeoFMethod">
            <summary>
            Gets the LeoF-Method that caused the exception.
            </summary>
        </member>
        <member name="T:Spea.LeoF">
            <summary>
            Contains a Wrapper for all AtosF.DLL functions.
            </summary>
        </member>
        <member name="T:Spea.LeoF.TestplanFuncDelegate">
            <summary>
            A delegate used when calling <see cref="M:Spea.LeoF.ObpStartParallelExecution(Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,System.Int32)"/>.
            </summary>
            <param name="obpParam">A parameter passed by the user when calling <see cref="M:Spea.LeoF.ObpStartParallelExecution(Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,System.Int32)"/> which can be used for triggering different OBP actions, e.g. only erase or only writte and verify.</param>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      1                     -> An error occurred.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenConnect(Spea.InstrAcGen)">
            <summary>
            The AcGenConnect instruction connects the AC Generator module to the System Interface.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      ERR_ACGEN_NOT_PRESENT -> The AC Generator module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenDisable(Spea.InstrAcGen)">
            <summary>
            The AcGenDisable instruction disables the AC Generator module.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      ERR_ACGEN_NOT_PRESENT -> The AC Generator module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenDisconnect(Spea.InstrAcGen)">
            <summary>
            The AcGenDisconnect instruction disconnects the AC Generator module from the System Interface.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      ERR_ACGEN_NOT_PRESENT -> The AC Generator module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenEnable(Spea.InstrAcGen)">
             <summary>
             The AcGenEnable instruction enables the AC Generator module.
            
             Important Note
             Programming and connection must be executed before the unit enabling.
             The execution time of this instruction includes the relays switching time. In practice the instrument connection and disconnection must occur in two times in order to avoid damages to the connection relays.
             1st Test: Programs (AcGenSourceSet) and connects (AcGenConnect)
             2nd Test: Switches on the module (AcGenEnable).
             </summary>
             <param name="instrId">AC Generator module identifier.</param>
             <returns> 0                     -> The instruction has been successfully executed without errors. |
                       ERR_ACGEN_NOT_PRESENT -> The AC Generator module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenOff(Spea.InstrAcGen)">
            <summary>
            The AcGenOff instruction allows to switch OFF the AC Generator module.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      ERR_ACGEN_NOT_PRESENT -> The AC Generator module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenOn(Spea.InstrAcGen,System.Double,Spea.VoltRangeAcGen,System.Double,System.Double,System.Double)">
            <summary>
            The AcGenOn instruction allows to switch ON the AC Generator module.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <param name="vValue">It identifies the output voltage value to generate expressed in Volt. Possible values are: 1-300.</param>
            <param name="vRange">It identifies the voltage range to generate expressed in Volt.</param>
            <param name="iValue">The output current value has to be set at the same value of Ilimit parameter.</param>
            <param name="iLimit"><para>It identifies the maximum current limit value expressed in Ampere. Possible values are: </para>
            <para>   Value              |  Description                           |                                         .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG110  0.1 ÷ 15A    | Current value for voltages > 150V.     | Rms I limit                             .</para>
            <para>         0.1 ÷ 30A    | Current value for voltages ≤ 150V.     |                                         .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG130  2.04 ÷ 20A   | Current value for voltages > 150V.     | Peak I limit value                      .</para>
            <para>         1.02 ÷ 20A   | Current value for voltages ≤ 150V.     | I limit Rms fixed at 5.33A / 2.66A      .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG140  0.1 ÷ 15A    | Current value for voltages > 150V.     | Rms I limit                             .</para>
            <para>         0.1 ÷ 7.5A   | Current value for voltages ≤ 150V.     |.                                        .</para></param>
            <param name="frequency">It identifies the frequency value to generate expressed in MHz. Possible values are: 40 - 500.</param>
            <returns><para>   0                       ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_ACGEN_NOT_PRESENT   ->  The AC Generator module is not present.                        </para>
                     <para>  ERR_ACGEN_V_VALUE       ->  The voltage value parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_V_RANGE       ->  The voltage range parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_I_VALUE       ->  The current value parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_I_LIMIT       ->  The current limit parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_FREQUENCY     ->  The frequency value is not valid.                              </para></returns>
        </member>
        <member name="M:Spea.LeoF.AcGenOutConnect(Spea.InstrAcGen,Spea.OutAcGen)">
            <summary>
            The AcGenOutConnect instruction connects the selected output (A, B) of the AC Generator module to the System Interface.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <param name="acGenOut">AC Generator output selection.</param>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      ERR_ACGEN_NOT_PRESENT -> The AC Generator module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenOutDisconnect(Spea.InstrAcGen,Spea.OutAcGen)">
            <summary>
            The AcGenOutDisconnect instruction disconnects the selected output (A, B) of the AC Generator module from the System Interface.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <param name="acGenOut">AC Generator output selection.</param>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      ERR_ACGEN_NOT_PRESENT -> The AC Generator module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AcGenOutOn(Spea.InstrAcGen,Spea.OutAcGen,System.Double,Spea.VoltRangeAcGen,System.Double,System.Double,System.Double)">
            <summary>
            The AcGenOutOn instruction allows to switch ON the AC Generator module on the selected output (A, B).
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <param name="acGenOut">AC Generator output selection.</param>
            <param name="vValue">It identifies the output voltage value to generate expressed in Volt. Possible values are: 1-300.</param>
            <param name="vRange">It identifies the voltage range to generate expressed in Volt.</param>
            <param name="iValue">The output current value has to be set at the same value of Ilimit parameter.</param>
            <param name="iLimit"><para>It identifies the maximum current limit value expressed in Ampere. Possible values are: </para>
            <para>   Value              |  Description                           |                                         .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG110  0.1 ÷ 15A    | Current value for voltages > 150V.     | Rms I limit                             .</para>
            <para>         0.1 ÷ 30A    | Current value for voltages ≤ 150V.     |                                         .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG130  2.04 ÷ 20A   | Current value for voltages > 150V.     | Peak I limit value                      .</para>
            <para>         1.02 ÷ 20A   | Current value for voltages ≤ 150V.     | I limit Rms fixed at 5.33A / 2.66A      .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG140  0.1 ÷ 15A    | Current value for voltages > 150V.     | Rms I limit                             .</para>
            <para>         0.1 ÷ 7.5A   | Current value for voltages ≤ 150V.     |.                                        .</para></param>
            <param name="frequency">It identifies the frequency value to generate expressed in MHz. Possible values are: 40 - 500.</param>
            <returns><para>   0                       ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_ACGEN_NOT_PRESENT   ->  The AC Generator module is not present.                        </para>
                     <para>  ERR_ACGEN_V_VALUE       ->  The voltage value parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_V_RANGE       ->  The voltage range parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_I_VALUE       ->  The current value parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_I_LIMIT       ->  The current limit parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_FREQUENCY     ->  The frequency value is not valid.                              </para></returns>
        </member>
        <member name="M:Spea.LeoF.AcGenSourceSet(Spea.InstrAcGen,System.Double,Spea.VoltRangeAcGen,System.Double,System.Double,System.Double)">
            <summary>
            The AcGenSourceSet instruction allows to program the AC Generator module.
            </summary>
            <param name="instrId">AC Generator module identifier.</param>
            <param name="vValue">It identifies the output voltage value to generate expressed in Volt. Possible values are: 1-300.</param>
            <param name="vRange">It identifies the voltage range to generate expressed in Volt.</param>
            <param name="iValue">The output current value has to be set at the same value of Ilimit parameter.</param>
            <param name="iLimit"><para>It identifies the maximum current limit value expressed in Ampere. Possible values are: </para>
            <para>   Value              |  Description                           |                                         .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG110  0.1 ÷ 15A    | Current value for voltages > 150V.     | Rms I limit                             .</para>
            <para>         0.1 ÷ 30A    | Current value for voltages ≤ 150V.     |                                         .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG130  2.04 ÷ 20A   | Current value for voltages > 150V.     | Peak I limit value                      .</para>
            <para>         1.02 ÷ 20A   | Current value for voltages ≤ 150V.     | I limit Rms fixed at 5.33A / 2.66A      .</para>
            <para> --------------------------------------------------------------------------------------------------------.</para>
            <para> ACG140  0.1 ÷ 15A    | Current value for voltages > 150V.     | Rms I limit                             .</para>
            <para>         0.1 ÷ 7.5A   | Current value for voltages ≤ 150V.     |.                                        .</para></param>
            <param name="frequency">It identifies the frequency value to generate expressed in MHz. Possible values are: 40 - 500.</param>
            <returns><para>   0                       ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_ACGEN_NOT_PRESENT   ->  The AC Generator module is not present.                        </para>
                     <para>  ERR_ACGEN_V_VALUE       ->  The voltage value parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_V_RANGE       ->  The voltage range parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_I_VALUE       ->  The current value parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_I_LIMIT       ->  The current limit parameter is not valid.                      </para>
                     <para>  ERR_ACGEN_FREQUENCY     ->  The frequency value is not valid.                              </para></returns>
        </member>
        <member name="M:Spea.LeoF.ACLineSyncSet(Spea.FlagIdAcLine,Spea.SbusLine)">
            <summary>
            The ACLineSyncSet instruction connects/disconnects the AC synchronism line to the Synchro Bus (this line is derived from the system AC power supply).
            </summary>
            <param name="flagId">It identifies the flag to connect. It is the same signal, but it has two names, which identify the bus it is connected to.</param>
            <param name="sbusLine">It identifies the line of the Synchro Bus used for the connection.</param>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para>
                     <para>  ERR_INV_FLAG_ID         ->  The FlagId parameter is not valid.                            </para>
                     <para>  ERR_INV_SYNC_LINE       ->  The SbusLine parameter is not valid.                          </para>
                     <para>  ERR_INV_LINE_FOR_FLAG   ->  The SbusLine parameter is not valid for the selected FlagId.  </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlIdle">
            <summary>
            <para>The AnlIdle instruction sets all the analog module units in Idle status.</para>
            <para>The analog module consists of:</para>
            <para>-Instruments.</para>
            <para>-Scanners.</para>
            <para>-Analog Timing.</para>
            <para>-Various settings as relay mode, wait time, etc.</para>
            <para>-Note: The connections to the Synchro Bus (Sbus/Esbus) are not reset by this instruction, but by SbusIdle instruction.</para>
            </summary>
            <returns> 0                     -> The instruction has been successfully executed without errors. |
                      ERR_AUX_NOT_PRESENT   -> The AUX module is not present.</returns>
        </member>
        <member name="M:Spea.LeoF.AnlPhaseDisable(Spea.AnlPhase)">
            <summary>
            The AnlPhaseDisable instruction disables the analog timing phases.
            </summary>
            <param name="phaseId">It identifies the analog phase to be disabled.</param>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para>
                     <para>  ERR_PHASE_NOT_VALID     ->  The PhaseId parameter is not valid.                           </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlPhaseEnable(Spea.AnlPhase)">
            <summary>
            The AnlPhaseEnable instruction enables the analog timing phases.
            </summary>
            <param name="phaseId">It identifies the analog phase to be enabled.</param>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para>
                     <para>  ERR_PHASE_NOT_VALID     ->  The PhaseId parameter is not valid.                           </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlPhaseSet(Spea.AnlPhase,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            The AnlPhaseSet instruction programs the analog timing phases.
            </summary>
            <param name="phaseId">It identifies the analog phase to be configured.</param>
            <param name="tOff1">Toff1 programming value (in sec). Resolution: 1*10-6 (1µs). Possible values: 0 - 4294.6s.</param>
            <param name="tOn">Ton programming value (in sec). Resolution: 1*10-6 (1µs). Possible values: 1*10-6(1µs) - 4294.6s.</param>
            <param name="tOff2">Toff2 programming value (in sec). Resolution: 1*10-6 (1µs). Possible values: 0 - 4294.6s.</param>
            <param name="cycles">Number of cycles.</param>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para>
                     <para>  ERR_PHASE_NOT_VALID     ->  The PhaseId parameter is not valid.                           </para>
                     <para>  ERR_INV_TON_TOFF        ->  The parameter Ton or Toff1 or Toff2 is not valid.             </para>
                     <para>  ERR_INV_CYCLES          ->  The Cycles parameter is out of range.                         </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlRelayModeSet(Spea.AnlRelMode)">
            <summary>
            The AnlRelayModeSet instruction selects the scanners relays switching mode. There are two modalities: SWITCHING and LATCHING.
            </summary>
            <param name="mode">It identifies the aswitching mode for the analog relays.</param>
            <returns>??? is not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.AnlRelayTimeSet(Spea.AnlRelTime)">
            <summary>
            <para>The AnlRelayTimeSet instruction sets the relays switching time on the analog module scanners and instruments. </para>
            <para>This wait time is the time needed to complete a relay switching instruction. At the moment the relays switching time is fixed, and its value depends on the instruction. This instruction is provided for future use.</para>
            </summary>
            <param name="time">Defines the switching time.</param>
            <returns>??? is not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.AnlTaskMeasStoreDisable">
            <summary>
            This instruction disables the storing execution of the analog task measurement.
            </summary>
        </member>
        <member name="M:Spea.LeoF.AnlTaskMeasStoreEnable">
            <summary>
            This instruction enables the storing execution of the analog task measurement.
            </summary>
        </member>
        <member name="M:Spea.LeoF.AnlTimeoutSet(System.Int32)">
            <summary>
            <para>The AnlTimeoutSet instruction controls the time-out on the analog test start.</para>
            <para> When the start test source is not IMMEDIATE, the time-out is enabled by default (see the AnlTimingStartModeSet instruction).
            If the programmed starting event does not occur until the time-out, then the analog test execution is aborted, and a warning message is displayed.The test result is FAIL.</para>
            </summary>
            <param name="timeOut">Timeout value in ms. The default time-out value is 100ms.</param>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para>
                     <para>  ERR_INV_TIMEOUT         ->  The Timeout parameter is out of range.                        </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlTimingDisable">
            <summary>
            <para>The AnlTimingDisable instruction disables the analog timing.</para>
            <para>This disabling concerns the whole "Analog Timing" instrument, however it works (both with the internal generator and with the signals coming from an external source).</para>
            </summary>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlTimingEnable">
            <summary>
            <para>The AnlTimingEnable instruction enables the analog timing.</para>
            <para>This enabling concerns the whole "Analog Timing" instrument, however it works (both with the internal generator and with the signals coming from an external source).</para>
            </summary>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlTimingIdle">
            <summary>
            <para>The AnlTimingIdle instruction sets the analog timing in idle/default status. Idle/default status is the following:</para>
            <para>-           Toff1/Toff2/Ton of all the phases = 1µs.</para>
            <para>-           Number of cycles of all the phases = 1.</para>
            <para>-           Disabled phases.</para>
            <para>-           Source of the timing output signals = internal generator.</para>
            <para>-           Timing start source = internal.</para>
            <para>-           Time-out 100ms.</para>
            </summary>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlTimingOutSourceSet(Spea.OutSource)">
            <summary>
            <para>The AnlTimingOutSourceSet instruction determines which is the analog timing outputs source.</para>
            <para>It is possible to connect an external signal source to the system interface and use it to generate the timing outputs.</para>
            <para>When working in this mode, the internal timing generator does nothing and its outputs are driven by the signals on the system interface (INPSYNC[1..4] signals).</para>
            <para>This functionality can be used only during the execution of a functional test program. It has been implemented to maintain the compatibility with the systems of previous generations.The same functionality can be now obtained with the Synchro Bus correct connection.</para>
            <para>The signals on the system interface controlling this mode are:</para>
            <para>Signal                                | Reference ground      | Active level | Description.</para>
            <para>ENEXTIMA                              | GND_ENEXTIMA          | H            | Enables the external timing source. To use this feature it has to be enabled both by this instruction and by this input.</para>
            <para>INPSYNC1,INPSYNC2,INPSYNC3,INPSYNC4   | GND_INPSYNC           | H            | Signals.</para>
            <para>-----------------------------------------------------------------------------------------------------------.</para>
            <para>Outputname | Source Signal.</para>
            <para>ATEST      | INPSYNC1     .</para>
            <para>APH1       | INPSYNC2     .</para>
            <para>APH2       | INPSYNC3     .</para>
            <para>APH3       | INPSYNC4     .</para>
            <para>APH4       | Idle         .</para>
            <para>SYNCFREQ   | Idle         .</para>
            </summary>
            <param name="outSource">Output source. The OS_INTERNAL mode is set by default at the start of the test program.</param>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para>
                     <para>  ERR_INV_OUT_SOURCE      ->  The OutSource parameter is not valid.                         </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlTimingStartModeSet(Spea.StartSource,Spea.StartMode,Spea.StartPol)">
            <summary>
            <para>The AnlTimingStartModeSet instruction selects the start source of the analog test.</para>
            <para>Notes:</para>
            <para>1.)The meaning of the two StartMode and StartPol parameters is the following:</para>
            <para>·         If StartSource = IMMEDIATE, they have no meaning.</para>
            <para>·         If StartSource = ACLINE, only the StartPol parameter is meaningful because the test will always start on an edge of the AC synchronism line(this line is derived by the system AC power supply).</para>
            <para>StartPol      |   Meaning.</para>
            <para>DIRECT        |   Start on the rising zero-crossing of the AC-Signal.</para>
            <para>StartPol      |   Start on the falling zero-crossing of the AC-Signal.</para>
            <para>#####################################################################################################################################################.</para>
            <para>2.)If StartSource = all the other values, the meaning of the two combined StartMode and StartPol parameters is the following:</para>
            <para>StartMode      |   StartPol       |   Meaning.</para>
            <para>LEVEL          |   DIRECT         |   Start on Active (H) level of the chosen signal.</para>
            <para>LEVEL          |   INVERTED       |   Start on Inactive (L) level of the chosen signal.</para>
            <para>EDGE           |   DIRECT         |   Start on positive edge of the chosen signal.</para>
            <para>EDGE           |   INVERTED       |   Start on negative edge of the chosen signal.</para>
            <para>#####################################################################################################################################################.</para>
            <para>3.)The UNRELEVANT value is used as “filler” when the parameter has no meaning.</para>
            </summary>
            <param name="startSource">StartSource.</param>
            <param name="startMode">StartMode.</param>
            <param name="startPol">StartPol.</param>
            <returns><para>   0                      ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.                                </para>
                     <para>  ERR_INV_START_SOURCE    ->  The StartSource parameter is not valid.                       </para>
                     <para>  ERR_INV_START_MODE      ->  The StartMode parameter is not valid.                       </para>
                     <para>  ERR_INV_START_POLE      ->  The StartPole parameter is not valid.                       </para></returns>
        </member>
        <member name="M:Spea.LeoF.AnlTimingSyncSet(Spea.AnlTimingSyncFlagID,Spea.SbusLine)">
            <summary>
            <para>The AnlTimingSyncSet instruction controls the connection of analog timing inputs and outputs to the Synchro Bus (SBUS/ESBUS).</para>
            <para>The inputs flags are the following: </para>
            <para>·         ATIMSTARTS = Start of the Timing coming from SBUS.</para>
            <para>·         ATIMSTARTE = Start of the Timing coming from ESBUS.</para>
            <para>The outputs are the following:</para>
            <para>·         ATEST = Analog test.</para>
            <para>·         APH1÷ APH4 = Analog phase 1 to 4.</para>
            </summary>
            <param name="flagID">Flag IDs.</param>
            <param name="line">E/SBUS Line Connection.</param>
            <returns>??? not documented maybe in summary described outputs.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuConnectAbus(Spea.Uabus,Spea.Abus)">
            <summary>
            <para>The BmuConnectAbus instruction connects the UABUS row of the YABMU board to the system ABUS row.</para>
            </summary>
            <param name="rows">UABUS to be connected.</param>
            <param name="abusRow">ABUS row to be connected.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuDiagChanConnectUabus(System.Collections.Generic.IEnumerable{System.Int16},Spea.Uabus)">
            <summary>
            <para>The BmuDiagChanConnectUabus instruction connects the specified channel(s) to the UABUS row of the YABMU board.</para>
            </summary>
            <param name="chArray">It identifies the array containing the list of the YABMU internal channels to be connected. The array has to terminate with 0.</param>
            <param name="row">UABUS row to be connected.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuDiagChanDisconnectAllUabus">
            <summary>
            <para>The BmuDiagChanDisconnectAllUabus instruction disconnects all internal channels of the YABMU board from the system ABUS rows.</para>
            </summary>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuDiagChanDisconnectUabus(System.Collections.Generic.IEnumerable{System.Int16},Spea.Uabus)">
            <summary>
            <para>The BmuDiagChanDisconnectUabus instruction disconnects the specified channel(s) from the UABUS row of the YABMU board.</para>
            </summary>
            <param name="chArray">It identifies the array containing the list of the YABMU internal channels to be disconnected. The array has to terminate with 0.</param>
            <param name="row">UABUS row to be disconnected.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuDisconnectAll(Spea.BMUHead)">
            <summary>
            <para>The BmuDisconnectAll instruction disconnects all pins of Bottom Multiprobe Unit from all UABUS’s rows of the YABMU board and from the system ABUS rows.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuMove(Spea.BMUHead,Spea.BMUPadId)">
            <summary>
            <para>The BmuMove instruction moves the Bottom Multiprobe Unit on the Pad.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="padId">Pad Identifier.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuMoveUpDown(Spea.BMUHead,Spea.BMUZDirection)">
            <summary>
            <para>The BmuMoveUpDown instruction performs the Z-Axis movement of the Bottom Multiprobe Unit.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="bmuUpDown">Up/Down movement selection.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuMoveXY(Spea.BMUHead,System.Int32,System.Int32)">
            <summary>
            <para>The BmuMoveXY instruction moves the Bottom Multiprobe Unit to the specified X-Y coordinates (referred to the Pin#1 of the Bottom Multiprobe Unit.).</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="coordX">It identifies the X-coordinate where to move the Bottom Multiprobe Unit movement.</param>
            <param name="coordY">It identifies the Y-coordinate where to move the Bottom Multiprobe Unit movement.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuPinConnectUabus(Spea.BMUHead,Spea.BMUPin,Spea.Uabus)">
            <summary>
            <para>The BmuPinConnectUabus instruction connects the Bottom Multiprobe Unit’s pin to UABUS’s row of the YABMU board for connection with an instrument.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="pin">pin to be connected.</param>
            <param name="row">UABUS row.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuPinDisconnectUabus(Spea.BMUHead,Spea.BMUPin,Spea.Uabus)">
            <summary>
            <para>The BmuPinDisconnectUabus instruction disconnects the Bottom Multiprobe Unit’s pin from UABUS’s row of the YABMU board.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="pin">pin to be connected.</param>
            <param name="row">UABUS row.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuTPConnectUabus(Spea.BMUHead,System.Int32,Spea.Uabus)">
            <summary>
            <para>The BmuTpConnectUabus instruction connects the Bottom Multiprobe Unit’s test point to UABUS’s row of the YABMU board.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="tp">testpoint to be connected.</param>
            <param name="row">UABUS row.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuTPDisconnectAllUabus(Spea.BMUHead,System.Int32)">
            <summary>
            <para>The BmuTpDisconnectAllUabus instruction disconnects the Bottom Multiprobe Unit’s test point from all UABUS’s rows of the YABMU board.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="tp">testpoint to be disconnected.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BmuTPDisconnectUabus(Spea.BMUHead,System.Int32,Spea.Uabus)">
            <summary>
            <para>The BmuTpDisconnectUabus instruction disconnects the Bottom Multiprobe Unit’s test point from the UABUS’s row of the YABMU board.</para>
            </summary>
            <param name="bmuId">Bottom Multiprobe Unit identifier.</param>
            <param name="tp">testpoint to be connected.</param>
            <param name="row">UABUS row.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BoardCodeRead(System.Int32@)">
            <summary>
            <para>The BoardCodeRead instruction allows reading the board code.</para>
            </summary>
            <param name="boardCode">It identifies the board code.</param>
            <returns>FailFlag (0) = PASS (1) = FAIL.</returns>
        </member>
        <member name="M:Spea.LeoF.BoardInTestRead(System.Int32@)">
            <summary>
            <para>The BoardInTestRead instruction reads the current site in test.</para>
            </summary>
            <param name="site">It identifies the current site in test (returned by this instruction).</param>
            <returns>FailFlag: (0) = PASS | (1) = FAIL.</returns>
        </member>
        <member name="M:Spea.LeoF.BoardInTestRead(System.Int32)">
            <summary>
            <para>The BoardInTestRead instruction reads the current site in test.</para>
            <para>This instruction works only if the "panel of boards" feature is active, otherwise it does nothing.</para>
            </summary>
            <param name="site">It identifies the current site in test.</param>
            <returns>FailFlag: (0) = PASS | (1) = FAIL.</returns>
        </member>
        <member name="M:Spea.LeoF.BscanDatalogTest(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,Spea.BscanTestResult,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            The BScanDatalogTest instruction writes the boundary scan test results in the Runpack Datalog files.
            </summary>
            <param name="taskNumber">Task number.</param>
            <param name="testNumberInTask">Test number related to task.</param>
            <param name="uniqueTestId">Unique test identifier.</param>
            <param name="testNumber">Test number related to all Boundary Scan test plans.</param>
            <param name="drawingReference">Component name.</param>
            <param name="remark">Test remark.</param>
            <param name="testResult">Test result.</param>
            <param name="measuredValueStr">It identifies the measured value.</param>
            <param name="thrLowStr">It identifies the low threshold value.</param>
            <param name="thrHighStr">It identifies the high threshold value.</param>
            <param name="tpListStr">It identifies the list of test points involved in the test.</param>
            <param name="siteNum">It identifies the board of the panel under test.</param>
        </member>
        <member name="M:Spea.LeoF.BscanExTest(System.String)">
            <summary>
            <para>The BscanExTest instruction updates the output pins logical levels and the status of the input pins.</para>
            </summary>
            <param name="chainName">It identifies the chain to verify the TAP controller ID code.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_BSCAN_CHAIN_NAME  ->      The ChainName parameter is not valid.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BscanTapClose(System.String)">
            <summary>
            <para>The BscanTapClose instruction closes the boundary scan session.</para>
            </summary>
            <param name="chainName">It identifies the chain to close the boundary scan session.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_BSCAN_CHAIN_NAME  ->      The ChainName parameter is not valid.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BscanTapConnect(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The BscanTapConnect instruction assigns the test point number of each TAP controller signal.
            </summary>
            <param name="chainName">It identifies the chain to assign the test point of TAP controller.</param>
            <param name="tpTCK">It identifies the TCK test point.</param>
            <param name="tpTMS">It identifies the TMS test point.</param>
            <param name="tpTDI">It identifies the TDI test point.</param>
            <param name="tpTDO">It identifies the TDO test point.</param>
            <param name="tpTRST">It identifies the TRST test point.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_BSCAN_CHAIN_NAME  ->      The ChainName parameter is not valid.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BscanTapOpen(System.String,System.Int32)">
            <summary>
            <para>The BscanTapOpen instruction initializes the TAP controller and opens the boundary scan session.</para>
            </summary>
            <param name="chainName">It identifies the chain of the TAP controller and opens the boundary scan session.</param>
            <param name="maxFrequency">It identifies the max frequency allowed to the TAP controller.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_BSCAN_CHAIN_NAME  ->      The ChainName parameter is not valid.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BscanTapPinsLevelRead(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.List{Spea.BscanTestPinLevel}@)">
            <summary>
            The BscanTapPinsLevelRead instruction reads the logical levels (high and low) of each pin of the array referred to the specified drawing reference.
            </summary>
            <param name="chainName">It identifies the chain to set the pin logical levels.</param>
            <param name="drawingReference">It identifies the drawing reference to read the pin logical levels.</param>
            <param name="pinNameArray">It identifies the list of pin name to read the logical levels.</param>
            <param name="pinLevelArray">It identifies the returned list of pin level read.</param>
            <returns><para>   0                             ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_BSCAN_CHAIN_NAME           ->  The ChainName parameter is not valid.                         </para>
                     <para>  ERR_BSCAN_DRAWING_REFERENCE    ->  The DrwRef parameter is not valid.                            </para>
                     <para>  ERR_BSCAN_PIN_NAME_ARRAY       ->  The PinNameArray is NULL.                                     </para>
                     <para>  ERR_BSCAN_PIN_LEVEL_ARRAY      ->  The PinLevelArray is NULL.                                    </para>
                     <para>  ERR_BSCAN_PIN_LEVEL            ->  One or more Pin level contained on PinLevelArray parameter are not valid.</para>
                     </returns>
        </member>
        <member name="M:Spea.LeoF.BscanTapPinsLevelSet(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Spea.BscanTestPinLevel})">
            <summary>
            The BscanTapPinsLevelSet instruction sets the logical levels (high, low, three state) for each pin of the array referred to the specified drawing reference.
            </summary>
            <param name="chainName">It identifies the chain to set the pin logical levels.</param>
            <param name="drawingReference">It identifies the drawing reference to set the pin logical levels.</param>
            <param name="pinNameArray">It identifies the list of pin name to set the logical levels.</param>
            <param name="pinLevelArray">It identifies the list of pin level to set.</param>
            <returns><para>   0                             ->  The instruction has been successfully executed without errors.</para>
                     <para>  ERR_BSCAN_CHAIN_NAME           ->  The ChainName parameter is not valid.                         </para>
                     <para>  ERR_BSCAN_DRAWING_REFERENCE    ->  The DrwRef parameter is not valid.                            </para>
                     <para>  ERR_BSCAN_PIN_NAME_ARRAY       ->  The PinNameArray is NULL.                                     </para>
                     <para>  ERR_BSCAN_PIN_LEVEL_ARRAY      ->  The PinLevelArray is NULL.                                    </para>
                     <para>  ERR_BSCAN_PIN_LEVEL            ->  One or more Pin level contained on PinLevelArray parameter are not valid.</para>
                     </returns>
        </member>
        <member name="M:Spea.LeoF.BscanTapTest(System.String)">
            <summary>
            <para>The BscanTapTest instruction verifies the TAP controller signal connection and the chain integrity.</para>
            </summary>
            <param name="chainName">It identifies the chain to verify the TAP controller signal connection and its integrity.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_BSCAN_CHAIN_NAME  ->      The ChainName parameter is not valid.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstClear(Spea.BoosterId)">
            <summary>
            <para>The BstClear instruction allows to set the specified booster to the default values. The instruction executes automatically all the sequences required to disconnect the booster module.</para>
            <para>Enable - OFF.</para>
            <para>Voltage - 0V.</para>
            <para>Current - 10mA.</para>
            <para>OutFormat - CONT_ON.</para>
            <para>VoltReference - INTERNAL.</para>
            <para>CONNECTION: HOT - NOT_CONN / COLD - NOT_CONN.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstConnectAbus(Spea.BoosterId,Spea.Abus,Spea.Abus)">
            <summary>
            <para>The BstConnectAbus instruction allows the connection of the booster with the specified line of the ABUS. The connection to the indicated lines is added to those already performed, if any.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="hotRow">It identifies the positive pole of the booster.</param>
            <param name="coldRow">It identifies the negative pole of the booster.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstConnectInterf(Spea.BoosterId,Spea.InstrInterfCon)">
            <summary>
            <para>The BstConnectInterf instruction allows the connection of the booster with the System Interface. The points connection is executed in addition to those already connected, if any.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="point">It identifies the points to be connected to the System Interface.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            <para>ERR_INV_POINT         ->      The Point parameter is not valid.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstConnectUabusBmu(Spea.BoosterId,Spea.Uabus5To8,Spea.Uabus1To4,Spea.Uabus1To4,Spea.Uabus5To8,Spea.Uabus1To4,Spea.Uabus5To8)">
            <summary>
            The BstConnectUabusBmu instruction connects the interface pins of the booster to the UABUS rows of the YABMU board.
            </summary>
            <param name="instrId">It identifies the booster to be connected.</param>
            <param name="rowHotP">It identifies the UABUS row to connect with the 1st positive pole of the booster.</param>
            <param name="rowHotPK">It identifies the UABUS row to connect with the 2nd positive pole of the booster.</param>
            <param name="rowColdP">It identifies the UABUS row to connect with the 1st negative pole of the booster.</param>
            <param name="rowColdPK">It identifies the UABUS row to connect with the 2nd negative pole of the booster.</param>
            <param name="rowHotS">It identifies the UABUS row to connect with the sense positive pole of the booster.</param>
            <param name="rowColdS">It identifies the UABUS row to connect with the sense negative pole of the booster.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BstDisable(Spea.BoosterId)">
            <summary>
            <para>The BstDisable instruction allows to switch OFF the specified booster.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstDisconnectAbus(Spea.BoosterId,Spea.Abus,Spea.Abus)">
            <summary>
            <para>The BstDisconnectAbus instruction allows the disconnection of the specified line from the ABUS.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="hotRow">It identifies the positive pole of the booster.</param>
            <param name="coldRow">It identifies the negative pole of the booster.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstDisconnectAll(Spea.BoosterId)">
            <summary>
            <para>The BstDisconnectAll instruction allows the disconnection of the booster module from the ABUS, MBUS, and the System Interface.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstDisconnectInterf(Spea.BoosterId,Spea.InstrInterfCon)">
            <summary>
            <para>The BstDisconnectInterf instruction allows the disconnection of the booster from the System Interface.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="point">It identifies the points to be disconnected from the System Interface.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            <para>ERR_INV_POINT         ->      The Point parameter is not valid.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstDisconnectUabusBmu(Spea.BoosterId,Spea.InstrBMUUabusCon)">
            <summary>
            <para>The BstDisconnectUabusBmu instruction disconnects the booster from the system interface and from the UABUS rows of the YABMU board.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="point">It identifies the points to be disconnected from the UABUS.</param>
            <returns>
            <para>??? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstEnable(Spea.BoosterId)">
            <summary>
            <para>The BstEnable instruction allows to switch ON the specified booster.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para></returns>
        </member>
        <member name="M:Spea.LeoF.BstExtInputConnect(Spea.BoosterId,Spea.InstrExtInput)">
            <summary>
            <para>The BstExtInputConnect instruction allows the connection of the voltage external reference input.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="source">Input voltage source origin.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            <para>ERR_INV_SOURCE        ->      The Source parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstExtInputDisconnect(Spea.BoosterId)">
            <summary>
            <para>The BstExtInputDisconnect instruction allows the disconnection of the voltage external reference input.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstReadbackIConnectMbus(Spea.BoosterId,Spea.MbusLine)">
            <summary>
            <para>The BstReadbackIConnectMbus instruction allows the connection of the readback current output of the booster with the MBUS.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="mbusLine">MBUS Line to connect.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            <para>ERR_INV_MBUS          ->      The MbusLine parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstReadbackIDisconnectMbus(Spea.BoosterId)">
            <summary>
            <para>The BstReadbackIDisconnectMbus instruction allows the disconnection of the booster current readback output from the MBUS.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstReadbackVConnectMbus(Spea.BoosterId,Spea.MbusLine)">
            <summary>
            <para>The BstReadbackVConnectMbus instruction allows the connection of the booster voltage readback output with the MBUS.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="mbusLine">MBUS Line to connect.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            <para>ERR_INV_MBUS          ->      The MbusLine parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstReadbackVDisconnectMbus(Spea.BoosterId)">
            <summary>
            <para>The BstReadbackVDisconnectMbus instruction allows the disconnection of the booster voltage readback output from the MBUS.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstSourceSet(Spea.BoosterId,System.Double,System.Double,Spea.BstRangeI,Spea.OutputFormat)">
            <summary>
            <para>The BstSourceSet instruction allows to set the specified booster to the specified values.</para>
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="vValue">It identifies the output voltage (maximum value ±40V / ±100V).</param>
            <param name="iValue"><para>It identifies the supplied or absorbed output current (expressed in Ampere) in absolute value.</para>
            <para>Range (Old)       |       Range(New)          |Checks.            </para>
            <para>#################################################################.</para>
            <para>100mA             |       1A                  |Inew under 300mA.  </para>
            <para>100mA             |       3A                  |Not allowed.       </para>
            <para>1A                |       100mA               |Iold under 300mA.  </para>
            <para>1A                |       3A                  |Iold under 1A.     </para>
            <para>3A                |       100mA               |Not allowed.       </para>
            <para>3A                |       1A                  |Iold greater 1A.   </para></param>
            <param name="iRange">It identifies the setting current range.</param>
            <param name="outFormat">It identifies the output voltage source origin.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para>
            <para>ERR_INV_VOLTAGE       ->      The vValue parameter is out of range.</para>
            <para>ERR_INV_CURRENT       ->      The Ivalue parameter is out of possible programming range.</para>
            <para>RR_INV_CURRENT_RANGE  ->      The Ivalue parameter is out of the selected current range.</para>
            <para>ERR_INV_OUT_FORMAT    ->      The OutFormat parameter is not valid.</para>
            <para>ERR_INV_POWER         ->      The power is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.BstSyncSet(Spea.BoosterId,Spea.BstTimingFlags,Spea.BstSbusCon)">
            <summary>
            The BstSyncSet instruction allows to connect or disconnect the flag of the booster to the Synchro Bus.
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="flag">Flag to connect.</param>
            <param name="sbusLine">SBUS Line to connect.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.BstTimingSet(Spea.BoosterId,Spea.BstTimingFlags)">
            <summary>
            The BstTimingSet instruction allows to select the timing to use when the booster is programmed in PULSE (refer to the BstSourceSet instruction).
            </summary>
            <param name="instrId">Booster identifier.</param>
            <param name="flag">Timing selection.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_BST           ->      The BST module is not present.</para></returns>
        </member>
        <member name="M:Spea.LeoF.ChAbusModeSet(Spea.AbusMode)">
            <summary>
            The ChAbusModeSet instruction allows to program all system scanners and to define the scanner ABUS lines to use.
            </summary>
            <param name="mode">Scanner ABUS lines used.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para></returns>
        </member>
        <member name="M:Spea.LeoF.ChanConnectAbus(System.Collections.Generic.IEnumerable{System.Int16},Spea.Abus)">
            <summary>
            The ChanConnectAbus instruction allows the connection of the specified channels to the specified line(s) of the ABUS.
            </summary>
            <param name="chanArray">List of channels to be connected. Has to end with 0.</param>
            <param name="rowMask">Line to be connected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanConnectUabus(System.Collections.Generic.IEnumerable{System.Int16},Spea.Uabus)">
            <summary>
            The ChanConnectUabus instruction allows the connection of the specified channels to the specified line(s) of the UABUS.
            </summary>
            <param name="chanArray">List of channels to be connected. Has to end with 0.</param>
            <param name="rowMask">Line to be connected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanDisconnectAbus(System.Collections.Generic.IEnumerable{System.Int16},Spea.Abus)">
            <summary>
            The ChanDisconnectAbus instruction allows the disconnection of the specified channels to the specified line(s) of the ABUS.
            </summary>
            <param name="chanArray">List of channels to be disconnected. Has to end with 0.</param>
            <param name="rowMask">Line to be disconnected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanDisconnectAllAbus(Spea.Abus)">
            <summary>
            The ChanDisconnectAllAbus instruction allows the disconnection of all the channels from the specified line(s) of the ABUS.
            </summary>
            <param name="rowMask">Line to be disconnected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanDisconnectUabus(System.Collections.Generic.IEnumerable{System.Int16},Spea.Uabus)">
            <summary>
            The ChanDisconnectUabus instruction allows the disconnection of the specified channels to the specified line(s) of the UABUS.
            </summary>
            <param name="chanArray">List of channels to be disconnected.</param>
            <param name="rowMask">Line to be disconnected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanStrConnectAbus(System.String,Spea.Abus)">
            <summary>
            The ChanStrConnectAbus instruction allows the connection of the specified channels to the specified line(s) of the ABUS.
            </summary>
            <param name="chanList">It identifies the channels string to be connected (e.g. "1,3-5": connects the channels 1,3,4,5).</param>
            <param name="rowMask">Line to be connected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanStrConnectAbus(System.String,Spea.Uabus)">
            <summary>
            The ChanStrConnectUabus instruction allows the connection of the specified channels to the specified line(s) of the UABUS.
            </summary>
            <param name="chanList">It identifies the channels string to be connected (e.g. "1,3-5": connects the channels 1,3,4,5).</param>
            <param name="rowMask">Line to be connected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanStrDisconnectAbus(System.String,Spea.Abus)">
            <summary>
            The ChanStrDisconnectAbus instruction allows the disconnection of the specified channels to the specified line(s) of the ABUS.
            </summary>
            <param name="chanList">It identifies the channels string to be disconnected (e.g. "1,3-5": disconnects the channels 1,3,4,5).</param>
            <param name="rowMask">Line to be disconnected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.ChanStrDisconnectUabus(System.String,Spea.Uabus)">
            <summary>
            The ChanStrDisconnectUabus instruction allows the disconnection of the specified channels to the specified line(s) of the UABUS.
            </summary>
            <param name="chanList">It identifies the channels string to be disconnected (e.g. "1,3-5": disconnects the channels 1,3,4,5).</param>
            <param name="rowMask">Line to be disconnected.</param>
            <returns>0                     ->      The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.CheckStop">
            <summary>
            The CheckStop instruction checks if the Stop button has been pressed.
            </summary>
            <returns>This instruction returns nonzero if the Stop button has been pressed, otherwise returns 0.</returns>
        </member>
        <member name="M:Spea.LeoF.CntClear(Spea.CntInstrId)">
            <summary>
            The CntClear instruction sets the counter module to the default values.
            </summary>
            <param name="unit">Unit identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectAbus(Spea.CntInstrId,Spea.Abus,Spea.Abus,Spea.Abus)">
            <summary>
            The CntConnectAbus instruction allows the connection of the specified counter channel to the ABUS.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB">It identifies the channel B to be connected.</param>
            <param name="reference">It identifies the ABUS line connected with the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectAbus(Spea.Abus,Spea.Abus,Spea.CntRefCon)">
            <summary>
            The CntConnectAbus instruction allows the connection of the specified counter channel to the ABUS. CNT1 is set as unit.
            </summary>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB"> It identifies the channel B to be connected.</param>
            <param name="reference"> It identifies the ABUS line connected with the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectDvm(Spea.CntInstrId,Spea.CntDvmCon,Spea.CntDvmCon)">
            <summary>
            The CntConnectDvm instruction allows the connection of the specified counter channel to the input stage of the measurement unit (DVM). With this connection it is possible to use features of the measurement input stage like filters and scale.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB">It identifies the channel B to be connected.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectDvm(Spea.CntDvmCon,Spea.CntDvmCon)">
            <summary>
            <para>The CntConnectDvm instruction allows the connection of the specified counter channel to the input stage of the measurement unit (DVM). With this connection it is possible to use features of the measurement input stage like filters and scale.</para>
            <para>Unit is set as CNT1.</para>
            </summary>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB">It identifies the channel B to be connected. DVM2 only possible for YAPMU300.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectFlag(Spea.CntInstrId,Spea.CntConFlag,Spea.CntConFlag)">
            <summary>
            The CntConnectFlag instruction allows the connection of the specified counter channel to the SBUS.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB">It identifies the channel B to be connected.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectFlag(Spea.CntConFlag,Spea.CntConFlag)">
            <summary>
            The CntConnectFlag instruction allows the connection of the specified counter channel to the SBUS. CNT1 set as unit.
            </summary>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB">It identifies the channel B to be connected.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectInterf(Spea.CntInstrId,Spea.CntInterfCon,Spea.CntInterfCon,Spea.CntRefCon)">
            <summary>
            The CntConnectInterf instruction allows the connection of the specified counter channel to the System Interface.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="hot">It identifies the input channel A of the counter. Only EXTCH1_CNT is available for YAICT.</param>
            <param name="cold">It identifies the input channel B of the counter. Only EXTCH2_CNT is available for YAICT.</param>
            <param name="reference">Refernece connection of the counter.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POL       ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POL      ->      The Cold parameter is not valid.</para>
            <para>ERR_PMU_REF           ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectInterf(Spea.CntInterfCon,Spea.CntInterfCon,Spea.CntRefCon)">
            <summary>
            <para>The CntConnectInterf instruction allows the connection of the specified counter channel to the System Interface.</para>
            <para>CNT1 is set as unit.</para>
            </summary>
            <param name="hot">It identifies the input channel A of the counter. Only EXTCH1_CNT is available for YAICT.</param>
            <param name="cold">It identifies the input channel B of the counter. Only EXTCH2_CNT is available for YAICT.</param>
            <param name="reference">Refernece connection of the counter.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POL       ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POL      ->      The Cold parameter is not valid.</para>
            <para>ERR_PMU_REF           ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectMbus(Spea.CntInstrId,Spea.MbusLine,Spea.MbusLine,Spea.MbusLine)">
            <summary>
            The CntConnectMbus instruction allows the connection of the specified counter channel to the MBUS.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB">It identifies the channel B to be connected.</param>
            <param name="reference">It identifies the ABUS line connected with the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntConnectMbus(Spea.MbusLine,Spea.MbusLine,Spea.MbusLine)">
            <summary>
            The CntConnectMbus instruction allows the connection of the specified counter channel to the MBUS. CNT1 is set as unit.
            </summary>
            <param name="chA">It identifies the channel A to be connected.</param>
            <param name="chB">It identifies the channel B to be connected.</param>
            <param name="reference">It identifies the ABUS line connected with the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisable(Spea.CntInstrId)">
            <summary>
            The CntDisable instruction disables the counter module.
            </summary>
            <param name="unit">Unit identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisonnectAbus(Spea.CntInstrId,Spea.Abus,Spea.Abus,Spea.Abus)">
            <summary>
            The CntDisconnectAbus instruction allows the disconnection of the specified counter channel from the ABUS.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB">It identifies the channel B to be disconnected.</param>
            <param name="reference">It identifies the ABUS line disconnected with the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectAbus(Spea.Abus,Spea.Abus,Spea.CntRefCon)">
            <summary>
            The CntDisconnectAbus instruction allows the disconnection of the specified counter channel from the ABUS.
            </summary>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB"> It identifies the channel B to be disconnected.</param>
            <param name="reference"> It identifies the ABUS line disconnected with the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectAll(Spea.CntInstrId)">
            <summary>
            The CntDisconnectAll instruction allows the disconnection of the counter module from the ABUS, MBUS, and the System Interface.
            </summary>
            <param name="unit">Unit identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectDvm(Spea.CntInstrId,Spea.CntDvmCon,Spea.CntDvmCon)">
            <summary>
            The CntDisconnectDvm instruction allows the disconnection of the specified counter channel to the input stage of the measurement unit (DVM).
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB">It identifies the channel B to be disconnected.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectDvm(Spea.CntDvmCon,Spea.CntDvmCon)">
            <summary>
            <para>The CntDisconnectDvm instruction allows the disconnection of the specified counter channel to the input stage of the measurement unit (DVM).</para>
            <para>Unit is set as CNT1.</para>
            </summary>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB">It identifies the channel B to be disconnected. DVM2 only possible for YAPMU300.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectFlag(Spea.CntInstrId,Spea.CntConFlag,Spea.CntConFlag)">
            <summary>
            The CntDisconnectFlag instruction allows the disconnection of the specified counter channel to the SBUS.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB">It identifies the channel B to be disconnected.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectFlag(Spea.CntConFlag,Spea.CntConFlag)">
            <summary>
            The CntDisconnectFlag instruction allows the disconnection of the specified counter channel to the SBUS. CNT1 set as unit.
            </summary>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB">It identifies the channel B to be disconnected.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectInterf(Spea.CntInstrId,Spea.CntInterfCon,Spea.CntInterfCon,Spea.CntRefCon)">
            <summary>
            The CntDisconnectInterf instruction allows the disconnection of the specified counter channel to the System Interface.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="hot">It identifies the input channel A of the counter. Only EXTCH1_CNT is available for YAICT.</param>
            <param name="cold">It identifies the input channel B of the counter. Only EXTCH2_CNT is available for YAICT.</param>
            <param name="reference">Refernece connection of the counter.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POL       ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POL      ->      The Cold parameter is not valid.</para>
            <para>ERR_PMU_REF           ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectInterf(Spea.CntInterfCon,Spea.CntInterfCon,Spea.CntRefCon)">
            <summary>
            <para>The CntDisconnectInterf instruction allows the disconnection of the specified counter channel to the System Interface.</para>
            <para>CNT1 is set as unit.</para>
            </summary>
            <param name="hot">It identifies the input channel A of the counter. Only EXTCH1_CNT is available for YAICT.</param>
            <param name="cold">It identifies the input channel B of the counter. Only EXTCH2_CNT is available for YAICT.</param>
            <param name="reference">Refernece connection of the counter.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POL       ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POL      ->      The Cold parameter is not valid.</para>
            <para>ERR_PMU_REF           ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectMbus(Spea.CntInstrId,Spea.MbusLine,Spea.MbusLine,Spea.MbusLine)">
            <summary>
            The CntDisconnectMbus instruction allows the disconnection of the specified counter channel to the MBUS.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB">It identifies the channel B to be disconnected.</param>
            <param name="reference">It identifies the ABUS line disconnected from the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntDisconnectMbus(Spea.MbusLine,Spea.MbusLine,Spea.MbusLine)">
            <summary>
            The CntDisconnectMbus instruction allows the disconnection of the specified counter channel to the MBUS. CNT1 is set as unit.
            </summary>
            <param name="chA">It identifies the channel A to be disconnected.</param>
            <param name="chB">It identifies the channel B to be disconnected.</param>
            <param name="reference">It identifies the ABUS line disconnected from the counter reference.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_CH_A          ->      The ChA parameter is not valid.</para>
            <para>ERR_PMU_CH_B          ->      The ChB parameter is not valid.</para>
            <para>ERR_PMU_NOT_REF       ->      The Ref parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntEnable(Spea.CntInstrId)">
            <summary>
            The CntEnable instruction enables the counter module.
            </summary>
            <param name="unit">Unit identifier.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntEventSet(Spea.CntInstrId,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntEventSet instruction allows to set the counter for event count measurement.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="range">It identifies the range for the signal. HV not possible for YAICT.</param>
            <param name="threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts). When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntEventSet(Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntEventSet instruction allows to set the counter for event count measurement. CNT1 set as default.
            </summary>
            <param name="range">It identifies the range for the signal. HV not possible for YAICT.</param>
            <param name="threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts). When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntFreqSet(Spea.CntInstrId,Spea.CntFreqResol,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntFreqSet instruction allows to set the counter as a frequency meter.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="range">It identifies the range for the signal. HV not possible for YAICT.</param>
            <param name="threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts). When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntFreqSet(Spea.CntFreqResol,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntFreqSet instruction allows to set the counter as a frequency meter. CNT1 is set as default.
            </summary>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="range">It identifies the range for the signal. HV not possible for YAICT.</param>
            <param name="threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts). When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntIntervalSet(Spea.CntInstrId,Spea.CntPeriodResol,Spea.CntVoltRange,System.Double,Spea.CntSlope,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntIntervalSet instruction allows to set the counter as a timer.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="a_range">It identifies the range for the signal for channel A. HV not possible for YAICT.</param>
            <param name="a_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel A. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="a_slope">It identifies the slope of triggering signal for channel A.</param>
            <param name="b_range">It identifies the range for the signal for channel B. HV not possible for YAICT.</param>
            <param name="b_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel B. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="b_slope">It identifies the slope of triggering signal for channel B.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntIntervalSet(Spea.CntPeriodResol,Spea.CntVoltRange,System.Double,Spea.CntSlope,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntIntervalSet instruction allows to set the counter as a timer. CNT1 set es default unit.
            </summary>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="a_range">It identifies the range for the signal for channel A. HV not possible for YAICT.</param>
            <param name="a_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel A. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="a_slope">It identifies the slope of triggering signal for channel A.</param>
            <param name="b_range">It identifies the range for the signal for channel B. HV not possible for YAICT.</param>
            <param name="b_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel B. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="b_slope">It identifies the slope of triggering signal for channel B.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntPeriodSet(Spea.CntInstrId,Spea.CntPeriodResol,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntPeriodSet instruction allows to set the counter as a period meter.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="range">It identifies the range for the signal. HV not possible for YAICT.</param>
            <param name="threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts). When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntPeriodSet(Spea.CntPeriodResol,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntPeriodSet instruction allows to set the counter as a period meter. CNT1 is set as default unit.
            </summary>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="range">It identifies the range for the signal. HV not possible for YAICT.</param>
            <param name="threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts). When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntRatioSet(Spea.CntInstrId,Spea.CntRatioResol,Spea.CntVoltRange,System.Double,Spea.CntSlope,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntRatioSet instruction allows to set the counter as a frequency ratio meter (fchA / fchB).
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="a_range">It identifies the range for the signal for channel A. HV not possible for YAICT.</param>
            <param name="a_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel A. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="a_slope">It identifies the slope of triggering signal for channel A.</param>
            <param name="b_range">It identifies the range for the signal for channel B. HV not possible for YAICT.</param>
            <param name="b_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel B. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="b_slope">It identifies the slope of triggering signal for channel B.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntRatioSet(Spea.CntRatioResol,Spea.CntVoltRange,System.Double,Spea.CntSlope,Spea.CntVoltRange,System.Double,Spea.CntSlope)">
            <summary>
            The CntRatioSet instruction allows to set the counter as a frequency ratio meter (fchA / fchB). CNT1 is set as default unit.
            </summary>
            <param name="resol">It identifies the resolution of the counter.</param>
            <param name="a_range">It identifies the range for the signal for channel A. HV not possible for YAICT.</param>
            <param name="a_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel A. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="a_slope">It identifies the slope of triggering signal for channel A.</param>
            <param name="b_range">It identifies the range for the signal for channel B. HV not possible for YAICT.</param>
            <param name="b_threshold">
            <para>It identifies the voltage of threshold (it is expressed in Volts) for channel B. When the counter is connected to the input stage of the measurement unit(CntConnectDvm) the threshold must be programmed according to the DVM input stage and range:.</para>
            <para>DVM Stage             |       DVM range       |   Vthreshold      .</para>
            <para>################################################################# .</para>
            <para>LV                    |       100mV           |   x100            .</para>
            <para>LV                    |       1V              |   x10             .</para>
            <para>LV                    |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       1V              |   x10             .</para>
            <para>HV LZ or HV HZ        |       10V             |   x1              .</para>
            <para>HV LZ or HV HZ        |       100V            |   /10             .</para>
            </param>
            <param name="b_slope">It identifies the slope of triggering signal for channel B.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_RESOL         ->      The Resol parameter is not valid.</para>
            <para>ERR_PMU_RANGE         ->      The Range parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER      ->      The Threshlod parameter is out of range.</para>
            <para>ERR_PMU_SLOPE         ->      The Slope parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntRead(Spea.CntInstrId,System.Double@,Spea.CntMeasType@)">
            <summary>
            The CntRead instruction returns the measured value present in the acquisition register of the counter module.
            </summary>
            <param name="unit">Unit Identifier.</param>
            <param name="value">It identifies the measured value present in the acquisition register.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>INVALID               ->      The measure done is not a valid measure.</para>
            <para>OVER_RANGE            ->      The value to be measured is over the selected range of the counter.</para>
            <para>NO_STROBE             ->      No input signal has been detected.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntRead(System.Double@,Spea.CntMeasType@)">
            <summary>
            The CntRead instruction returns the measured value present in the acquisition register of the counter module. CNT1 is set as default unit.
            </summary>
            <param name="value">It identifies the measured value present in the acquisition register.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>INVALID               ->      The measure done is not a valid measure.</para>
            <para>OVER_RANGE            ->      The value to be measured is over the selected range of the counter.</para>
            <para>NO_STROBE             ->      No input signal has been detected.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntSyncPolaritySet(Spea.CntInstrId,Spea.CntSyncFlags,Spea.CntPolarity)">
            <summary>
            The CntSyncPolaritySet instruction allows to set the counter synchronism flags polarity.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="flagId">Flag identifier.</param>
            <param name="polarity">Flag polarity selection.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_FLAG_ID       ->      The flagId parameter is not valid.</para>
            <para>ERR_PMU_POLARITY      ->      The polarity parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntSyncPolaritySet(Spea.CntSyncFlags,Spea.CntPolarity)">
            <summary>
            The CntSyncPolaritySet instruction allows to set the counter synchronism flags polarity. CNT1 is set as default unit.
            </summary>
            <param name="flagId">Flag identifier.</param>
            <param name="polarity">Flag polarity selection.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT   ->      The PMU module is not present.</para>
            <para>ERR_PMU_FLAG_ID       ->      The flagId parameter is not valid.</para>
            <para>ERR_PMU_POLARITY      ->      The polarity parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CntSyncSet(Spea.CntInstrId,Spea.CntSyncFlags,Spea.CntSyncLine)">
            <summary>
            The CntSyncSet instruction selects the synchronism signal of the counter module connected to the the Synchro Bus. Not avaliable for YAICT.
            </summary>
            <param name="unit">Unit identifier.</param>
            <param name="flagId">Flag identifier.</param>
            <param name="syncLine">It identifies the line of the Synchro Bus used for the synchronization. </param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.CntSyncSet(Spea.CntSyncFlags,Spea.CntSyncLine)">
            <summary>
            The CntSyncSet instruction selects the synchronism signal of the counter module connected to the the Synchro Bus. Not avaliable for YAICT. CNT1 is set as default unit.
            </summary>
            <param name="flagId">Flag identifier.</param>
            <param name="syncLine">It identifies the line of the Synchro Bus used for the synchronization. </param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.ContrastPlateCodeRead(System.Int32@)">
            <summary>
            The ContrastPlateCodeRead instruction allows reading the contrast plate code.
            </summary>
            <param name="contrastPlatecode">It identifies the contrast plate code.</param>
            <returns>
            <para>0                     ->      The instruction has been successfully executed without errors.</para>
            <para>FAIL                  ->      The contrast plate was not correctly read.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcALoadClear(Spea.DCALoadInstr)">
            <summary>
            The DcALoadClear instruction allows to set the specified DC Active Load module to the default values.
            </summary>
            <param name="instrId">DC Active Load module identifier.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->      The DC Active Load module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcALoadConnect(Spea.DCALoadInstr)">
            <summary>
            The DcALoadConnect instruction connects the DC Active Load output.
            </summary>
            <param name="instrId">DC Active Load module identifier.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->      The DC Active Load module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcALoadDisable(Spea.DCALoadInstr)">
            <summary>
            The DcALoadDisable instruction disables the DC Active Load module.
            </summary>
            <param name="instrId">DC Active Load module identifier.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->      The DC Active Load module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcALoadDisconnect(Spea.DCALoadInstr)">
            <summary>
            The DcALoadDisconnect instruction disconnects the DC Active Load output.
            </summary>
            <param name="instrId">DC Active Load module identifier.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->      The DC Active Load module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcALoadEnable(Spea.DCALoadInstr)">
            <summary>
            The DcALoadEnable instruction enables the DC Active Load module.
            </summary>
            <param name="instrId">DC Active Load module identifier.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->      The DC Active Load module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcALoadRippleSet(Spea.DCALoadInstr,Spea.DCALRippleMeasMode,Spea.DCALVoltageRange)">
            <summary>
            The DcALoadRippleMeasSet instruction programs the type of ripple to measure and of the meter full scale.
            </summary>
            <param name="instrId">It identifies the DC Active Load module to be set.</param>
            <param name="mode">It identifies the type of ripple to measure.</param>
            <param name="range">It identifies the full scale value of the ripple meter.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->      The DC Active Load module is not present.</para>
            <para>ERR_DCALOAD_RIPPLE_MODE   ->      The Mode parameter is not correct.</para>
            <para>ERR_DCALOAD_RIPPLE_RANGE  ->      The Range parameter is not correct.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcALoadSet(Spea.DCALoadInstr,System.Double,System.Double)">
            <summary>
            The DcALoadRippleMeasSet instruction programs the type of ripple to measure and of the meter full scale.
            </summary>
            <param name="instrId">It identifies the DC Active Load module to be set.</param>
            <param name="vValue">It identifies the value of the voltage knee expressed in Volt (0-200).</param>
            <param name="iValue">It identifies the absorbed current value expressed in Ampere (0-25).</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->      The DC Active Load module is not present.</para>
            <para>ERR_DCALOAD_V_VALUE       ->      The VValueparameter is not valid.</para>
            <para>ERR_DCALOAD_I_VALUE       ->      The IValue parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenConnect(Spea.DcGenInstrId)">
            <summary>
            The DcGenConnect instruction connects the DC Generator module to the System Interface.
            </summary>
            <param name="instrId">It identifies the DC Generator module to be connected to the System Interface.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenDisable(Spea.DcGenInstrId)">
            <summary>
            The DcGenDisable instruction disables the DC Generator module.
            </summary>
            <param name="instrId">It identifies the DC Generator module to be disabled.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenDisconnect(Spea.DcGenInstrId)">
            <summary>
            The DcGenDisconnect instruction disconnects the DC Generator module drom the System Interface.
            </summary>
            <param name="instrId">It identifies the DC Generator module to be disconnected from the System Interface.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenEnable(Spea.DcGenInstrId)">
            <summary>
            <para>The DcGenEnable instruction enables the DC Generator module.</para>
            <para>Programming and connection must be executed before the unit enabling. The execution time of this instruction includes the relays switching time.</para>
            <para>In practice the instrument connection and disconnection must occur in two times in order to avoid damages to the connection relays.</para>
            </summary>
            <param name="instrId">It identifies the DC Generator module to be enabled.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenOff(Spea.DcGenInstrId)">
            <summary>
            The DcGenOff instruction allows to switch OFF the DC Generator module.
            </summary>
            <param name="instrId">It identifies the DC Generator module to be switched OFF.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenOn(Spea.DcGenInstrId,System.Double,System.Double)">
            <summary>
            The DcGenOn instruction allows to switch ON the DC Generator module.
            </summary>
            <param name="instrId">It identifies the DC Generator module to be switched ON.</param>
            <param name="vValue">It identifies the output voltage value to generate expressed in Volt. (0-150V DCG100/110) (0-500V DCG200).</param>
            <param name="iValue">It identifies the output voltage value to generate expressed in Volt. (0-44A DCG100) (0-22A DCG110) (0-5.5A DCG200).</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            <para>ERR_DCGEN_V_VALUE         ->      The voltage value paramter is not correct.</para>
            <para>ERR_DCGEN_I_VALUE         ->      The current value parameter is not correct.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenOutConnect(Spea.DcGenInstrId,Spea.DcGenOut)">
            <summary>
            The DcGenOutConnect instruction connects the selected output (A, B) of the DC Generator module to the System Interface.
            </summary>
            <param name="instrId">It identifies the DC Generator module to connected.</param>
            <param name="outp">It identifies the output to be selected .</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenOutDisconnect(Spea.DcGenInstrId,Spea.DcGenOut)">
            <summary>
            The DcGenOutConnect instruction disconnects the selected output (A, B) of the DC Generator module from the System Interface.
            </summary>
            <param name="instrId">It identifies the DC Generator module to be disconnected.</param>
            <param name="outp">It identifies the output to be selected .</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenOutOn(Spea.DcGenInstrId,Spea.DcGenOut,System.Double,System.Double)">
            <summary>
            The DcGenOutOn instruction allows to switch ON the DC Generator module of the selected output (A, B).
            </summary>
            <param name="instrId">It identifies the DC Generator module to be switched ON.</param>
            <param name="outp">It identifies the output to be selected.</param>
            <param name="vValue">It identifies the output voltage value to generate expressed in Volt. (0-150V DCG100/110) (0-500V DCG200).</param>
            <param name="iValue">It identifies the output voltage value to generate expressed in Volt. (0-44A DCG100) (0-22A DCG110) (0-5.5A DCG200).</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            <para>ERR_DCGEN_V_VALUE         ->      The voltage value paramter is not correct.</para>
            <para>ERR_DCGEN_I_VALUE         ->      The current value parameter is not correct.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DcGenSourceSet(Spea.DcGenInstrId,System.Double,System.Double)">
            <summary>
            The DcGenSourceSet instruction allows to program the DC Generator module.
            </summary>
            <param name="instrId">It identifies the DC Generator module to be programmed.</param>
            <param name="vValue">It identifies the output voltage value to generate expressed in Volt. (0-150V DCG100/110) (0-500V DCG200).</param>
            <param name="iValue">It identifies the output voltage value to generate expressed in Volt. (0-44A DCG100) (0-22A DCG110) (0-5.5A DCG200).</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->      The DC Generator module is not present.</para>
            <para>ERR_DCGEN_V_VALUE         ->      The voltage value paramter is not correct.</para>
            <para>ERR_DCGEN_I_VALUE         ->      The current value parameter is not correct.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigPatternLoad(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The DigPatternLoad instruction selects the pattern to use and associates the test point to the pins of the pattern.
            </summary>
            <param name="pattern">It identifies the pattern name to load.</param>
            <param name="testPoints">
            <para>It identifies the list of test points. (The list has to be terminated with 0).</para>
            <para>The position of the test points into the list determines the association with the pins of the pattern.The first test point of the list is associated to the first pin of the pattern.</para>
            </param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_PATTERN_NOT_VALID ->      The Pattern parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS        ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigStrPatternLoad(System.String,System.String)">
            <summary>
            The DigStrPatternLoad instruction selects the pattern to use and associates the test point to the pins of the pattern.
            </summary>
            <param name="pattern">It identifies the pattern name to load.</param>
            <param name="testPoints">
            <para>It identifies the list of test points.</para>
            <para>The position of the test points into the list determines the association with the pins of the pattern.The first test point of the list is associated to the first pin of the pattern.</para>
            </param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_PATTERN_NOT_VALID ->      The Pattern parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS        ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigStrTpDriverSensorOn(System.Double,System.Double,System.Double,System.String)">
            <summary>
            The DigStrTpDriverSensorOn instruction configures the list of test points to the specified voltage levels. After the execution of this instruction the ground of the pin electronics is connected to the system ground.
            </summary>
            <param name="vh">It identifies the voltage value to associated to high logic level expressed in Volt (1.2-5.0).</param>
            <param name="vl">It identifies the voltage value to associated to low logic level expressed in Volt (0).</param>
            <param name="vref">It identifies the reference voltage level (0-5).</param>
            <param name="testPoints">
            <para>It identifies the list of test points.</para>
            </param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_V_HIGH            ->      The vh parameter is not valid.</para>
            <para>ERR_DIG_V_LOW             ->      The vl parameter is not valid.</para>
            <para>ERR_DIG_V_REF             ->      The vref parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS        ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigStrTpOutputImpedanceSet(Spea.ImpedancePattern,System.String)">
            <summary>
            The DigStrTpOutputImpedanceSet instruction changes the output impedance of the pin used for the pattern execution.
            </summary>
            <param name="impedance">It identifies the impedance to be set.</param>
            <param name="testPoints">It identifies the list of Test points.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_IMPEDANCE         ->      The Impedance parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS        ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigStrTpStuckSet(Spea.BscanTestPinLevel,System.String)">
            <summary>
            The DigStrTpStuckSet instruction programs the list of Test points to the selected level.
            </summary>
            <param name="level">It identifies the stuck level to be set.</param>
            <param name="testPoints">It identifies the list of Test points.</param>
            <returns>
            <para>0                         ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_LEVEL             ->      The Level parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS        ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigTimAcquisitionRead(System.Int32,System.Int32,System.Int32,System.Int32@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Double}@)">
            <summary>
            The DigTimAcquisitionRead instruction allows to read the result of the acquisition performed on the selected testpoint.
            </summary>
            <param name="tp">It identifies the testpoint associated to the Main or Auxiliary Channel where it is present the acquiring signal.</param>
            <param name="timeout">It identifies the maximum time (expressed in milliseconds) waited by the instruction until the measure is finished. Values must be lower or euqal to 65 seconds.</param>
            <param name="measArraySize">It identifies the maximum number of edges to be acquired for the selected testpoint. It must be greater or equal to the number of edges to be acquired in order to avoid arrays overflow.</param>
            <param name="measCount">It contains the quantity of the acquired edges.</param>
            <param name="measLevel">It identifies the array containing the sequence of the logic levels of the signal present on the selected testpoint.</param>
            <param name="measTime">It identifies the array containing the time between the starting edge and each transition of the signal present on the selected testpoint.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_TP_NOT_VALID          ->      Testpoint not valid.</para>
            <para>ERR_DIG_TP_NOT_SET_FOR_ACQ    ->      Testpoint not previously set for the acquisition.</para>
            <para>ERR_DIG_ACQ_TIMEOUT           ->      Timeout during acquisition.</para>
            <para>ERR_DIG_ACQ_MEMORY_FULL       ->      Acquisitions number exceeds maximum storable quantity.</para>
            <para>ERR_DIG_START_STROBE_MISSING  ->      Start strobe missing.</para>
            <para>ERR_DIG_ACQ_OVERFLOW          ->      Maximum measurable time expired (related to the selected resolution).</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigTimAcquisitionSet(System.Int32,Spea.CntSlope,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            The DigTimAcquisitionSet instruction allows to prepare the time interval meter to the acquisition on the selected testpoints.
            </summary>
            <param name="mainTp">It identifies the testpoint associated to the Main Channe.</param>
            <param name="startSlope">It identifies the slope of the signal present on the Main Channel where the acquisition starts.</param>
            <param name="auxTp">It identifies the testpoint associated to the Auxiliary Channel. Possible values are 'NONE' and greater or equal to 1.</param>
            <param name="enableLevel">It identifies the active level for the acquisition start enable signal.</param>
            <param name="enableTP">It identifies the testpoint associated to the Enable Channel in case of EnableLevel is different from NONE. Possible values are 'NONE' and greater or equal to 1.</param>
            <param name="measNumber">It identifies the number of edges to be acquired, contained in the signal present on Main Channel. This value must be included between 1 and 128.</param>
            <param name="resolution">Resolution.</param>
            <returns>
            <para>Resolution: <see cref="F:Spea.AcquisitionResolution.RSL_50ns"/>, <see cref="F:Spea.AcquisitionResolution.RSL_100ns"/> or <see cref="F:Spea.AcquisitionResolution.RSL_200ns"/>.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigTpDriverSensorOff">
            <summary>
            The DigTpDriverSensorOff instruction disables all the digital driver-sensor and disconnects the ground of the pin electronics from the system ground.
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigTpDriverSensorOn(System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The DigTpDriverSensorOn instruction configures the list of test points to the specified voltage levels. After the execution of this instruction the ground of the pin electronics is connected to the system ground.
            </summary>
            <param name="vh">It identifies the voltage value to associated to high logic level expressed in Volt (1.2 - 5).</param>
            <param name="vl">It identifies the voltage value to associated to low logic level expressed in Volt (0).</param>
            <param name="vref">It identifies the reference voltage level (0 - 5).</param>
            <param name="testPoints">It identifies the list of Test points (the last number of the list has to be "0").</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_V_HIGH                ->      The Vh parameter is not valid.</para>
            <para>ERR_DIG_V_LOW                 ->      The VI parameter is not valid.</para>
            <para>ERR_DIG_V_REF                 ->      The Vref parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS            ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigTpOutputImpedanceSet(Spea.ImpedancePattern,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The DigTpOutputImpedanceSet instruction changes the output impedance of the pin used for the pattern execution.
            </summary>
            <param name="impedance">It identifies the impedance to be set.</param>
            <param name="testPoints">It identifies the list of Test points (the last number of the list has to be "0").</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_IMPEDANCE             ->      The Impedance parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS            ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DigTpStuckSet(Spea.BscanTestPinLevel,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The DigTpStuckSet instruction programs the list of Test points to the selected level.
            </summary>
            <param name="level">It identifies the stuck level to be set.</param>
            <param name="testPoints">It identifies the list of Test points (the last number of the list has to be "0").</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_LEVEL                 ->      The Level parameter is not valid.</para>
            <para>ERR_DIG_TESTPOINTS            ->      The TestPoints parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriClear(Spea.DriverId)">
            <summary>
            The DriClear instruction allows to set the specified driver module to the default values. The instruction executes automatically all the sequences required to disconnect the driver module.
            <para>Enable - OFF.</para>
            <para>Voltage - 0V.</para>
            <para>Current - 10mA.</para>
            <para>OutMode - DIRECT.</para>
            <para>OutTiming - CONT_ON.</para>
            <para>SlewRate - NORMAL.</para>
            <para>ByPass - BY_PASS_OFF.</para>
            <para>CONNECTION: HOT - NOT_CONN / COLD - NOT_CONN.</para>
            </summary>
            <param name="instrId">Driver identifier.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriConnectAbus(Spea.DriverId,Spea.Abus,Spea.Abus)">
            <summary>
            The DriConnectAbus instruction allows the connection of the driver module with the specified line of the ABUS. The connection to the indicated lines is executed in addition to those already performed, if any.
            </summary>
            <param name="instrId">It identifies the driver module to be connected on ABUS.</param>
            <param name="hotRow">It identifies the positive pole of the driver module.</param>
            <param name="coldRow">It identifies the negative pole of the driver module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriConnectInterf(Spea.DriverId,Spea.InstrInterfCon)">
            <summary>
            The DriConnectInterf instruction allows the connection of the driver module with the System Interface. The connection of the points is added to those already connected, if any.
            </summary>
            <param name="instrId">It identifies the driver module to be connected on ABUS.</param>
            <param name="point">It identifies the points to be connected to the System Interface.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_POINT                  ->      The Point parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriConnectUabusBmu(Spea.DriverId,Spea.Uabus5To8,Spea.Uabus1To4,Spea.Uabus1To4,Spea.Uabus5To8)">
            <summary>
            The DriConnectUabusBmu instruction connects the interface pins of the driver module to the UABUS rows of the YABMU board.
            </summary>
            <param name="instrId">It identifies the driver module to be connected on ABUS.</param>
            <param name="rowHotP">It identifies the UABUS row to connect with the positive pole of the driver module.</param>
            <param name="rowColdP">It identifies the UABUS row to connect with the negative pole of the driver module.</param>
            <param name="rowHotS">It identifies the UABUS row to connect with the sense positive pole of the driver module.</param>
            <param name="rowColdS">It identifies the UABUS row to connect with the sense negative pole of the driver module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriDisable(Spea.DriverId)">
            <summary>
            The DriDisable instruction allows to switch OFF the specified driver module.
            </summary>
            <param name="instrId">It identifies the driver module to be connected on ABUS.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriDisconnectAbus(Spea.DriverId,Spea.Abus,Spea.Abus)">
            <summary>
            The DriDisconnectAbus instruction allows the disconnection of the specified line from the ABUS.
            </summary>
            <param name="instrId">It identifies the driver module to be disconnected from the ABUS.</param>
            <param name="hotRow">It identifies the positive pole of the measurement module.</param>
            <param name="coldRow">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriDisconnectAll(Spea.DriverId)">
            <summary>
            The DriDisconnectAll instruction allows the disconnection of the driver module from the ABUS, MBUS, and the System Interface.
            </summary>
            <param name="instrId">It identifies the driver module to be disconnected.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriDisconnectInterf(Spea.DriverId,Spea.InstrInterfCon)">
            <summary>
            The DriDisconnectInterf instruction allows the disconnection of the measurement module from the System Interface.
            </summary>
            <param name="instrId">It identifies the driver module to be disconnected from the System Interface.</param>
            <param name="point">It identifies the points to be disconnected from the System Interface.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_POINT                  ->      The Point parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriDisconnectUabusBmu(Spea.DriverId,Spea.InstrBMUUabusCon)">
            <summary>
            The DriDisconnectUabusBmu instruction disconnects the driver module from the system interface and from the UABUS rows of the YABMU board.
            </summary>
            <param name="instrId">It identifies the driver module to be disconnected.</param>
            <param name="point">It identifies the points to be disconnected from the UABUS rows.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_POINT                  ->      The Point parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriEnable(Spea.DriverId)">
            <summary>
            The DriEnable instruction allows to switch ON the specified driver module.
            </summary>
            <param name="instrId">It identifies the driver module to be enabled.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriExtInputConnect(Spea.DriverId,Spea.InstrExtInput)">
            <summary>
            The DriExtInputConnect instruction allows the connection of the voltage external reference input (NOT AVAILABLE FOR YAICT).
            </summary>
            <param name="instrId">It identifies the driver module to be used.</param>
            <param name="source">Connection of the voltage external reference input.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_SOURCE                 ->      The Source parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriExtInputDisconnect(Spea.DriverId)">
            <summary>
            The DriExtInputDisconnect instruction allows the disconnection of the voltage external reference input (NOT AVAILABLE FOR YAICT).
            </summary>
            <param name="instrId">It identifies the driver module to be used.</param>/// <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriReadbackIConnectMbus(Spea.DriverId,Spea.MbusLineDri,Spea.Gain)">
            <summary>
            The DriReadbackIConnectMbus instruction allows the connection of the current readback output of the driver module with the MBUS. The readback connection to an MBUS line, disconnects it automatically from the other lines.
            </summary>
            <param name="instrId">It identifies the driver module to be connected on the MBUS.</param>
            <param name="mbusLine">It identifies the MBUS line to which connect the current readback of the driver module.</param>
            <param name="gain">It identifies the gain.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_MBUS                   ->      The MbusLine parameter is not valid.</para>
            <para>ERR_SU_GAIN                   ->      The Gain parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriReadbackIDisconnectMbus(Spea.DriverId)">
            <summary>
            The DriReadbackIDisconnectMbus instruction allows the disconnection of the current readback output of the driver module from the MBUS.
            </summary>
            <param name="instrId">It identifies the driver module to be disconnected from the MBUS.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriReadbackVConnectMbus(Spea.DriverId,Spea.MbusLineDri,Spea.Gain)">
            <summary>
            The DriReadbackVConnectMbus instruction allows the connection of the voltage readback output of the driver module with the MBUS. The readback connection to a MBUS line, disconnects it automatically from other lines.
            </summary>
            <param name="instrId">It identifies the driver module to be connected on the MBUS.</param>
            <param name="mbusLine">It identifies the MBUS line to which connect the voltage readback of the driver module.</param>
            <param name="gain">It identifies the gain.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_MBUS                   ->      The MbusLine parameter is not valid.</para>
            <para>ERR_SU_GAIN                   ->      The Gain parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriReadbackVDisconnectMbus(Spea.DriverId)">
            <summary>
            The DriReadbackVDisconnectMbus instruction allows the disconnection of the voltage readback output of the driver module from the MBUS.
            </summary>
            <param name="instrId">It identifies the driver module to be disconnected from the MBUS.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriSignalGeneratorSet(Spea.DriverId,Spea.AmplitudeRange,System.Double,Spea.AmplitudeRange,System.Double,Spea.DriGeneratorIrange,Spea.WaveFormType,System.Double,Spea.OutputFormat)">
            <summary>
            The DriSignalGeneratorSet instruction allows to set the specified driver module to the specified values (only for YAICT).
            </summary>
            <param name="instrId">It identifies the instrument generating the waveform.</param>
            <param name="ampRange">It identifies the range of the Amplitude value.</param>
            <param name="amplitude">It identifies the waveform peak amplitude (expressed in Volts).</param>
            <param name="offRange">It identifies the range of the DCOffset value.</param>
            <param name="dcOffset">It identifies a DC offset that can be added to the generated waveform.</param>
            <param name="iRange">It defines the current full scale to set.</param>
            <param name="wFormType">It identifies the type of the waveform to be generated.</param>
            <param name="frequency">It identifies the frequency of the generated waveform.</param>
            <param name="outFormat">It identifies the output voltage source origin.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_AMPLITUDE_RANGE        ->      The Amplitude range is not valid.</para>
            <para>ERR_SU_AMPLITUDE              ->      The Amplitude parameter is out of range.</para>
            <para>ERR_SU_OFFSET_RANGE           ->      The Offset range is not valid.</para>
            <para>ERR_SU_RANGE                  ->      The Amplitude range and Offset range are not coherent.</para>
            <para>ERR_SU_DC_OFFSET              ->      The DC Offset parameter is out of range.</para>
            <para>ERR_SU_CURRENT_RANGE          ->      The Ivalue parameter is out of the selected Irange parameter.</para>
            <para>ERR_SU_WAVEFORM_TYPE          ->      The Waveform type parameter is not valid.</para>
            <para>ERR_SU_FREQUENCY              ->      The Frequency parameter is out of range.</para>
            <para>ERR_SU_OUT_FORMAT             ->      The OutFormat parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriSourceSet(Spea.DriverId,System.Double,System.Double,Spea.DriRangeI,Spea.DriOutMode,Spea.OutputFormat,Spea.SlewRate,Spea.ByPass)">
            <summary>
            The DriSourceSet instruction allows to set the specified driver module to the specified values.
            </summary>
            <param name="instrId">It identifies the instrument.</param>
            <param name="vValue">It identifies the output voltage.</param>
            <param name="iValue">It identifies the output current expressed in Ampere.
            <para>Old Range: 10uA - 100mA => New Range: 10uA - 100mA | Check: NONE.</para>
            <para>Old Range: 10uA - 100mA => New Range: 1A | Check: Inew lower or equal to 300mA.</para>
            <para>Old Range: 1A => New Range: 10uA - 100mA | Check: Iold lower or equal to 300mA.</para>
            </param>
            <param name="iRange">It defines the current range to set.</param>
            <param name="outMode">It defines the output mode.</param>
            <param name="outFormat">It identifies the output voltage source origin.</param>
            <param name="slewRate">It identifies the output stagefront rate.</param>
            <param name="byPass">It enables/disables the current limit by pass.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_VOLTAGE                ->      The Vvalue parameter is out of range.</para>
            <para>ERR_SU_CURRENT                ->      The Ivalue parameter is out of possible programming range.</para>
            <para>ERR_SU_CURRENT_RANGE          ->      The Ivalue parameter is out of the selected Irange parameter.</para>
            <para>ERR_SU_OUT_MODE               ->      The OutMode parameter is not valid.</para>
            <para>ERR_SU_OUT_FORMAT             ->      The OutFormat parameter is not valid.</para>
            <para>ERR_SU_SLEW_RATE              ->      The SlewRate parameter is not valid.</para>
            <para>ERR_SU_BY_PASS                ->      The ByPass parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriSourceSetV2(Spea.DriverId,System.Double,System.Double,Spea.DriVrange,Spea.DriRangeI,Spea.DriOutMode,Spea.OutputFormat,Spea.SlewRate,Spea.ByPass)">
            <summary>
            The DriSourceSetV2 instruction allows to set the specified driver module to the specified values.
            </summary>
            <param name="instrId">It identifies the instrument.</param>
            <param name="vValue">It identifies the output voltage.</param>
            <param name="iValue">It identifies the output current expressed in Ampere.
            <para>Old Range: 10uA - 100mA => New Range: 10uA - 100mA | Check: NONE.</para>
            <para>Old Range: 10uA - 100mA => New Range: 1A | Check: Inew lower or equal to 300mA.</para>
            <para>Old Range: 1A => New Range: 10uA - 100mA | Check: Iold lower or equal to 300mA.</para>
            </param>
            <param name="vRange">It defines the voltage range to set.</param>
            <param name="iRange">It defines the current range to set.</param>
            <param name="outMode">It defines the output mode.</param>
            <param name="outFormat">It identifies the output voltage source origin.</param>
            <param name="slewRate">It identifies the output stagefront rate.</param>
            <param name="byPass">It enables/disables the current limit by pass.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_VOLTAGE                ->      The Vvalue parameter is out of range.</para>
            <para>ERR_SU_CURRENT                ->      The Ivalue parameter is out of possible programming range.</para>
            <para>ERR_SU_VOLTAGE_RANGE          ->      The Vvalue parameter is out of the selected Vrange parameter.</para>
            <para>ERR_SU_CURRENT_RANGE          ->      The Ivalue parameter is out of the selected Irange parameter.</para>
            <para>ERR_SU_OUT_MODE               ->      The OutMode parameter is not valid.</para>
            <para>ERR_SU_OUT_FORMAT             ->      The OutFormat parameter is not valid.</para>
            <para>ERR_SU_SLEW_RATE              ->      The SlewRate parameter is not valid.</para>
            <para>ERR_SU_BY_PASS                ->      The ByPass parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DriSyncSet(Spea.DriverId,Spea.DriTimingFlags,Spea.DriSbusLine)">
            <summary>
            The DriSyncSet instruction allows to connect or disconnect the driver module flag to/from the Synchro Bus.
            </summary>
            <param name="instrId">Driver module identifier.</param>
            <param name="flag">Flag to connect.</param>
            <param name="sbusLine">SBUS line to connect.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.DriTimingSet(Spea.DriverId,Spea.DriTimingFlags)">
            <summary>
            The DriTimingSet instruction allows to select the timing to use when the driver module is programmed in PULSE (refer to the DriSourceSet instruction).
            </summary>
            <param name="instrId">Driver module identifier.</param>
            <param name="flag">Timing to be used selection.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_SU_NOT_PRESENT            ->      The SU module is not present.</para>
            <para>ERR_SU_FLAG                   ->      The Flag parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmClear(Spea.DvmId)">
            <summary>
            The DvmClear instruction sets the measurement module to the default values.
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmCompSet(Spea.DvmId,System.Double,System.Double)">
            <summary>
            The DvmCompSet instruction enables to program the comparison voltages for measurement module (DVM).(Not available for YAICT).
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <param name="vthLow">It identifies the trigger voltage of the Low comparator.</param>
            <param name="vthHigh">It identifies the trigger voltage of the High comparator.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_VTRIGGER              ->      The VthLow or VthHigh parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmCompSet(System.Double,System.Double)">
            <summary>
            The DvmCompSet instruction enables to program the comparison voltages for measurement module (DVM).(Not available for YAICT).
            </summary>
            <param name="vthLow">It identifies the trigger voltage of the Low comparator.</param>
            <param name="vthHigh">It identifies the trigger voltage of the High comparator.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_VTRIGGER              ->      The VthLow or VthHigh parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectAbus(Spea.DvmId,Spea.DvmAbus,Spea.DvmAbus)">
            <summary>
            The DvmConnectAbus instruction allows the connection of the measurement module with the specified line of the ABUS.
            </summary>
            <param name="unit">It identifies the measurement module to be connected on ABUS.</param>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectAbus(Spea.DvmAbus,Spea.DvmAbus)">
            <summary>
            The DvmConnectAbus instruction allows the connection of the measurement module with the specified line of the ABUS.
            </summary>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectInterf(Spea.DvmId,Spea.DvmInterfaceHot,Spea.DvmInterfaceCold)">
            <summary>
            The DvmConnectInterf instruction allows the connection of the measurement module with the System Interface.
            </summary>
            <param name="unit">It identifies the measurement module to be connected on the System Interface.</param>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectInterf(Spea.DvmInterfaceHot,Spea.DvmInterfaceCold)">
            <summary>
            The DvmConnectInterf instruction allows the connection of the measurement module with the System Interface.
            </summary>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectMbus(Spea.DvmId,Spea.DvmMbus,Spea.DvmMbus)">
            <summary>
            The DvmConnectMbus instruction allows the connection of the measurement module with the MBUS.
            </summary>
            <param name="unit">It identifies the measurement module to be connected on MBUS.</param>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectMbus(Spea.DvmMbus,Spea.DvmMbus)">
            <summary>
            The DvmConnectMbus instruction allows the connection of the measurement module with the MBUS.
            </summary>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectUabusBmu(Spea.DvmId,Spea.Uabus1To4,Spea.Uabus5To8)">
            <summary>
            The DvmConnectUabusBmu instruction connects the interface pins of the measurement module to the UABUS rows of the YABMU board.
            </summary>
            <param name="unit">It identifies the measurement module to be connected.</param>
            <param name="hot">It identifies the UABUS row to connect with the positive pole of the measurement module.</param>
            <param name="cold">It identifies the UABUS row to connect with the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmConnectUabusBmu(Spea.Uabus1To4,Spea.Uabus5To8)">
            <summary>
            The DvmConnectUabusBmu instruction connects the interface pins of the measurement module to the UABUS rows of the YABMU board.
            </summary>
            <param name="hot">It identifies the UABUS row to connect with the positive pole of the measurement module.</param>
            <param name="cold">It identifies the UABUS row to connect with the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisable(Spea.DvmId)">
            <summary>
            The DvmDisable instruction disables the measurement module.
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectAbus(Spea.DvmAbus,Spea.DvmAbus)">
            <summary>
            The DvmDisconnectAbus instruction allows the disconnection of the measurement module from the specified line of the ABUS.
            </summary>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectAll(Spea.DvmId)">
            <summary>
            The DvmDisconnectAll instruction allows disconnection of the measurement module from the ABUS, MBUS, and the System Interface.
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectInterf(Spea.DvmId,Spea.DvmInterfaceHot,Spea.DvmInterfaceCold)">
            <summary>
            The DvmDisconnectInterf instruction allows the disconnection of the measurement module from the System Interface.
            </summary>
            <param name="unit">It identifies the measurement module to be connected on the System Interface.</param>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectInterf(Spea.DvmInterfaceHot,Spea.DvmInterfaceCold)">
            <summary>
            The DvmDisconnectInterf instruction allows the disconnection of the measurement module from the System Interface. (DVM1=default).
            </summary>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectMbus(Spea.DvmId,Spea.DvmMbus,Spea.DvmMbus)">
            <summary>
            The DvmDisconnectMbus instruction allows the disconnection of the measurement module from the MBUS.
            </summary>
            <param name="unit">It identifies the measurement module to be connected on MBUS.</param>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectMbus(Spea.DvmMbus,Spea.DvmMbus)">
            <summary>
            The DvmDisconnectMbus instruction allows the disconnection of the measurement module from the MBUS.(DVM1 = default.)
            </summary>
            <param name="hot">It identifies the positive pole of the measurement module.</param>
            <param name="cold">It identifies the negative pole of the measurement module.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_HOT_POLE              ->      The Hot parameter is not valid.</para>
            <para>ERR_PMU_COLD_POLE             ->      The Cold parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectUabusBmu(Spea.DvmId,Spea.InstrBMUUabusCon)">
            <summary>
            The DvmDisconnectUabusBmu instruction disconnects the interface pins of the measurement module from the UABUS rows of the YABMU board.
            </summary>
            <param name="unit">It identifies the measurement module to be connected.</param>
            <param name="point">It identifies the UABUS connection point to be disconnected.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmDisconnectUabusBmu(Spea.InstrBMUUabusCon)">
            <summary>
            The DvmDisconnectUabusBmu instruction disconnects the interface pins of the DVM1 from the UABUS rows of the YABMU board.
            </summary>
            <param name="point">It identifies the UABUS connection point to be disconnected.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmEnable(Spea.DvmId)">
            <summary>
            The DvmEnable instruction enables the measurement module.
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmMbusReadConversionDisable(Spea.DvmId)">
            <summary>
            The DvmMbusReadConversionDisable instruction disables the automatic conversion of the readback measurements executed on inside instruments of the indicated meter (default condition).
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmMbusReadConversionEnable(Spea.DvmId)">
            <summary>
            The DvmMbusReadConversionEnable instruction enables the automatic conversion of the readback measurements executed on inside instruments of the identified measurement module.
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmRead(Spea.DvmId,System.Double@,Spea.DvmMeasTypeReturn@)">
            <summary>
            The DvmRead instruction returns the measured value present in the acquisition register of the measurement module.
            </summary>
            <param name="unit">Measurement module number.</param>
            <param name="value">It identifies the measured value present in the acquisition register.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>INVALID                       ->      The measure done is not valid.</para>
            <para>OVER_RANGE                    ->      The value to be measured is over the selected range of the DVM.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmRead(System.Double@,Spea.DvmMeasTypeReturn@)">
            <summary>
            The DvmRead instruction returns the measured value present in the acquisition register of the measurement module.
            </summary>
            <param name="value">It identifies the measured value present in the acquisition register.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>INVALID                       ->      The measure done is not valid.</para>
            <para>OVER_RANGE                    ->      The value to be measured is over the selected range of the DVM.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmReadAll(Spea.DvmId,System.Collections.Generic.List{System.Double}@,System.Int32,Spea.DvmMeasTypeReturn@,System.Int32@)">
            <summary>
            The DvmReadAll instruction returns all the measured values present in the acquisition memory of the Dvm module.
            </summary>
            <param name="unit">Measurement module number.</param>
            <param name="valueArray">It identifies the array of measured value present in the acquisition register.</param>
            <param name="valueArraySize">It identifies the maximum dimension of the measured value array present in the acquisition register.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <param name="measNum">Number of acquired values.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>OUT_OF_MEMORY                 ->      The number of acquisitions exceeds the dimensions of the acquisition RAM.</para>
            <para>INVALID                       ->      The measure done is not valid.</para>
            <para>OVER_RANGE                    ->      The value to be measured is over the selected range of the DVM.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmReadAll(System.Collections.Generic.List{System.Double}@,System.Int32,Spea.DvmMeasTypeReturn@,System.Int32@)">
            <summary>
            The DvmReadAll instruction returns all the measured values present in the acquisition memory of the Dvm module.
            </summary>
            <param name="valueArray">It identifies the array of measured value present in the acquisition register.</param>
            <param name="valueArraySize">It identifies the maximum dimension of the measured value array present in the acquisition register.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <param name="measNum">Number of acquired values.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>OUT_OF_MEMORY                 ->      The number of acquisitions exceeds the dimensions of the acquisition RAM.</para>
            <para>INVALID                       ->      The measure done is not valid.</para>
            <para>OVER_RANGE                    ->      The value to be measured is over the selected range of the DVM.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmReadSignalChar(Spea.DvmId,System.Double@,System.Double@,System.Double@,Spea.DvmMeasTypeReturn@,System.Int32,System.Int32@)">
            <summary>
            The DvmReadSignalChar instruction reads the signal characteristics (average, minimum and maximum values).
            </summary>
            <param name="unit">Measurement module number.</param>
            <param name="valueMin">Minimum read values.</param>
            <param name="valueMax">Maximum read values.</param>
            <param name="valueAvg">Average read values.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <param name="measNum">Number of values to acquire.</param>
            <param name="measNumAcquired">Number of acquired values.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>OUT_OF_MEMORY                 ->      The number of acquisitions exceeds the dimensions of the acquisition RAM.</para>
            <para>INVALID                       ->      The measure done is not valid.</para>
            <para>OVER_RANGE                    ->      The value to be measured is over the selected range of the DVM.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmReadSignalChar(System.Double@,System.Double@,System.Double@,Spea.DvmMeasTypeReturn@,System.Int32,System.Int32@)">
            <summary>
            The DvmReadSignalChar instruction reads the signal characteristics (average, minimum and maximum values).
            </summary>
            <param name="valueMin">Minimum read values.</param>
            <param name="valueMax">Maximum read values.</param>
            <param name="valueAvg">Average read values.</param>
            <param name="measType">It identifies the measurement type. This value is returned by the function.</param>
            <param name="measNum">Number of values to acquire.</param>
            <param name="measNumAcquired">Number of acquired values.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>OUT_OF_MEMORY                 ->      The number of acquisitions exceeds the dimensions of the acquisition RAM.</para>
            <para>INVALID                       ->      The measure done is not valid.</para>
            <para>OVER_RANGE                    ->      The value to be measured is over the selected range of the DVM.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmReadWindows(Spea.DvmId,Spea.DvmResult@)">
            <summary>
            The DvmReadWindows instruction enables to read a single comparison for Windows measurement mode.
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <param name="result">Result of the measurement.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmReadWindows(Spea.DvmResult@)">
            <summary>
            The DvmReadWindows instruction enables to read a single comparison for Windows measurement mode.
            </summary>
            <param name="result">Result of the measurement.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>NO_STROBE                     ->      No acquisition performed, missing synchronization.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmSet(Spea.DvmId,Spea.DvmInputStage,Spea.DvmCoupling,Spea.DvmFilter,Spea.DvmVRange,Spea.DvmMeasMode,Spea.DvmMeasType,Spea.DvmAcqRam)">
            <summary>
            The DvmSet instruction programs the specified unit identifier to perform the analogue voltage measurement.
            </summary>
            <param name="unit">It identifies the measurement module to be set.</param>
            <param name="inputStage">It identifies the input stage.</param>
            <param name="coupling">It identifies the measurement coupling.</param>
            <param name="filter">Filter setting applied to the measurement.</param>
            <param name="vRange">Voltage Range.</param>
            <param name="measMode">Measurement Mode.</param>
            <param name="measType">Measurement Type.</param>
            <param name="enableAcqRam">Use aquisition RAM.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_INP_STAGE             ->      The InputStage parameter is not valid.</para>
            <para>ERR_PMU_COUPLING              ->      The Coupling parameter is not valid.</para>
            <para>ERR_PMU_FILTER                ->      The Filter parameter is not valid.</para>
            <para>ERR_PMU_V_RANGE               ->      The VRange parameter is not valid.</para>
            <para>ERR_PMU_MEAS_MODE             ->      The MeasMode parameter is not valid.</para>
            <para>ERR_PMU_MEAS_TYPE             ->      The MeasType parameter is not valid.</para>
            <para>ERR_PMU_ENBL_ACQ_RAM          ->      The EnableAcqRam parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmSet(Spea.DvmInputStage,Spea.DvmCoupling,Spea.DvmFilter,Spea.DvmVRange,Spea.DvmMeasMode,Spea.DvmMeasType,Spea.DvmAcqRam)">
            <summary>
            The DvmSet instruction programs the specified unit identifier to perform the analogue voltage measurement. DVMId=1.
            </summary>
            <param name="inputStage">It identifies the input stage.</param>
            <param name="coupling">It identifies the measurement coupling.</param>
            <param name="filter">Filter setting applied to the measurement.</param>
            <param name="vRange">Voltage Range.</param>
            <param name="measMode">Measurement Mode.</param>
            <param name="measType">Measurement Type.</param>
            <param name="enableAcqRam">Use aquisition RAM.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_INP_STAGE             ->      The InputStage parameter is not valid.</para>
            <para>ERR_PMU_COUPLING              ->      The Coupling parameter is not valid.</para>
            <para>ERR_PMU_FILTER                ->      The Filter parameter is not valid.</para>
            <para>ERR_PMU_V_RANGE               ->      The VRange parameter is not valid.</para>
            <para>ERR_PMU_MEAS_MODE             ->      The MeasMode parameter is not valid.</para>
            <para>ERR_PMU_MEAS_TYPE             ->      The MeasType parameter is not valid.</para>
            <para>ERR_PMU_ENBL_ACQ_RAM          ->      The EnableAcqRam parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmSyncSet(Spea.DvmId,Spea.DvmFlagId,Spea.DvmSbusLine)">
            <summary>
            The DvmSyncSet instruction selects the synchronism signals of the centralized measurement module to be connected to the Synchro Bus [NOT AVAILABLE FOR YAICT].
            </summary>
            <param name="unit">Measurement module identifier.</param>
            <param name="flagId">Measurement Flag Id.</param>
            <param name="sbusLine">It identifies the line of the Synchro Bus used for the synchronization.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.DvmSyncSet(Spea.DvmFlagId,Spea.DvmSbusLine)">
            <summary>
            The DvmSyncSet instruction selects the synchronism signals of the centralized measurement module to be connected to the Synchro Bus [NOT AVAILABLE FOR YAICT].
            </summary>
            <param name="flagId">Measurement Flag Id.</param>
            <param name="sbusLine">It identifies the line of the Synchro Bus used for the synchronization.</param>
            <returns>??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.DvmTrigSet(Spea.DvmId,Spea.CntVoltRange,Spea.DvmSlope,System.Double)">
            <summary>
            <para>The DvmTrigSet instruction enables to program the source and the reference voltage for measurement trigger [NOT AVAILABLE FOR YAICT].</para>
            <para>Note: For the measurement in TRIGGER mode, the measurement trigger is obtained by using the counter comparator (Ch 1 > Ch A). For the input connection of the trigger comparator, the specific connection functions of the CNT1 section must be used.</para>
            </summary>
            <param name="unit">It identifies the measurement module to be set.</param>
            <param name="input">It identifies the input voltage of the Counter channel 1.</param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <param name="vtrigger">It identifies the trigger voltage. It is expressed in Volts.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_INP_STAGE             ->      The InputStage parameter is not valid.</para>
            <para>ERR_PMU_SLOPE                 ->      The Slope parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER              ->      The Vtrigger parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.DvmTrigSet(Spea.CntVoltRange,Spea.DvmSlope,System.Double)">
            <summary>
            <para>The DvmTrigSet instruction enables to program the source and the reference voltage for measurement trigger [NOT AVAILABLE FOR YAICT].</para>
            <para>Note: For the measurement in TRIGGER mode, the measurement trigger is obtained by using the counter comparator (Ch 1 > Ch A). For the input connection of the trigger comparator, the specific connection functions of the CNT1 section must be used.</para>
            </summary>
            <param name="input">It identifies the input voltage of the Counter channel 1.</param>
            <param name="slope">It identifies the slope of triggering signal.</param>
            <param name="vtrigger">It identifies the trigger voltage. It is expressed in Volts.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_PMU_NOT_PRESENT           ->      The PMU module is not present.</para>
            <para>ERR_PMU_INP_STAGE             ->      The InputStage parameter is not valid.</para>
            <para>ERR_PMU_SLOPE                 ->      The Slope parameter is not valid.</para>
            <para>ERR_PMU_VTRIGGER              ->      The Vtrigger parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.EsbusLinkSbus(Spea.EsbusLinkMode,Spea.EsbusLine,Spea.SynchroBusLine)">
            <summary>
            The EsbusLinkSbus instruction allows the connection/disconnection of the the specified line of the extended Synchro Bus (Esbus) with the specified line of the Synchro Bus.
            </summary>
            <param name="mode">It identifies the synchronization mode.</param>
            <param name="esbusLine">It identifies the line of the extended synchrobus to be connected.</param>
            <param name="sbusline">It identifies the line of the synchrobus to be connected. It is also used to indicate a disconnection.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT           ->      The AUX module is not present.</para>
            <para>ERR_INV_MODE                  ->      The Mode parameter is not valid.</para>
            <para>ERR_INV_ESBUS_LINE            ->      The EsbusLine parameter is not valid.</para>
            <para>ERR_INV_SBUS_LINE             ->      The SbusLine parameter is not valid.</para>
            <para>ERR_SYNC_CONFLICT             ->      There is a conflict in the Synchro Bus.</para>
            <para>WRN_FLAG_ALREADY_CONN         ->      The selected flag is already connect.</para>
            <para>WRN_FLAG_WAS_CONN_ON_LINE     ->      The selected flag is already connect in a other line.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ExtInstrConnectUabusBmu(Spea.BmuExtInstrId,Spea.Uabus1To4,Spea.Uabus5To8,Spea.Uabus1To4,Spea.Uabus5To8)">
            <summary>
            The ExtInstrConnectUabusBmu instruction connects the pin of the external instrument to the UABUS rows of the YABMU board.
            </summary>
            <param name="instrId">It identifies the external instrument to be connected.</param>
            <param name="rowPoint1">It identifies the UABUS row to connect with the pin#1 of the external instrument.</param>
            <param name="rowPoint2">It identifies the UABUS row to connect with the pin#2 of the external instrument.</param>
            <param name="rowPoint3">It identifies the UABUS row to connect with the pin#3 of the external instrument.</param>
            <param name="rowPoint4">It identifies the UABUS row to connect with the pin#4 of the external instrument.</param>
            <returns>
            <para> ??? Not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ExtInstrDisconnectUabusBmu(Spea.BmuExtInstrId,Spea.BmuExtInstrPin)">
            <summary>
            The ExtInstrDisconnectUabusBmu instruction disconnects the external instrument from the UABUS rows of the YABMU board.
            </summary>
            <param name="instrId">It identifies the external instrument to be connected.</param>
            <param name="point">It identifies the points to be disconnected from the UABUS rows.</param>
            <returns>
            <para> ??? Not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ExtReceiverIdle">
            <summary>
            The ExtReceiverIdle instruction sets the User Inputs/Outputs of the External Receiver in the idle status (resets all User Inputs/Outputs).
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ExtReceiverInputRead(System.Int32,System.Int32@)">
            <summary>
            The ExtReceiverInputRead instruction reads the User Input value of the External Receiver.
            </summary>
            <param name="iInputId">It identifies the User Input of the External Receiver. For further information refer to 3030 System Interface - Din Type Description document, chapter External Receiver Controller installation.</param>
            <param name="iValue">It identifies the read User Input value.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FixtureCodeRead(System.Int32@)">
            <summary>
            The FixtureCodeRead instruction allows reading the fixture code.
            </summary>
            <param name="fixtureCode">It identifies the fixture code.</param>
            <returns>
            <para>0                             ->      The fixture code was correctly read.</para>
            <para>1                             ->      The fixture code was not correctly read.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsConnectInterf(Spea.FpsId)">
            <summary>
            The FpsConnectInterf instruction allows the connection of the fixed power supplies with the System Interface.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be connected on the System Interface.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsConnectUabusBmu(Spea.FpsId,Spea.FpsUabus1To4,Spea.FpsUabus5To8,Spea.FpsUabus1To4,Spea.FpsUabus5To8,Spea.FpsUabus1To4,Spea.FpsUabus5To8)">
            <summary>
            The FpsConnectUabusBmu instruction connects the interface pins of the fixed power supply to the UABUS rows of the YABMU board.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be connected.</param>
            <param name="rowHotP">It identifies the UABUS row to connect with the 1st positive pole of the fixed power supply.</param>
            <param name="rowHotPK">It identifies the UABUS row to connect with the 2nd positive pole of the fixed power supply.</param>
            <param name="rowColdP">It identifies the UABUS row to connect with the 1st negative pole of the fixed power supply.</param>
            <param name="rowColdPK">It identifies the UABUS row to connect with the 2nd negative pole of the fixed power supply.</param>
            <param name="rowHotS">It identifies the UABUS row to connect with the sense positive pole of the fixed power supply.</param>
            <param name="rowColdS">It identifies the UABUS row to connect with the sense negative pole of the fixed power supply.</param>
            <returns> ??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.FpsDisable(Spea.FpsId)">
            <summary>
            The FpsDisable instruction allows to power off the fixed power supplies.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be powered off.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsDisableAll">
            <summary>
            The FpsDisableAll instruction allows to power off of all the fixed power supplies.
            </summary>
            <returns> ??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.FpsDisconnectAllInterf">
            <summary>
            The FpsDisconnectAllInterf instruction allows the disconnection of all the fixed power supplies from System Interface.
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsDisconnectInterf(Spea.FpsId)">
            <summary>
            The FpsDisconnectInterf instruction allows the disconnection of the fixed power supplies from the System Interface.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be disconnected from the System Interface.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsDisconnectUabusBmu(Spea.FpsId)">
            <summary>
            The FpsDisconnectUabusBmu instruction disconnects the fixed power supply from the system interface and from the UABUS rows of the YABMU board.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be disconnected.</param>
            <returns> ??? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.FpsEnable(Spea.FpsId)">
            <summary>
            The FpsEnable instruction allows to power on the fixed power supplies.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be powered on.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsOff(Spea.FpsId)">
            <summary>
            The FpsOff instruction allows to execute the fixed power supplies power off --> disconnection sequence.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be powered off and disconnected.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsOffAll">
            <summary>
            The FpsOffAll instruction allows to execute all fixed power supplies power off --> disconnection sequence.
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FpsOn(Spea.FpsId)">
            <summary>
            The FpsOn instruction allows to execute the fixed power supplies connection --> power on sequence.
            </summary>
            <param name="instrId">It identifies the fixed power supply to be connected and powered on.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_RAC_NOT_PRESENT           ->      The RAC module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FuncDatalogTest(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,Spea.TestResult,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            The FuncDatalogTest instruction writes the functional test results in the Runpack Datalog files.
            </summary>
            <param name="taskNumber">It identifies the task number.</param>
            <param name="testNumberInTask">It identifies the test number related to the task.</param>
            <param name="uniqueTestId">It identifies the unique test identifier.</param>
            <param name="testNumber">It identifies the test number related to all Functional test plans.</param>
            <param name="drawingReference">It identifies the name of the component under test.</param>
            <param name="remark">It identifies the test remark.</param>
            <param name="testResult">It identifies the test result.</param>
            <param name="measuredValueString">It identifies the measured value.</param>
            <param name="thrLowStr">It identifies the low threshold value.</param>
            <param name="thrHighStr">It identifies the high threshold value.</param>
            <param name="tpListStr">It identifies the list of test points involved in the test.</param>
            <param name="siteNum">It identifies the board of the panel under test.</param>
        </member>
        <member name="M:Spea.LeoF.FuncFailTest">
            <summary>
            The FuncFailTest instruction returns a value !=0 if the total functional fail flag is set.
            </summary>
            <returns>
            <para>0                             ->      The total functional fail flag was not correctly set.</para>
            <para>!=0                           ->      The total functional fail flag was correctly set.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.FuncTempFailTest">
            <summary>
            The FuncTempFailTest instruction returns a value !=0 if the last functional fail flag is set.
            </summary>
            <returns>
            <para>0                             ->      The total functional fail flag was not correctly set.</para>
            <para>!=0                           ->      The total functional fail flag was correctly set.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.GndConnectUabusBmu(Spea.Uabus)">
            <summary>
            The GndConnectUabusBmu instruction connects the UABUS rows of the YABMU board to the system ground.
            </summary>
            <param name="row">It identifies the row of the UABUS to be connected with the system ground.</param>
            <returns>!!! not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.GndDisconnectUabusBmu(Spea.Uabus)">
            <summary>
            The GndDisconnectUabusBmu instruction disconnects the UABUS rows of the YABMU board from the system ground.
            </summary>
            <param name="row">It identifies the row of the UABUS to be disconnected from the system ground.</param>
            <returns>!!! not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.GuardDisable">
            <summary>
            The GndDisconnectUabusBmu instruction disconnects the UABUS rows of the YABMU board from the system ground.
            </summary>
            <returns>!!! not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.GuardSet(Spea.SlewRate,Spea.Abus,Spea.Abus,Spea.Abus)">
            <summary>
            The GuardSet instruction allows to program the instruments guard.
            </summary>
            <param name="slewRate">It identifies the output stage front rate.</param>
            <param name="inputRow">It identifies the input reference for the guard.</param>
            <param name="outputRow">It identifies the output reference for the guard.</param>
            <param name="setRow">It identifies the sense reference for the guard.</param>
            <returns>!!! not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.HoldRegisterRead(System.Int32,System.Double@,System.String@,System.Int32)">
            <summary>
            The HoldRegisterRead instruction reads the hold register.
            </summary>
            <param name="regNum">It identifies the hold register number.</param>
            <param name="value">It identifies the hold register value (returned by this instruction).</param>
            <param name="unit">It identifies the mesure unit (returned by this instruction).</param>
            <param name="unitMaxLength">It identifies the maximal length of <paramref name="unit"/> string.</param>
            <returns>
            <para>0                             ->      The hold register was correctly read.</para>
            <para>1                             ->      The hold register was not correctly read.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.HoldRegisterWrite(System.Int32,System.Double,System.String@,System.Int32)">
            <summary>
            The HoldRegisterWrite instruction writes the hold register.
            </summary>
            <param name="regNum">It identifies the hold register number.</param>
            <param name="value">It identifies the hold register value.</param>
            <param name="unit">It identifies the mesure unit (returned by this instruction).</param>
            <param name="unitMaxLength">It identifies the maximal length of <paramref name="unit"/> string.</param>
            <returns>
            <para>0                             ->      The hold register was correctly set.</para>
            <para>1                             ->      The hold register was not correctly set.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.InsulatedChConnect">
            <summary>
            <para>The InsulatedChConnect instruction allows the connection of all the insulated channels to the System Interface.</para>
            <para>Notes:</para>
            <para>1)      The execution of this instruction is 15ms (only if insulated channels are not already connected).</para>
            <para>2)      The connection of the insulated channels is inhibited if the EXTCSEZHV signal in interface is active or if a  generator (ACGEN or DCGEN) is connected).</para>
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.InsulatedChDisconnect">
            <summary>
            <para>The InsulatedChDisconnect instruction allows the disconnection of all the insulated channels from the System Interface.</para>
            <para>Note: The execution of this instruction is 10ms (only if insulated channels are not already disconnected).</para>
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.InterfConnectMobus(Spea.Mobus)">
            <summary>
            The InterfConnectMobus instruction connects the System Interface modulation signals with the Mobus.
            </summary>
            <param name="modinId">It identifies the modulation signals to be connected on the Mobus.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT           ->      The AUX module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.InterfDisconnectMobus(Spea.Mobus)">
            <summary>
            The InterfDisconnectMobus instruction disconnects the System Interface modulation signals to the Mobus.
            </summary>
            <param name="modinId">It identifies the modulation signals to be connected on the Mobus.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT           ->      The AUX module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.InterfSyncSet(Spea.SyncFlag,Spea.SynchroBusLine)">
            <summary>
            The InterfSyncSet instruction connects/disconnects the synchronism signals on the System Interface to/from the Synchro Bus.
            </summary>
            <param name="flagId">It identifies the system input/output synchronization signals.</param>
            <param name="sbusLine">It identifies the line of the Synchro Bus used for the connection.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT           ->      The AUX module is not present.                                </para>
            <para>ERR_INV_FLAG_ID               ->      The FlagId parameter is not valid.                            </para>
            <para>ERR_INV_SYNC_LINE             ->      The SbusLine parameter is not valid.                          </para>
            <para>ERR_INV_LINE_FOR_FLAG         ->      The SbusLine parameter is not valid for the selected FlagId.  </para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.IsDebug">
            <summary>
            This instruction returns a value different from 0 when Debug is enabled.
            </summary>
            <returns>
            <para>0                             ->      Debug is not enabled.</para>
            <para>Different from 0              ->      Debug is enabled.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.IsInstrumentPresent(Spea.AllInstruments)">
            <summary>
            The IsInstrumentPresent instruction returns nonzero if the specified instrument is present in the system.
            </summary>
            <param name="instrId">It identifies the instrument identifier. Possible values are all the valid instrument identifiers.</param>
            <returns>
            <para>0                             ->      The instrument is not present.</para>
            <para>Different from 0              ->      The instrument is present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.IsReceiverDown">
            <summary>
            The IsReceiverDown instruction checks if the receiver is in Down position.
            </summary>
            <returns>
            <para>0                             ->      The receiver is in Down position.</para>
            <para>1                             ->      The receiver is not in Down position.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.IsReceiverMiddle">
            <summary>
            The IsReceiverMiddle instruction checks if the receiver is in Middle position.
            </summary>
            <returns>
            <para>0                             ->      The receiver is in Middle position.</para>
            <para>1                             ->      The receiver is not in Middle position.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.IsReceiverUp">
            <summary>
            The IsReceiverUp instruction checks if the receiver is in Up position.
            </summary>
            <returns>
            <para>0                             ->      The receiver is in Up position.</para>
            <para>1                             ->      The receiver is not in Up position.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.IsRunPackOn">
            <summary>
            <para>ANMERKUNG: Funktion ist in dieser schreibweise nicht vorhanden. Es gibt ähnliche Funktionen, die am System erst ausprobiert werden sollten und dann eingepflegt werden müssen.</para>
            <para>This instruction returns a value different from 0 when Runpack is enabled.</para>
            </summary>
            <returns>
            Always returns 1 until fully implemeted.
            </returns>
        </member>
        <member name="M:Spea.LeoF.IsSystemOn">
            <summary>
            This instruction returns a value different from 0 when the system is ON.
            </summary>
            <returns>
            <para>0                             ->      The system is not on.</para>
            <para>Different from 0              ->      The system is on.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsMeasEnabledSet(System.Int32,Spea.LcsMeasureState,Spea.LcsMeasureState,Spea.LcsMeasureState,Spea.LcsMeasureState,Spea.LcsMeasureState,System.Byte)">
            <summary>
            The LcsMeasEnabledSet instruction enables the test results on the specified color space.
            </summary>
            <param name="sensorId">It identifies the sensor.</param>
            <param name="rgb">It identifies the RGB color space.</param>
            <param name="hsl">It identifies the HSL color space.</param>
            <param name="xy">It identifies the XY color space.</param>
            <param name="lux">It identifies the visible light.</param>
            <param name="luxIr">It identifies the infrared light.</param>
            <param name="binXY">This parameter is not ducomented and no possible values are given.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsMeasuredValuesRead(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            The LcsMeasuredValuesRead instruction loads the measurement results of the specified sensor.
            </summary>
            <param name="sensorId">It identifies the sensor.</param>
            <param name="rgbRed">It identifies the red value of RGB color space.</param>
            <param name="rgbGreen">It identifies the green value of RGB color space.</param>
            <param name="rgbBlue">It identifies the blue value of RGB color space.</param>
            <param name="hslHue">It identifies the hue value of HSL color space.</param>
            <param name="hslSaturation">It identifies the saturation value of HSL color space.</param>
            <param name="hslLightness">It identifies the lightness value of HSL color space.</param>
            <param name="xyX">It identifies the X value of CIE1931 color space.</param>
            <param name="xyY">It identifies the Y value of CIE1931 color space.</param>
            <param name="luxVisible">It identifies the value of visible light.</param>
            <param name="luxInfrared">It identifies the value of infrared light.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSensorFinderOff">
            <summary>
            The LcsSensorFinderOff instruction disables the optical identification of all probes.
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSensorFinderOn">
            <summary>
            The LcsSensorFinderOn instruction enables the optical identification of all probes.
            </summary>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSensorFinderRead(System.Int32@,System.String,System.Int32@)">
            <summary>
            The LcsSensorFinderRead instruction reads which probe has been identified by the operator.
            Anmerkung: Funktion sollte getestet werden, da nicht genau ersichtlich ist, welche Werte zurückgegeben werden.
            </summary>
            <param name="sensorFound">It identifies the result of the search for the sensor.</param>
            <param name="sensorSerialNumber">It is the identifier of the Serial Number of the found sensor.</param>
            <param name="sensorId">It identifies the found sensor.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSensorIdRead(System.String,System.Int32@)">
            <summary>
            The LcsSensorIdRead instruction reads the ID of the sensor.
            </summary>
            <param name="sensorSerialNumber">It is the identifier of the Serial Number of the sensor.</param>
            <param name="sensorId">It identifies the read ID of the sensor.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSensorIdWrite(System.String,System.Int32)">
            <summary>
            The LcsSensorIdWrite instruction changes the ID of the sensor.
            </summary>
            <param name="sensorSerialNumber">It is the identifier of the Serial Number of the sensor.</param>
            <param name="sensorId">It identifies the read ID of the sensor.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSensorsScan(System.Int32@,System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            The LcsSensorsScan instruction scans the connected sensors (master and slave).
            </summary>
            <param name="sensorsFoundQty">It identifies the amount of sensors found in the chain.</param>
            <param name="sensorIdList">It identifies the list of the sensors found in the chain.</param>
            <param name="sensorSerialNumberList">It identifies the list of the Serial Numbers of the sensors found in the chain.</param>
            <param name="sensorPortList">It identifies the list of the COM serial ports used for the connection of the sensors.</param>
            <param name="maxNumberOfSensors">The maximal number of sensors expected to be found.</param>
            <param name="maxLengthOfSerialNumber">The maximal length of any serial numbers.</param>
            <returns>
            <para>0                             ->      The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSetupAutoScale(System.Int32,Spea.LCSTiming,Spea.LCSColorGain@,Spea.LCSLuxGain@)">
            <summary>
            The LcsSetupAutoscale instruction executes a series of measurements aimed to determine the right measurement ranges to use. The sensor will then remain programmed with these ranges. The functions will also return the color and and lux gain values.
            </summary>
            <param name="sensorId">It identifies the sensors to be setup.</param>
            <param name="time">It identifies the probe integration time.</param>
            <param name="colorGain">It identifies the sensor color scale.</param>
            <param name="luxGain">It identifies the sensor lightness scale. Scales include a damper (prescaler) and 4 amplifiers (gain).</param>
            <returns>
            <para>0         ->         The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSetupSet(System.Int32,Spea.LCSTiming,Spea.LCSColorGain,Spea.LCSLuxGain)">
            <summary>
            The LcsSetupSet instruction programs the integration time and the gain of the probe.
            </summary>
            <param name="sensorId">It identifies the sensors to be setup.</param>
            <param name="time">It identifies the probe integration time.</param>
            <param name="colorGain">It identifies the sensor color scale.</param>
            <param name="luxGain">It identifies the sensor lightness scale. Scales include a damper (prescaler) and 4 amplifiers (gain).</param>
            <returns>
            <para>0         ->         The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsSingleTestExecute(System.Int32,System.Boolean,Spea.LCSTestResult@)">
            <summary>
            The LcsSingleTestExecute instruction executes a single test on a single sensor.
            </summary>
            <param name="sensorId">It identifies the sensors to be setup.</param>
            <param name="calibrationUsed">It identifies the measurement corrected by the calibration data. The rough measurement is necessary only during calibration.</param>
            <param name="testResult">It identifies the result of the measurement. If executed using LcsMeasEnabledSet and LcsThresholdSet instructions, the measurement is automatically compared to the thresholds.</param>
            <returns>
            <para>0         ->         The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsTestResultRead(System.Int32,Spea.LCSTestResult@)">
            <summary>
            The LcsTestResultRead instruction reads the result of the specified sensor.
            </summary>
            <param name="sensorId">It identifies the sensors to be setup.</param>
            <param name="testResult">It identifies the result of the measurement. If executed using LcsMeasEnabledSet and LcsThresholdSet instructions, the measurement is automatically compared to the thresholds.</param>
            <returns>
            <para>0         ->         The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.LcsThresholdSet(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The LcsThresholdSet instruction sets the measurement thresholds.
            </summary>
            <param name="sensorId">It identifies the sensor. </param>
            <param name="redMin">It is the identifier of the low threshold for the red value of RGB color space.</param>
            <param name="redMax">It is the identifier of the high threshold for the red value of RGB color space.</param>
            <param name="greenMin">It is the identifier of the low threshold for the green value of RGB color space.</param>
            <param name="greenMax">It is the identifier of the high threshold for the green value of RGB color space.</param>
            <param name="blueMin">It is the identifier of the low threshold for the blue value of RGB color space.</param>
            <param name="blueMax">It is the identifier of the high threshold for the blue value of RGB color space.</param>
            <param name="hueMin">It is the identifier of the low threshold for the hue value of HSL color space.</param>
            <param name="hueMax">It is the identifier of the high threshold for the hue value of HSL color space.</param>
            <param name="saturationMin">It is the identifier of the low threshold for the saturation value of HSL color space.</param>
            <param name="saturationMax">It is the identifier of the high threshold for the saturation value of HSL color space.</param>
            <param name="lightnessMin">It is the identifier of the low threshold for the lightness value of HSL color space.</param>
            <param name="lightnessMax">It is the identifier of the high threshold for the lightness value of HSL color space.</param>
            <param name="xMin">It is the identifier of the low threshold for the X value of Yxy color space.</param>
            <param name="xMax">It is the identifier of the high threshold for the X value of Yxy color space.</param>
            <param name="yMin">It is the identifier of the low threshold for the Y value of Yxy color space.</param>
            <param name="yMax">It is the identifier of the high threshold for the Y value of Yxy color space.</param>
            <param name="luxMin">It is the identifier of the low threshold for the visible light value.</param>
            <param name="luxMax">It is the identifier of the high threshold for the visible light value.</param>
            <param name="luxIrMin">It is the identifier of the low threshold for the infrared light value.</param>
            <param name="luxIrMax">It is the identifier of the high threshold for the infrared light value.</param>
            <returns>0         ->         The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.LcsTrimEnabledSet(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The LcsTrimEnabledSet instruction enables the use of offsets on the specified measurements.
            </summary>
            <param name="sensorId">It identifies the sensor.</param>
            <param name="rgbRed">It identifies the status of the offset correction (trim) for the red value of RGB color space.</param>
            <param name="rgbGreen">It identifies the status of the offset correction (trim) for the green value of RGB color space.</param>
            <param name="rgbBlue">It identifies the status of the offset correction (trim) for the blue value of RGB color space.</param>
            <param name="hslHue">It identifies the status of the offset correction (trim) for the hue value of HSL color space.</param>
            <param name="hslSaturation">It identifies the status of the offset correction (trim) for the saturation value of HSL color space.</param>
            <param name="hslLightness">It identifies the status of the offset correction (trim) for the lightness value of HSL color space.</param>
            <param name="xYX">It identifies the status of the offset correction (trim) for the X value of XY color space.</param>
            <param name="yYX">It identifies the status of the offset correction (trim) for the Y value of XY color space.</param>
            <param name="luxVisible">It identifies the status of the offset correction (trim) for the value of visible light.</param>
            <param name="luxInfrared">It identifies the status of the offset correction (trim) for the value of infrared light.</param>
            <returns>0         ->         The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.LcsTrimSet(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The LcsTrimSet instruction sets the offset on the specified quantities.
            </summary>
            <param name="sensorId">It identifies the sensor.</param>
            <param name="rgbRed">It identifies the red value of RGB color space.</param>
            <param name="rgbGreen">It identifies the green value of RGB color space.</param>
            <param name="rgbBlue">It identifies the blue value of RGB color space.</param>
            <param name="hslHue">It identifies the hue value of HSL color space. </param>
            <param name="hslSaturation">It identifies the saturation value of HSL color space. </param>
            <param name="hslLightness">It identifies the lightness value of HSL color space. </param>
            <param name="xYX">It identifies the X value of XY color space.</param>
            <param name="yYX">It identifies the Y value of XY color space.</param>
            <param name="luxVisible">It identifies the value of visible light.</param>
            <param name="luxInfrared">It identifies the value of infrared light.</param>
            <returns>0         ->         The instruction has been successfully executed without errors.</returns>
        </member>
        <member name="M:Spea.LeoF.LogClear">
            <summary>
            This instruction clears the Log Window contains of Runpack.
            </summary>
        </member>
        <member name="M:Spea.LeoF.LotNumberRead(System.String@,System.Int32)">
            <summary>
            The LotNumberRead instruction reads the lot number.
            </summary>
            <param name="lotnumber">It identifies the lot number (returned by this instruction).</param>
            <param name="maxLength">The maximal length of the <paramref name="lotnumber"/>.</param>
            <returns>This instruction returns the number of characters stored into the LotNumber parameter.</returns>
        </member>
        <member name="M:Spea.LeoF.LotRead(System.String@,System.Int32)">
            <summary>
            The LotRead instruction reads the lot number.
            </summary>
            <param name="lotnumber">It identifies the lot number (returned by this instruction).</param>
            <param name="maxLength">The maximal length of the <paramref name="lotnumber"/>.</param>
            <returns>This instruction returns the number of characters stored into the LotNumber parameter.</returns>
        </member>
        <member name="M:Spea.LeoF.LotWrite(System.String)">
            <summary>
            The LotWrite instruction writes the lot number.
            </summary>
            <param name="lotnumber">It identifies the lot number.</param>
            <returns>unknown.</returns>
        </member>
        <member name="M:Spea.LeoF.MsgDispService(System.String,System.Int32)">
            <summary>
            The MsgDispService instruction displays the specified message in the service message area of the Control Panel.
            </summary>
            <param name="message">It identifies the message to show in the Control Panel service message area.</param>
            <param name="avoidcrfl">It identifies the flag to determine whether a new line character must be appended at the end of the string or not. By default the flag is 0, and this means that there is a string on each line.</param>
        </member>
        <member name="M:Spea.LeoF.MsgPrintLog(System.String,System.Int32)">
            <summary>
            The MsgPrintLog instruction displays the specified message in the Log message area of the Control Panel.
            </summary>
            <param name="message">It identifies the message to show in the Control Panel log message area.</param>
            <param name="avoidcrfl">It identifies the flag to determine whether a new line character must be appended at the end of the string or not. By default the flag is 0, and this means that there is a string on each line.</param>
        </member>
        <member name="M:Spea.LeoF.MsgPrintReport(System.String,System.Int32)">
            <summary>
            The MsgPrintReport instruction displays the specified message in the service message area of the Control Panel.
            </summary>
            <param name="message">It identifies the message to show in the Control Panel service message area.</param>
            <param name="avoidcrfl">It identifies the flag to determine whether a new line character must be appended at the end of the string or not. By default the flag is 0, and this means that there is a string on each line.</param>
        </member>
        <member name="M:Spea.LeoF.ObpAddressBitNumberSet(Spea.ObpID,System.Int32)">
            <summary>
            The ObpAddressBitNumberSet instruction allows to set the number of bits required to address the whole memory area of the used device.
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="bitNumber">It identifies the number of bits used to address the device’s memory.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpAsyncModeEnable(Spea.ObpID)">
            <summary>
            <para>After the ObpAsyncModeEnable instruction, the next OBP instruction is executed in asynchronous mode.</para>
            <para>It means that the system does not wait the completion of the execution of the instruction itself(instruction “A”); the system starts the execution of the next instruction “B” of the program.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpBlankCheck(Spea.ObpID,Spea.DataType)">
            <summary>
            The ObpBlankCheck instruction allows to check if the component is clear.
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATA_TYPE   -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpBoardModelAssign(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpBoardModelAssign instruction allows to choose the boards that execute the model.</para>
            <para>Note: If this instruction is used, remember to connect the channels of the re-assigned board before using them.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="boardList">Board List.</param>
            <param name="assignedBoardList">Assigned Board List.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChConnect(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpChConnect instruction allows connecting the OBP module outputs channels to interface.</para>
            <para>This instruction has to be called at the beginning of the test program for connecting the OBP module to the device.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">channels List.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChDifferentialDisable(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpChDifferentialDisable instruction configures the YADIO5xx to work in single ended mode. It is enough one channel to set the entire unit.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">channels List.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChDifferentialEnable(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpChDifferentialEnable instruction configures the YADIO5xx to work in differential mode. It is enough one channel to set the entire unit.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">channels List.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChDifferentialSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},Spea.ObpChSignalType)">
            <summary>
            <para>The ObpChDifferentialSet instruction configures the type of differential signaling technology.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels to configure.</param>
            <param name="signalType">Transceiver type.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChDisconnect(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpChDisconnect instruction allows disconnecting the OBP module outputs channels to interface.</para>
            <para>At the end of test plan execution the connected channels should be disconnected.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">channels List.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChFloatingDetect(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},System.Double)">
            <summary>
            <para>The ObpChFloatingDetect instruction allows checking if the specified OBP digital channels are connected to the UUT.</para>
            <para>If an error occurred, it means that minimum one of the selected channels is not connected to the UUT, the instruction return a value not equal 0, and otherwise a 0 value is returned.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels list.</param>
            <param name="vRef">Test voltage.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VREF        -> The Vref parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChFpDisable(Spea.ObpID)">
            <summary>
            <para>The ObpChFpDisable instruction configures the DBDIO to work from the interface.</para>
            </summary>
            <param name="obpID">It identifies the system CPU.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChFpEnable(Spea.ObpID)">
            <summary>
            <para>The ObpChFpEnable instruction configures the DBDIO to work with the probe programmed digital channel.</para>
            </summary>
            <param name="obpID">It identifies the system CPU.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChFpMuxSet(Spea.ObpID,Spea.ObpMuxProbes,Spea.ObpMuxCahnnel)">
            <summary>
            <para>The ObpChFpMuxSet instruction changes the association PROBE – Digital channel. It is use to adapt the positioned probes to the OBP driver required channel.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="probeId">Probe Identifier.</param>
            <param name="channel">OBP Channel.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChipErase(Spea.ObpID,Spea.DataType)">
            <summary>
            <para>The ObpChipErase instruction executes the memory erasure of the programmable component. </para>
            <para>If during the data deletion an error occurs the instruction will return a value not equal 0, otherwise it will return 0.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATA_TYPE   -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChipEraseVerify(Spea.ObpID,Spea.DataType)">
            <summary>
            <para>The ObpChipEraseVerify instruction executes the memory erasure of the programmable component, and then verifies if the whole memory is clear. </para>
            <para>If during the data deletion, or the verification, an error occurs the instruction will return a value not equal 0, otherwise it will return 0.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATA_TYPE   -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChLevelRead(Spea.ObpID,System.Int16,Spea.ObpChannelLevel@)">
            <summary>
            <para>The ObpChLevelRead instruction allows reading the logic level of a channel of OBP module. This instruction has been developed for diagnostic purposes, it has not to be used in a testprogram.</para>
            <para>The result of the read is returned in the address indicated by Level parameter. The returned value depends on threshold set with the ObpChSensorSet instruction.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="ch">Channel.</param>
            <param name="level">Read logic level.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChLevelSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},System.Double,System.Double)">
            <summary>
            <para>The ObpChLevelSet instruction allows programming the voltage levels of the OBP module channels. The instruction sets automatically the Vpp value at 6.0 V default value.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List.</param>
            <param name="vH">It identifies the voltage value to be associated to high logic level expressed in Volt.</param>
            <param name="vL">It identifies the voltage value to be associated to low logic level expressed in Volt.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VHIGH       -> The Vh parameter is out of range.</para>
            <para>ERR_OBP_VLOW        -> The Vl parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChLoadSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},Spea.ObpLoad)">
            <summary>
            <para>The ObpChLoadSet instruction connects a resistor load on a selected channel list.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List.</param>
            <param name="load">It identifies the type of load to connected to the channel list.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChOutputImpedanceSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},Spea.ObpImpedance)">
            <summary>
            <para>The ObpChOutputImpedanceSet instruction allows to set the output impedance to use for the selected channels.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List. The list of channels has to be terminated by 0.</param>
            <param name="impedance">It identifies the impedance to be set.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_IMPEDANCE   -> The Impedance parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChSensorSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},System.Double)">
            <summary>
            <para>The ObpChSensorSet instruction allows to program the threshold voltage in order to determine the high or low logic levels of the OBP module channels.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List. The list of channels has to be terminated by 0.</param>
            <param name="vTh">It identifies the threshold voltage (in Volts). >5V only on Vpp channels.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VTH         -> The Vth parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChStuckSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},Spea.ObpStuckLevel)">
            <summary>
            <para>The ObpChStuckSet instruction allows to stuck the selected channels to a specified voltage level.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List. The list of channels has to be terminated by 0.</param>
            <param name="stkState">It identifies the level the selected channel will be stuck to.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_STKSTATE    -> The StkState parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChVectorRead(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},System.Collections.Generic.List{Spea.ObpChannelLevel}@)">
            <summary>
            <para>The ObpChVectorRead instruction allows to read the specified channels list logic level.</para>
            <para>The results of the reading are returned in the array indicated in Level parameter.</para>
            <para>The returned values depend on threshold set with ObpChSensorSet instruction.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List. The list of channels has to be terminated by 0.</param>
            <param name="level"> Read Logic levels.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChVectorWrite(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},Spea.ObpStuckLevel)">
            <summary>
            <para>The ObpChVectorWrite instruction allows to set a specified logic level for the selected channels list.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List. The list of channels has to be terminated by 0.</param>
            <param name="level">Channels logic level.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpChVppLevelSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},System.Double)">
            <summary>
            <para>The ObpChVppLevelSet instruction allows to set the Vpp voltage level. Vpp level is available only on Vpp channels.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">Channels List. The list of channels has to be terminated by 0.</param>
            <param name="vpp">Vpp value. Minimum is 0.5V.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VREF        -> The Vpp parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpClearData(Spea.ObpID)">
            <summary>
            <para>The ObpClearData instruction resets all the files present in the memory of OBP module.</para>
            <para>Using this instruction means deleting all the files and models loaded with Load instructions (ObpLoadDataFile and ObpModelLoad).</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDataChecksumGet(Spea.ObpID,Spea.DataType,Spea.HashType,System.Int32,System.Int32,System.Int32@)">
            <summary>
            <para>The ObpDataChecksumGet instruction allows to get the check sum in the format required by the user (by setting HashType perameter).</para>
            <para>It is possible to calculate the check sum of only part of the memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for check sum get.</param>
            <param name="hashType">Hash format type.</param>
            <param name="startaddress">Starting address for check sum get.</param>
            <param name="length">Len of data.</param>
            <param name="hash">Value of the check sum.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDataChecksumVerify(Spea.ObpID,Spea.DataType,Spea.HashType,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>The ObpDataChecksumVerify instruction allows to verify the check sum in the format required by the user (by setting HashType perameter).</para>
            <para>It is possible to verify the check sum of only part of the memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for check sum get.</param>
            <param name="hashType">Hash format type.</param>
            <param name="startaddress">Starting address for check sum get.</param>
            <param name="length">Len of data.</param>
            <param name="hash">Value of the check sum.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATA_TYPE   -> The DataType parameter is not valid.</para>
            <para>ERR_OBP_HASH_TYPE   -> The HashType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDeviceSelect(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpDeviceSelect instruction is used to select one specific device when the model is able to program more devices.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="deviceName">Name of the device to be selected.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DEVICENAME  -> The DeviceName parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDeviceUnlock(Spea.ObpID,Spea.DataType,System.Int32)">
            <summary>
            <para>The ObpDeviceUnlock instruction is used to unlock the memory of a device by sending a specific parameter.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">DataFormat for the instruction.</param>
            <param name="parameter">Parameter to be sent.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDeviceLock(Spea.ObpID,Spea.DataType,System.Int32)">
            <summary>
            <para>The ObpDeviceLock instruction is used to lock the memory of a device by sending a specific parameter.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">DataFormat for the instruction.</param>
            <param name="parameter">Parameter to be sent.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDieDisable(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpDieDisable instruction is used to disable the selected dies.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dieList">List of Dies to be disabled. The list of Dies has to be terminated by 0.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDieEnable(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpDieEnable instruction is used to enable the selected dies (without disabling those previously enabled).</para>
            <para>It is used to program several components in parallel.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dieList">List of Dies to be enabled. The list of Dies has to be terminated by 0.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpDieReset(Spea.ObpID)">
            <summary>
            <para>The ObpDieReset instruction is used to disable all the dies.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpErrorPrintDisable(Spea.ObpID)">
            <summary>
            <para>The ObpErrorPrintDisable instruction allows to disable the view on runpack test report window of the errors generated by the obp driver during the execution.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpErrorPrintEnable(Spea.ObpID)">
            <summary>
            <para>The ObpErrorPrintEnable instruction allows to enable the view of the errors generated by the obp driver during the execution on runpack test report window.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpExecuteSVF(Spea.ObpID,System.Int32)">
            <summary>
            <para>The ObpExecuteSVF instruction allows to execute the selected file with SVF format.</para>
            <para>Note: The file must be loaded through the ObpLoadDataFile instruction.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="fileID">It identifies the file to be used (indicated in the ObpLoadDataFile instruction).</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpGetDieResult(Spea.ObpID,System.Int16,Spea.TestplanResults@)">
            <summary>
            <para>The ObpGetDieResult instruction is used to verify the programming result of the specified die.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="die">Number of the die.</param>
            <param name="result">Returned result.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpGetDriverInfo(Spea.ObpID,System.String,System.String@,System.Int32)">
            <summary>
            <para>The ObpGetDriverInfo instruction returns the release of a specific OBP Driver.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="driverName">It identifies the driver name in string format (e.g.: MC9S12XD-0SO5).</param>
            <param name="driverInfo">It identifies the Driver release.</param>
            <param name="maxLengthDriverInfo">It identifies the maximal length expected for the returned <paramref name="driverInfo"/> string.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpGetSiteResult(Spea.ObpID,System.Int32,Spea.TestResult@)">
            <summary>
            <para>The ObpGetSiteResult instruction is used to verify the programming result of the specified site.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="site">It identifies the site to check the OBP result.</param>
            <param name="siteResult">Returned result.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_SITENUMBER  -> The Site parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpInterfaceDisable(Spea.ObpID)">
            <summary>
            <para>The ObpInterfaceDisable instruction allows to disable the device program interface.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpInterfaceEnable(Spea.ObpID)">
            <summary>
            <para>The ObpInterfaceEnable instruction starts the program interface sequence.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpLoadDataFile(Spea.ObpID,System.String,Spea.FileType,System.Int32@)">
            <summary>
            <para>The ObpLoadDataFile instruction allows loading a data file in the OBP module memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="filename">It identifies the name of the file to be loaded in memory.</param>
            <param name="fileType">It identifies the type of file to be loaded in memory.</param>
            <param name="fileId">It is the pointer to the memory address where the file must to be loaded.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_FILENAME    -> The FileName parameter is not valid.</para>
            <para>ERR_OBP_FILETYPE    -> The FileType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpLoadDataFileHEX(Spea.ObpID,System.String,Spea.HexFileOptions,System.Int32@)">
            <summary>
            <para>ObpLoadDataFileHEX instruction allows loading data files in HEX format into the OBP module memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="filename">It identifies the name of the file to be loaded in memory.</param>
            <param name="options">It identifies the file’s loading options.</param>
            <param name="fileId">It is the pointer to the memory address where the file must to be loaded.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_FILENAME    -> The FileName parameter is not valid.</para>
            <para>ERR_OBP_HEX_OPTIONS -> The Options parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpLoadDataFileSREC(Spea.ObpID,System.String,Spea.SRECFileOptions,System.Int32@)">
            <summary>
            <para>The ObpLoadDataFileSREC instruction allows loading data files in SREC format into the OBP module memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="filename">It identifies the name of the file to be loaded in memory.</param>
            <param name="options">It identifies the file’s loading options.</param>
            <param name="fileId">It is the pointer to the memory address where the file must to be loaded.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_FILENAME    -> The FileName parameter is not valid.</para>
            <para>ERR_OBP_SREC_OPTIONS-> The Options parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpLoadDataFileSVF(Spea.ObpID,System.String,System.Double,System.Int32,Spea.SVFFileOptions,System.Int32@)">
            <summary>
            <para>The ObpLoadDataFileSVF instruction allows loading data files in SVF format into the OBP module memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="filename">It identifies the name of the file to be loaded in memory.</param>
            <param name="frequency">It identifies the frequency (in Hz) to be used in case it is not defined in the file. This parameter is ignored ff the frequency is defined in the file or if the value “0” is defined.</param>
            <param name="retries"> It identifies the number of time that the RUNTEST instruction is executed again before to set the error. If the parameter is “0”, the retries are not executed.Usually the parameter has to be “0”, only in some cases it is required(e.g.Xilinx device).</param>
            <param name="options">It identifies the file’s loading options.</param>
            <param name="fileId">It is the pointer to the memory address where the file must to be loaded.</param>
            <returns>
            <para>0                        -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID               -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT      -> The OBP module is not present.</para>
            <para>ERR_OBP_FILENAME         -> The FileName parameter is not valid.</para>
            <para>ERR_OBP_SVF_FREQUENCY    -> The RetryNumber parameter is not valid.</para>
            <para>ERR_OBP_SVF_RETRY_NB     -> The FileName parameter is not valid.</para>
            <para>ERR_OBP_SVF_OPTIONS      -> The Options parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpLoadAndKeepDataFile(Spea.ObpID,System.String,Spea.FileType,System.Int32)">
            <summary>
            <para>The ObpLoadDataFile instruction allows loading and keeping a data file in the OBP(500) module memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="filename">It identifies the name of the file to be loaded in memory.</param>
            <param name="fileType">It identifies the type of file to be loaded in memory.</param>
            <param name="fileId">It is the pointer to the memory address where the file must to be loaded (Must be greater 2000) .</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_FILENAME    -> The FileName parameter is not valid.</para>
            <para>ERR_OBP_FILETYPE    -> The FileType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpLogPrintDisable(Spea.ObpID)">
            <summary>
            <para>The ObpLogPrintDisable instruction allows to disable the printout of log messages inserted in the obp driver on RunPack system log window.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpLogPrintEnable(Spea.ObpID,System.Int32)">
            <summary>
            <para>The ObpErrorPrintEnable instruction allows to enable the printout of log messages inserted in the obp driver on runpack system log window.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="logLevel">It identifies the log level that is compared to define if printing or not the log message.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpModelLoad(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpModelLoad instruction loads the indicated programming model in the OBP memory.</para>
            <para>This instruction must be used before selecting the model with the ObpModelSelect instruction.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="modelname">It identifies the name of the component firmware module (max 31 characters + "\0").</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_MODELNAME   -> The ModelName parameter is not valid.</para>
            <para>ERR_OBP_DONGLE      -> Error in Dongle check.</para>
            <para>ERR_OBP_FILENAME    -> The OBP model file not exist.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpModelOptionsSet(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpModelOptionsSet instruction allows to set a list of options to configure the operation of the selected OBP driver.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="options">It identifies the options used by the selected obp driver. For more details about the available options to be set, refer to the specific driver documentation.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpModelSelect(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpModelSelect instruction allows selecting the firmware model for the component to be programmed.</para>
            <para>This instruction must be used after loading the model with the ObpModelLoad instruction.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="modelname">It identifies the name of the component firmware module (max 31 characters + "\0").</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_MODELNAME   -> The ModelName parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpPageSizeSet(Spea.ObpID,System.Int32)">
            <summary>
            <para>The ObpPageSizeSet instruction allows to set the size of the device page.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="pageSize">It identifies the size of the device’s page to be written.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpParallelExecutionLastResults(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>The ObpParallelExecutionLastResults instruction returns the error code of the function executed with the ObpStartParallelExecution instruction.</para>
            </summary>
            <param name="failFlagA">It identifies the first OBP device error.</param>
            <param name="failFlagB">It identifies the second OBP device error.</param>
            <param name="failFlagC">It identifies the third OBP device error.</param>
            <param name="failFlagD">It identifies the fourth OBP device error.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpPinModelAssign(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The ObpPinModelAssign instruction allows to assign the pins used by the driver to the selected channels.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="pinList">It identifies the pins to be assigned.</param>
            <param name="chList">It identifies the channels to be connected. The list of channels has to be terminated by 0.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpPinModelChOffset(Spea.ObpID,System.Int32)">
            <summary>
            <para>The ObpPinModelChOffset instruction allows to offset the Obp channels used by the driver.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chOffset">It identifies the number of channels to use as offset.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpPluFunctionLoad(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int16},Spea.ObpPluType)">
            <summary>
            <para>The ObpPluFunctionLoad instruction allows to program the Programmable Logic Unit (PLU) of the DBDIO board with the new function required.</para>
            <para>This instruction allows also the user to program the PLU with the default function.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="chList">It identifies the channels to be connected. The list of channels has to be terminated by 0.</param>
            <param name="obpPluType">Function to load.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_IDCODE      -> The IdCode parameter is not valid.</para>
            <para>ERR_OBP_CH_LIST     -> The ChList parameter is not valid.</para>
            <para>ERR_OBP_PLU_TYPE    -> The ObpPluType parameter is not valid.</para>
            <para>ERR_OBP_PLULOAD     -> An error occurred during the PLU load.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpPluFunctionLoadAll(Spea.ObpID,Spea.ObpPluType)">
            <summary>
            <para>The ObpPluFunctionLoadAll instruction allows to program the Programmable Logic Unit(PLU) of allthe DBDIO boards with the new function required.</para>
            <para>This instruction allows also the user to program the PLU with the default function.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="obpPluType">Function to load.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_IDCODE      -> The IdCode parameter is not valid.</para>
            <para>ERR_OBP_PLU_TYPE    -> The ObpPluType parameter is not valid.</para>
            <para>ERR_OBP_PLULOAD     -> An error occurred during the PLU load.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpProgrammingFileNameGet(Spea.ObpID,System.Int32,System.String,System.String@,System.Int32)">
            <summary>
            <para>The ObpProgrammingFileNameGet instruction returns the file name used in the OBP (selected by the OBP Setup Edit).</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="fileID">File identifier associated by the OBP Setup Edit.</param>
            <param name="drawingRef">Device name to program.</param>
            <param name="fileName">Returned name of the file used in the OBP.</param>
            <param name="maxFileNameLength">Maximal length expected for <paramref name="fileName"/> string.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpProgrammingSelect(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpProgrammingSelect instruction selects the device to program described in the Leonardo OBP Set Up.</para>
            <para>For detailed information, please refer to the “OBP Technical info”.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="drawingRef">It identifies the device described in the Leonardo OBP Set Up.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpReadData(Spea.ObpID,Spea.DataType,System.Int32,System.Int32,System.Collections.Generic.List{System.Byte}@)">
            <summary>
            <para>The ObpReadData instruction allows to read the data from the component.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for verification.</param>
            <param name="startAddress">Component memory start address to be read.</param>
            <param name="length">Component memory len to read.</param>
            <param name="data">It returns the data read.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSectorErase(Spea.ObpID,Spea.DataType,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            <para>The ObpSectorErase instruction allows to erase a list of device memory sectors.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for verification.</param>
            <param name="sectorList">It identifies the list of the start address memory of the sectors to erase.</param>
            <param name="sectorNum">It identifies the number of sectors to erase from list.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            <para>ERR_OBP_SECTOR_NUM  -> The Sector Num parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSectorEraseVerify(Spea.ObpID,Spea.DataType,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            <para>The ObpSectorEraseVerify instruction allows to delete and verify a list of address memory previously erased.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for verification.</param>
            <param name="sectorList">It identifies the list of address memory to verify.</param>
            <param name="sectorNum">It identifies the number of sectors to erase from list and verify. </param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            <para>ERR_OBP_SECTOR_NUM  -> The Sector Num parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSectorProtect(Spea.ObpID,Spea.DataType,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            <para>The ObpSectorProtect instruction allows to protect a list of address memory in the programmable device.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for verification.</param>
            <param name="sectorList">It identifies the list of address memory to protect.</param>
            <param name="sectorNum">It identifies the number of sectors to protect.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            <para>ERR_OBP_SECTOR_NUM  -> The Sector Num parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSectorUnprotect(Spea.ObpID,Spea.DataType,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            <para>The ObpSectorUnprotect instruction allows to unprotect a list of address memory in the programmable device.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for verification.</param>
            <param name="sectorList">It identifies the list of address memory to unprotect.</param>
            <param name="sectorNum">It identifies the number of sectors to unprotect.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            <para>ERR_OBP_SECTOR_NUM  -> The Sector Num parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSerialPortReceive(Spea.ObpID,System.Int32,System.Collections.Generic.List{System.Byte}@,System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            <para>The ObpSerialPortReceive instruction reads a data string by using UART serial communication protocol.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="site">It identifies the site number to be read.</param>
            <param name="data">It identifies the data List to read.</param>
            <param name="maxDataLen">It identifies the max data string length.</param>
            <param name="endChar">It identifies the character will end the data string to read.</param>
            <param name="readDataLen">It identifies the received data string.</param>
            <param name="timeout">It identifies the communication timeout (in ms).</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSerialPortSend(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            <para>The ObpSerialPortSend instruction sends a data string by using UART communication protocol.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="data">It identifies the data string to send.</param>
            <param name="length">It identifies the data string length.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSetIdCode(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpSetIdCode instruction allows to set the component Id code.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="idCode">The Id code consists of 14 hexadecimal digits.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_IDCODE      -> The IdCode parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSiteSelect(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpSiteSelect instruction selects the sites or dies (previously defined by the instruction ObpSiteSet) that have to be programmed program with the OBP Driver.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="siteList">Site to enable.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSiteSelect(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            <para>The ObpSiteSelect instruction selects the sites or dies (previously defined by the instruction ObpSiteSet) that have to be programmed program with the OBP Driver.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="siteList">Sites to enable.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSiteSet(Spea.ObpID,System.String)">
            <summary>
            <para>The ObpSiteSet instruction sets the sites or dies to be programmed with the OBP Driver.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="siteList">It identifies the site to be enabled (e.g.: 1-4).</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSiteSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            <para>The ObpSiteSet instruction sets the sites or dies to be programmed with the OBP Driver.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="siteList">It identifies the site to be enabled (e.g.: 1-4).</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSlaveAddressSet(Spea.ObpID,System.Int32)">
            <summary>
            <para>The ObpSlaveAddressSet instruction allows to set the slave address used by the model.</para>
            <para>If the driver uses this instruction, it must be executed because the device is programmed only when the SlaveAddress parameter matches with the device’s address inputs status (A2, A1, A0).</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="slaveAddress">It identifies the slave address to be set.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpStartParallelExecution(Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,Spea.LeoF.TestplanFuncDelegate,System.Int32)">
            <summary>
            <para>The ObpStartParallelExecution instruction runs up to four OBP functions in parallel.</para>
            </summary>
            <param name="obpFunc1">It identifies the function of the first function to program.</param>
            <param name="obpFunc2">It identifies the function of the second function to program.</param>
            <param name="obpFunc3">It identifies the function of the third function to program.</param>
            <param name="obpFunc4">It identifies the function of the fourth function to program.</param>
            <param name="obpPhaseId">It identifies the OBP function.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpSwapBytesSet(Spea.ObpID,System.Boolean)">
            <summary>
            <para>The ObpSwapBytesSet instruction allows to swap the bytes.</para>
            <para>This instruction can be used for example in the flash memory (e.g. 29F800) programming in accordance with the endianess of the MCU connected to it.</para>
            </summary>
            <param name="obpID">OBP identifier.</param>
            <param name="swapEnable">Swap flag.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpConnect(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            <para>The ObpTpConnect instruction allows connecting the OBP module outputs test points to interface.</para>
            <para>This instruction has to be called at the beginning of the test program for connecting the OBP module to the device.</para>
            </summary>
            <param name="obpID">OBP identifier.</param>
            <param name="tpList">Test points list. The list of test points has to be terminated by 0.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpDisconnect(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            <para>The ObpTpDisconnect instruction allows disconnecting the OBP module outputs test points to interface.</para>
            <para>At the end of test plan execution the connected test points should be disconnected.</para>
            </summary>
            <param name="obpID">OBP identifier.</param>
            <param name="tpList">Test points list. The list of test points has to be terminated by 0.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpFloatingDetect(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            <para>The ObpTpFloatingDetect instruction allows checking if the specified OBP test points are connected to the UUT.</para>
            <para>If an error occurred, it means that minimum one of the selected test points is not connected to the UUT, the instruction return a value inequal 0, and otherwise a 0 value is returned.</para>
            </summary>
            <param name="obpID">OBP identifier.</param>
            <param name="tpList">Test points list. The list of test points has to be terminated by 0.</param>
            <param name="vRef">Test voltage (-1.25 suggested).</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VREF        -> The Vref parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpLevelRead(Spea.ObpID,System.Int32,Spea.ObpChannelLevel@)">
            <summary>
            <para>The ObpTpLevelRead instruction allows reading the logic level of a test point of OBP module.</para>
            <para>This instruction has been developed for diagnostic purposes, it has not to be used in a testprogram.</para>
            <para>The result of the reading is returned in the address indicated by Level parameter. The returned value depends on threshold set with the ObpTpSensorSet instruction.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tp">Test point whose level will be checked.</param>
            <param name="level">Read logic level.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpLevelSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},System.Double,System.Double)">
            <summary>
            <para>The ObpTpLevelSet instruction allows programming the voltage levels of the OBP module test points.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tpList">Testpoint List.</param>
            <param name="vH">It identifies the voltage value to be associated to high logic level expressed in Volt.</param>
            <param name="vL">It identifies the voltage value to be associated to low logic level expressed in Volt.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VHIGH       -> The Vh parameter is out of range.</para>
            <para>ERR_OBP_VLOW        -> The Vl parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpOutputImpedanceSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},Spea.ObpImpedance)">
            <summary>
            <para>The ObpTpOutputImpedanceSet instruction allows to set the output impedance to use for the selected testpoints.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tpList">Testpoint List. The list of testpoints has to be terminated by 0.</param>
            <param name="impedance">It identifies the impedance to be set.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_IMPEDANCE   -> The Impedance parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpSensorSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            <para>The ObpTpSensorSet instruction allows to program the threshold voltage in order to determine the high or low logic levels of the OBP module test points.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tpList">Testpoints List. The list of testpoints has to be terminated by 0.</param>
            <param name="vTh">It identifies the threshold voltage (in Volts). >5V only on Vpp channels.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VTH         -> The Vth parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpStuckSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},Spea.ObpStuckLevel)">
            <summary>
            <para>The ObpTpStuckSet instruction allows to stuck the selected testpoints to a specified voltage level.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tpList">Testpoints List. The list of testpoints has to be terminated by 0.</param>
            <param name="stkState">It identifies the level the selected testpoint will be stuck to.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_STKSTATE    -> The StkState parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpVectorRead(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.List{Spea.ObpChannelLevel}@)">
            <summary>
            <para>The ObpTpVectorRead instruction allows to read the specified testpoints list logic level.</para>
            <para>The results of the reading are returned in the array indicated in Level parameter.</para>
            <para>The returned values depend on threshold set with ObpChSensorSet instruction.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tpList">Testpoints List. The list of testpoints has to be terminated by 0.</param>
            <param name="level"> Read Logic level.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpVectorWrite(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},Spea.ObpStuckLevel)">
            <summary>
            <para>The ObpTpVectorWrite instruction allows to set a specified logic level for the selected testpoints list.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tpList">Testpoints List. The list of testpoints has to be terminated by 0.</param>
            <param name="level">Testpoints logic level.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpTpVppLevelSet(Spea.ObpID,System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            <para>The ObpChVppLevelSet instruction allows to set the Vpp voltage level. Vpp level is available only on Vpp testpoints.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="tpList">Testpoints List. The list of testpoints has to be terminated by 0.</param>
            <param name="vpp">Vpp value. Minimum is 0.5V.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_VREF        -> The Vpp parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpVerifyData(Spea.ObpID,Spea.DataType,System.Int32,System.Int32)">
            <summary>
            <para>The ObpVerifyData instruction allows to verify the presence of an specific value in an defined address of the device.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for verification.</param>
            <param name="address">Component memory address to be checked.</param>
            <param name="value">It identifies the value to be checked.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpVerifyDataArray(Spea.ObpID,Spea.DataType,System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            <para>The ObpVerifyDataArray instruction verifies a specific array of data starting from a specified device’s memory address.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <param name="address">Address where to start verify data array from.</param>
            <param name="data">It identifies the pointer to the array of data to verify.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpVerifyFile(Spea.ObpID,Spea.DataType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>The ObpVerifyFile instruction executes the verification of the component using the information stored in a file previously loaded by using the ObpLoadDataFile instruction.</para>
            <para>The instruction can verify the entire file in the device, or a part of it. The user can set where the file has to be verified in the device.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <param name="fileId"> identifies the file to be used (specified in the ObpLoadDataFile instruction).</param>
            <param name="startAddress">AIt identifies the device start address for data writing.</param>
            <param name="startPosFile">It identifies the file start address for data writing.</param>
            <param name="length">It is an hexadecimal number that identifies the data length to be verified.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpWaitAsyncAnswer(Spea.ObpID)">
            <summary>
            <para>The ObpWaitAsyncAnswer instruction waits the end of the OBP function executed in Asynchronous mode.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpWriteData(Spea.ObpID,Spea.DataType,System.Int32,System.Int32)">
            <summary>
            <para>The ObpWriteData instruction writes a specific value in a defined address in the device’s memory.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for verification.</param>
            <param name="address">It identifies the memory address for data writing.</param>
            <param name="value">It identifies the value to be written in the memory.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpWriteDataArray(Spea.ObpID,Spea.DataType,System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            <para>The ObpWriteDataArray instruction writes a specific array of data starting from a specified device’s memory address.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <param name="address">It identifies the address where to start writing data array from.</param>
            <param name="data">It identifies the pointer to the array of data to write.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpWriteFile(Spea.ObpID,Spea.DataType,System.Int32,System.Int32,System.Int32,System.Int32,Spea.ObpSkipValues)">
            <summary>
            <para>The ObpWriteFile instruction executes the component programming using the information stored in a file previously loaded using the ObpLoadDataFile instruction.</para>
            <para>The instruction can write the entire file in the device, or a part of it. The user can set where the file has to be written in the device.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <param name="fileId"> identifies the file to be used (specified in the ObpLoadDataFile instruction).</param>
            <param name="startAddress">AIt identifies the device start address for data writing.</param>
            <param name="startPosFile">It identifies the file start address for data writing.</param>
            <param name="length">It is an hexadecimal number that identifies the data length to be written.</param>
            <param name="skipValue">Data to be skipped writing.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpWriteVerifyData(Spea.ObpID,Spea.DataType,System.Int32,System.Int32)">
            <summary>
            <para>The ObpWriteVerifyData instruction writes a specific value in a defined address in the device’s memory and then verify it.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format for component programming.</param>
            <param name="address">It identifies the memory address for data writing.</param>
            <param name="value">It identifies the value to be written in the memory.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpWriteVerifyDataArray(Spea.ObpID,Spea.DataType,System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            <para>The ObpWriteVerifyDataArray instruction writes a specific array of data starting from a specified device’s memory address. Data are then verified.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <param name="address">It identifies the address where to start writing and verifying data array from.</param>
            <param name="data">It identifies the pointer to the array of data to write and verify.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObpWriteVerifyFile(Spea.ObpID,Spea.DataType,System.Int32,System.Int32,System.Int32,System.Int32,Spea.ObpSkipValues)">
            <summary>
            <para>The ObpWriteVerifyFile instruction executes the component programming using the information stored in a file previously loaded using the ObpLoadDataFile instruction.</para>
            <para>The instruction can write the entire file in the device, or a part of it. The user can set where the file has to be written in the device. After the data writing a data verification it is performed.</para>
            </summary>
            <param name="obpID">ObpId.</param>
            <param name="dataType">Data format.</param>
            <param name="fileId">It identifies the file to be used (specified in the ObpLoadDataFile instruction.</param>
            <param name="startAddress">It identifies the device start address for data writing.</param>
            <param name="startPosFile">It identifies the file start address for data writing.</param>
            <param name="length">It is an hexadecimal number that identifies the data length to be written.</param>
            <param name="skipValue">Data to be skipped writing.</param>
            <returns>
            <para>0                   -> The instruction has been successfully executed without errors.</para>
            <para>ERR_OBP_ID          -> The ObpId parameter is not valid.</para>
            <para>ERR_OBP_NOT_PRESENT -> The OBP module is not present.</para>
            <para>ERR_OBP_DATATYPE    -> The DataType parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ObsDatalogTest(System.Int32,System.String,System.String,Spea.TestResult,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>The ObsDatalogTest instruction stores test information into Spea Datalog files.</para>
            <para>The TestNumber, Remark and TestResult parameters must have valid values to store data into the Spea Datalog files.</para>
            <para>The DrawingReference, MeasuredValueStr, ThrLowStr, ThrHighStr and TpListStr parameters are ignored if their value is an empty string (" ").</para>
            <para>The SiteNumber parameter is ignored if the Test program is not a Multi Site one.</para>
            </summary>
            <param name="testnumber">It identifies the number of test.</param>
            <param name="drawRef">It identifies the the name of the component.</param>
            <param name="remark">It identifies the test remark.</param>
            <param name="testResult">It identifies the test result.</param>
            <param name="measuredValue">It identifies the measured value.</param>
            <param name="thrLow">It identifies the low threshold value.</param>
            <param name="thrHigh">It identifies the high threshold value.</param>
            <param name="tpList">It identifies the list of Test points.</param>
            <param name="site">It identifies the reference site number.</param>
        </member>
        <member name="M:Spea.LeoF.OperatorRead(System.String@,System.Int32)">
            <summary>
            <para>The OperatorRead instruction reads the operator name.</para>
            </summary>
            <param name="operatorName">It identifies the operator name (returned by this instruction).</param>
            <param name="maxLength">The maximal length of the <paramref name="operatorName"/>.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the OperatorName parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinAttributeSet(System.Collections.Generic.IEnumerable{Spea.PluLinPorts},Spea.PluLinAttributes,System.Int32)">
            <summary>
            <para>The PluLinAttributeSet instruction allows to set the communication attributes used by the specified list of LIN ports.</para>
            <para>Note: The communication attributes settings have to be performed before the LIN port opening (the instruction has to be used before the PluLinOpen instruction).</para>
            </summary>
            <param name="portIdList">It indentifies the array of LIN port to be set.</param>
            <param name="attributeId">It identifies the type of attribute to be set.</param>
            <param name="value">It identifies the value to be set to the attribute.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_LIN_ATTRIBUTE_ID         ->          The AttributeId parameter is not valid.</para>
            <para>ERR_PLU_LIN_BAUDRATE             ->          The Baudrate parameter is not valid.</para>
            <para>ERR_PLU_LIN_CHECKSUM             ->          The CheckSum parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinClose(System.Collections.Generic.IEnumerable{Spea.PluLinPorts})">
            <summary>
            <para>The PluLinClose instruction allows to close the LIN ports previously opened.</para>
            <para>Note: The instruction is ignored if it is executed on a LIN port already close.</para>
            </summary>
            <param name="portIdList">It indentifies the array of LIN port to be closed.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinConnect(Spea.PluLinPorts,System.Int16,System.Int16)">
            <summary>
            <para>The PluLinConnect instruction allows to associate the LIN port with the couple of channels to be used.</para>
            <para>This instruction does not execute a physically connection of the channels but it creates only a logical association.</para>
            <para>The associations and setting have to be performed using the suitable instructions.</para>
            </summary>
            <param name="portId">It indentifies the LIN port to be associated with the channels.</param>
            <param name="chanTx">It identifies the output channels used for data transmission. This channel is the one connected with the transceiver input.</param>
            <param name="chanRx">It identifies the input channels used for data receiption. This channel is the one connected with the transceiver output.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinDisconnect(Spea.PluLinPorts)">
            <summary>
            <para>The PluLinDisconnect instruction allows to delete the association of the LIN port with the couple of channels performed through the PluLinConnect instruction.</para>
            <para>Note: This instruction execute automatically the closing of the opened LIN ports (PluLinClose instruction).</para>
            </summary>
            <param name="portId">It indentifies the LIN port to be disassociated with the channels.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinDisconnectAll">
            <summary>
            <para>The PluLinDisconnectAll instruction allows to delete the channels associations of all LIN ports.</para>
            <para>Note: This instruction execute automatically the closing of the opened LIN ports (PluLinClose instruction).</para>
            </summary>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinFrameRead(Spea.PluLinPorts,System.Int32@,System.Int32@,System.Collections.Generic.List{System.Byte}@)">
            <summary>
            <para>The PluLinFrameRead instruction allows to read the data received by the PluLinFrameSendReceive instruction execution. The data are read singly from each LIN port.</para>
            <para>This instruction has to be executed after the PluLinFrameSendReceive instruction.</para>
            <para>In order to read several data frames it is required to execure the PluLinFrameRead instruction after each PluLinFrameSendReceive instruction. It is important in order to avoid data loss.</para>
            <para> The PluLinFrameRead instruction can be executed several times consecutively.</para>
            </summary>
            <param name="portId">It indentifies the LIN port to be used.</param>
            <param name="receivedFrameId">It is the identifier of the received frame data.</param>
            <param name="receivedFrameLength">It identifies the length of the received frame data.</param>
            <param name="receivedFrameData">It identifies the array of data to be received.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_LIN_NUMBER               ->          The PortId parameter is not valid.</para>
            <para>LIN_SEND_ECHO_MISSING            ->          Error while sending frame (missing echo of bytes send).</para>
            <para>LIN_SEND_ECHO_ERROR              ->          Error while sending frame (wrong echo of bytes send).</para>
            <para>LIN_RECEIVE_TIMEOUT              ->          Timeout during frame reception.</para>
            <para>LIN_CHECKSUM_ERROR               ->          Wrong checksum of the received frame.</para>
            <para>LIN_FRAME_MISSING                ->          No frame available in the receive buffer (PluFrameSendReceive not executed correctly).</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinFrameSend(System.Collections.Generic.IEnumerable{Spea.PluLinPorts},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Byte},System.Collections.Generic.List{Spea.PluLinSendResult}@)">
            <summary>
            <para>The PluLinFrameSend instruction allows to send a transmition data frame from the indicated LIN port.</para>
            <para>All frame data (including the Header and the Response) are sent from the system LIN port.</para>
            <para>The CheckSum is calculated according to the settings defined with the PluLinAttributeSet instruction.</para>
            <para>The required Inter-frame space has to be inserted by the programmer (for example using the SysWait instruction).</para>
            </summary>
            <param name="portIdList">It indentifies the array of LIN port to be used.</param>
            <param name="frameId">It is the identifier of the frame data to be sent.</param>
            <param name="frameLength">It identifies the length of the frame data to be sent.</param>
            <param name="frameData">It identifies the array of data to be sent.</param>
            <param name="resultList">It identifies the results of each LIN port.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_LIN_FRAME_ID             ->          The FrameId parameter is not valid.</para>
            <para>ERR_PLU_LIN_FRAME_DATA_LEN       ->          The FrameDataLen parameter is not valid.</para>
            <para>FAIL                             ->          The instruction has been executed with errors. Check the ResultsList for detailed information.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinFrameSendReceive(System.Collections.Generic.IEnumerable{Spea.PluLinPorts},System.Int32,System.Int32,System.Collections.Generic.List{Spea.PluLinSendResult}@)">
            <summary>
            <para>The PluLinFrameSend instruction allows to send a transmition data frame from the indicated LIN port.</para>
            <para>All frame data (including the Header and the Response) are sent from the system LIN port.</para>
            <para>The CheckSum is calculated according to the settings defined with the PluLinAttributeSet instruction.</para>
            <para>The required Inter-frame space has to be inserted by the programmer (for example using the SysWait instruction).</para>
            </summary>
            <param name="portIdList">It indentifies the array of LIN port to be used.</param>
            <param name="frameId">It is the identifier of the frame data to be sent.</param>
            <param name="frameReadLength">It identifies the length of the frame data to be received.</param>
            <param name="resultList">It identifies the results of each LIN port.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_LIN_FRAME_ID             ->          The FrameId parameter is not valid.</para>
            <para>ERR_PLU_LIN_FRAME_DATA_LEN       ->          The FrameDataLen parameter is not valid.</para>
            <para>FAIL                             ->          The instruction has been executed with errors. Check the ResultsList for detailed information.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluLinOpen(System.Collections.Generic.IEnumerable{Spea.PluLinPorts})">
            <summary>
            <para>The PluLinOpen instruction allows to open the LIN port previously connected through the PluLinConnect instruction.</para>
            </summary>
            <param name="portIdList">It indentifies the array of LIN port to be opened.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerComAsyncConfig(Spea.PluComPorts,System.Int32,Spea.PluIdleLevel,System.Int16,System.Int16,System.Int32,System.Int32)">
            <summary>
            <para>The PluSerComAsyncConfig instruction configures the operating mode of the specified port. The configuration is possible only if the port is closed.</para>
            </summary>
            <param name="portId">It indentifies the array of LIN port to be opened.</param>
            <param name="baudrate">It identifies the baudrate for the serial communication. (9600-5000000).</param>
            <param name="idleLevel">It identifies the transmission line idle state.</param>
            <param name="chanTx">It identifies the output digital channel used for data transmission.</param>
            <param name="chanRx">It identifies the input digital channel used for data reception.</param>
            <param name="bitSequenceData">It identifies the bit sequence idle data. Valid only if IdleLevel parameter is set to “BIT_SEQUENCE”.</param>
            <param name="bitSequenceQty">It identifies the length of the bit sequence idle data.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_SERCOM_NUMBER            ->          The “PortId” parameter is not valid.</para>
            <para>ERR_PLU_SERCOM_BAUDRATE          ->          The “Baudrate” parameter is not valid.</para>
            <para>ERR_PLU_SERCOM_IDLE_LEVEL        ->          The “IdleLevel” parameter is not valid.</para>
            <para>ERR_PLU_SERCOM_CH_TX             ->          The “ChanTx” parametere is not valid.</para>
            <para>ERR_PLU_SERCOM_CH_RX             ->          The “ChanRx” parameter is not valid.</para>
            <para>ERR_PLU_SERCOM_BIT_SEQUENCE_QTY  ->          The “BitSequenceQty” is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerComClose(System.Collections.Generic.IEnumerable{Spea.PluComPorts})">
            <summary>
            <para>The PluSerComClose instruction closes the specified ports and remove the connection of the associated channels.</para>
            </summary>
            <param name="portIdList">It identifies the null-terminated array of used ports (it must be terminated with 0).</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerComDataReceive(System.Collections.Generic.IEnumerable{Spea.PluComPorts},System.Int32)">
            <summary>
            <para>The PluSerComDataReceive instruction schedule the reception from the specified port (without comparison).</para>
            </summary>
            <param name="portIdList">It identifies the null-terminated array of used ports (it must be terminated with 0).</param>
            <param name="bitQty">It identifies the number of bits scheduled for reception.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_SERCOM_BIT_QTY           ->          The “BitQty” parameter is not valid.</para>
            <para>FAIL                             ->          The instruction has been executed with FAIL result.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerComDataSend(System.Collections.Generic.IEnumerable{Spea.PluComPorts},System.String,System.Int32)">
            <summary>
            <para>The PluSerComDataSend instruction sends a buffer message to the specified port.</para>
            <para>The data of each single byte are serialized MSB-first and they are aligned to the least significant bit.</para>
            <para>The data will be sent when the PluSerComRun instructions is executed.</para>
            <para>This instruction requires that the ports has been opened previously using the PluSerComOpen instruction.</para>
            </summary>
            <param name="portIdList">It identifies the null-terminated array of used ports (it must be terminated with 0).</param>
            <param name="data">It identifies the buffer of bits scheduled for transmission.</param>
            <param name="bitQty">It identifies the number of bits scheduled for transmission.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_SERCOM_BIT_QTY           ->          The “BitQty” parameter is not valid.</para>
            <para>FAIL                             ->          The instruction has been executed with FAIL result.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerComOpen(System.Collections.Generic.IEnumerable{Spea.PluComPorts})">
            <summary>
            <para>The PluSerComOpen instruction sets the communication attributes used by the specified list of ports.</para>
            <para>When this instruction is executed, the channels of the specified port are enabled and set in the indicated idle status (level or bit sequence).</para>
            <para>Note: This instruction requires that the ports has been configured previously using the PluSerComAsyncConfig instruction.</para>
            </summary>
            <param name="portIdList">It identifies the null-terminated array of used ports (it must be terminated with 0).</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerComRead(Spea.PluComPorts,System.Int32,System.Collections.Generic.List{System.Byte}@,System.Int32@)">
            <summary>
            <para>The PluSerComRead instruction reads the data received by the PluSerComRun instruction.</para>
            <para>The data are read in the same order (for number of bit) of the programmed receiving.</para>
            <para>The data of each single byte are serialized MSB-first and they are aligned to the least significant bit (same format of the <see cref="M:Spea.LeoF.PluSerComDataSend(System.Collections.Generic.IEnumerable{Spea.PluComPorts},System.String,System.Int32)"/> instruction).</para>
            </summary>
            <param name="portId">It identifies the port to read.</param>
            <param name="bitDataLength">It identifies the number of bits to be read.</param>
            <param name="data">It identifies the buffer that will contains the read data (filled by the operation). </param>
            <param name="readBitDataLength">It identifies the number of bits read by the operation.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_SERCOM_NUMBER            ->          The “PortId” parameter is not valid.</para>
            <para>ERR_PLU_SERCOM_BIT_DATA_LEN      ->          The “BitDataLen” parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerComRun(System.Collections.Generic.IEnumerable{Spea.PluComPorts},System.Int32,System.Int32,System.Int32,Spea.TestResult@)">
            <summary>
            <para>The PluSerComRun instruction enables the programmed data transmission/receiving and waits the end within the timeout. It allows to specify the receiving start condition to be used.</para>
            </summary>
            <param name="portIdList">It identifies the null-terminated array of used ports (it must be terminated with 0).</param>
            <param name="rxStartConditionData">It identifies the number of bits to be read.</param>
            <param name="rxStartConditionBitQty">It identifies the buffer that will contains the read data (filled by the operation). </param>
            <param name="timeOut">It identifies the number of bits read by the operation.</param>
            <param name="result">It identifies the operation result for each port.</param>
            <returns>
            <para>0                                                    ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PLU_SERCOM_RX_START_CONDITION_BIT_QTY            ->          The “RxStartConditionBitQty” parameter is not valid.</para>
            <para>ERR_PLU_SERCOM_TIMEOUT                               ->          The “Timeout” parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerialPortChAssign(Spea.PluASCPort,System.Int16,System.Int16)">
            <summary>
            <para>The PluSerialPortChAssign instruction allows to associate the ASC port with the couple of channels to be used. </para>
            <para>This instruction does not execute a physically connection of the channels but it creates only a logical association.</para>
            <para>The associations and setting have to be performed using the suitable instrunctions.</para>
            </summary>
            <param name="portId">It indentifies the ASC port to be associated with the channels.</param>
            <param name="chanTx">It identifies the output channels used for data transmission.</param>
            <param name="chanRx">It identifies the input channels used for data receiption.</param>
            <returns>
            <para>0                                                    ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerialPortClose(System.Collections.Generic.IEnumerable{Spea.PluASCPort})">
            <summary>
            <para>The PluSerialPortClose instruction allows to close the ASC ports previously opened and remove the connection of the associated channels.</para>
            <para>Note: The instruction is ignored if it is executed on a ASC port already close.</para>
            </summary>
            <param name="portIdList">It indentifies the array of ASC port to be closed.</param>
            <returns>
            <para>0                                                    ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerialPortOpen(System.Collections.Generic.IEnumerable{Spea.PluASCPort},System.Int32,System.Int32,Spea.PluSerialParityBit,Spea.PluSerialStopBits)">
            <summary>
            <para>The PluSerialPortOpen instruction allows to set the communication attributes used by the specified list of ASC ports.</para>
            </summary>
            <param name="portIdList">It indentifies the array of ASC port to be closed.</param>
            <param name="baudRate">It identifies the baudrate to be set.</param>
            <param name="dataBits">It identifies the data bit number.</param>
            <param name="parity">It identifies the parity bit that allows to check the received data correctness.</param>
            <param name="stopBits">It identifies the “stop” time. It can have several standard lengths (one or two time of bit).</param>
            <returns>
            <para>0                                                    ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerialPortReceive(Spea.PluASCPort,System.String@,System.Int32,System.Int32,System.Int32@,System.Int32)">
            <summary>
            <para>The PluSerialPortReceive instruction allows to receive a buffer data from the specified ASC port.</para>
            <para>Note: This instruction requires that the ASC ports has been opened previously using the PluSerialPortOpen instruction.</para>
            </summary>
            <param name="portId">It indentifies the ASC port to be used.</param>
            <param name="data">It identifies the received buffer data.</param>
            <param name="maxDataLen">It identifies the maximum number of data to be received (512 characters max.). When the specified number of character is read from the port, the data reading is stopped.</param>
            <param name="endChar">It identifies the data ending character. If this parameter is specified, it allows to stop the data reading when they are received. The ending character is also present in the received buffer data. Note: The value -1 allows to ignore the parameter.</param>
            <param name="readDataLen">It identifies the “stop” time. It can have several standard lengths (one or two time of bit).</param>
            <param name="timeOut">It identifies the data timeout reading expressed in milliseconds (10s max.).</param>
            <returns>
            <para>0                   ->  The instruction has been successfully executed without errors.</para>
            <para>ASC_TIMEOUT         ->  The receive is not completed within the maximum specified time.</para>
            <para>ASC_OVERRUN_ERROR   ->  Overrun error occurs on serial port.</para>
            <para>ASC_FRAME_ERROR     ->  Frame error occurs during data receive (at least on one character).</para>
            <para>ASC_PARITY_ERROR    ->  Parity error occurs during data receive (at least on one character).</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PluSerialPortSend(System.Collections.Generic.IEnumerable{Spea.PluASCPort},System.String,System.Int32,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            <para>The PluSerialPortSend instruction allows to send a buffer message to the specified ASC port.</para>
            <para>Note: This instruction requires that the ASC ports has been opened previously using the PluSerialPortOpen instruction.</para>
            </summary>
            <param name="portIdList">It indentifies the array of ASC port to be closed.</param>
            <param name="buffer">It identifies the buffer data to be sent.</param>
            <param name="length">It identifies the number of data to be sent (512 characters max.).</param>
            <param name="resultList">This parameter is not documented.</param>
            <returns>
            <para>0                                                    ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PmxConnect(Spea.PmxInstrId,Spea.PmxSection,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The PmxConnect instruction connects the specified section of the Power Matrix module.</para>
            </summary>
            <param name="instrId">It identifies the Power Matrix module to be connected.</param>
            <param name="section">It identifies the section of the Power Matrix module.</param>
            <param name="channel">It identifies the channels list of the Power Matrix module to be connected.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PMX_NOT_PRESENT       ->          The Power Matrix module is not present.</para>
            <para>ERR_PMX_SECTION           ->          The section parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PmxDisconnect(Spea.PmxInstrId,Spea.PmxSection,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            <para>The PmxDisconnect instruction disconnects the specified section of the Power Matrix module.</para>
            </summary>
            <param name="instrId">It identifies the Power Matrix module to be disconnected.</param>
            <param name="section">It identifies the section of the Power Matrix module.</param>
            <param name="channel">It identifies the channels list of the Power Matrix module to be disconnected.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PMX_NOT_PRESENT       ->          The Power Matrix module is not present.</para>
            <para>ERR_PMX_SECTION           ->          The section parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PmxDisconnectAll(Spea.PmxInstrId)">
            <summary>
            <para>The PmxDisconnect instruction disconnects all the section of the Power Matrix module.</para>
            </summary>
            <param name="instrId">It identifies the Power Matrix module.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PMX_NOT_PRESENT       ->          The Power Matrix module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuConnectUabusBmu(Spea.PPS,Spea.Uabus1To4,Spea.Uabus5To8,Spea.Uabus1To4,Spea.Uabus5To8,Spea.Uabus1To4,Spea.Uabus5To8)">
            <summary>
            <para>The PpsuConnectUabusBmu instruction connects the interface pins of the programmable power supply to the UABUS rows of the YABMU board.</para>
            </summary>
            <param name="instrId">It identifies the programmable power supply to be connected.</param>
            <param name="rowHotP">It identifies the UABUS row to connect with the 1st positive pole of the programmable power supply.</param>
            <param name="rowHotK">It identifies the UABUS row to connect with the 2nd positive pole of the programmable power supply.</param>
            <param name="rowColdP">It identifies the UABUS row to connect with the 1st negative pole of the programmable power supply.</param>
            <param name="rowColdK">It identifies the UABUS row to connect with the 2nd negative pole of the programmable power supply.</param>
            <param name="rowHotS">It identifies the UABUS row to connect with the sense positive pole of the programmable power supply.</param>
            <param name="rowColdS">It identifies the UABUS row to connect with the sense negative pole of the programmable power supply.</param>
            <returns>? not documented.</returns>
        </member>
        <member name="M:Spea.LeoF.PpsuOff(Spea.PPS)">
            <summary>
            <para>The PpsuOff instruction allows to execute the programmable power supplies power off -> disconnection sequence.</para>
            </summary>
            <param name="instrId">Programmable power supply identifier.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuOn(Spea.PPS,System.Double,System.Double)">
            <summary>
            <para>The PpsuOn instruction allows to execute the programmable power supplies connection -> power on sequence.</para>
            </summary>
            <param name="instrId">Programmable power supply identifier.</param>
            <param name="vValue">It identifies the output voltage value expressed in Volt (+5V/+24V).</param>
            <param name="iValue">It identifies the output current value expressed in Ampères (+10A/+1.5A).</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            <para>ERR_PPSU_V_VALUE          ->          The Vvalue parameter is out of range.</para>
            <para>ERR_PPSU_I_VALUE          ->          The Ivalue parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuReadbackI(Spea.PPS,System.Double@)">
            <summary>
            <para>The PpsuReadbackI instruction allows to read the readback current output of the programmable power supply.</para>
            <para>The average execution time of this instruction is 1.8 ms.</para>
            </summary>
            <param name="instrId">It identifies the programmable power supply to which read the current readback.</param>
            <param name="value">Read value.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuReadbackV(Spea.PPS,System.Double@)">
            <summary>
            <para>The PpsuReadbackV instruction allows to read the readback voltage output of the programmable power supply.</para>
            <para>The average execution time of this instruction is 1.8 ms.</para>
            </summary>
            <param name="instrId">It identifies the programmable power supply to which read the voltage readback.</param>
            <param name="value">Read value.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuSourceConnectInterf(Spea.PPS)">
            <summary>
            <para>The PpsuSourceConnectInterf instruction allows the connection of the programmable power supplies with the System Interface.</para>
            <para>In order to execute this instruction, the instrument must be disabled.</para>
            <para>The execution time of this instruction is 32 ms and includes the relays switching time (10 ms).</para>
            </summary>
            <param name="instrId">It identifies the programmable power supply to be connected on the System Interface.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuSourceDisable(Spea.PPS)">
            <summary>
            <para>The PpsuSourceDisable instruction disables the specified programmable power supply V/I Source section.</para>
            <para>Disabling must be executed before the instrument disconnection.</para>
            <para> The average execution time of this instruction is 1.2 ms.</para>
            </summary>
            <param name="instrId">It identifies the section of the programmable power supply V/I Source.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuSourceDisconnectInterf(Spea.PPS)">
            <summary>
            <para>The PpsuSourceDisable instruction disables the specified programmable power supply V/I Source section.</para>
            <para>In order to execute this instruction, the instrument must be disabled.</para>
            <para>The execution time of this instruction is 24 ms and includes the relay switching time (10 ms).</para>
            </summary>
            <param name="instrId">It identifies the programmable power supply to be disconnected from the System Interface.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuSourceEnable(Spea.PPS)">
            <summary>
            <para>The PpsuSourceEnable instruction enables the specified programmable power supply V/I Source section.</para>
            <para>The programming and the connection must be executed before enabling the instrument.</para>
            <para> The execution time of this instruction includes the relays switching time.In fact, in order to prevent connection relays damages, the instrument must be connected and switched on in two stages:</para>
            <para>First test: Connects and programs the instrument (rif.PpsuSourceSet and PpsuSourceConnectInterf instructions).</para>
            <para>Second test: Switches on the instrument(rif.PpsuSourceEnable instruction).</para>
            <para>The average execution time of this instruction is 1.2 ms.</para>
            </summary>
            <param name="instrId">It identifies the section of the programmable power supply V/I Source.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PpsuSourceSet(Spea.PPS,System.Double,System.Double)">
            <summary>
            <para>The PpsuSourceSet instruction allows to connect and to program the specified programmable power supply V/I Source section.</para>
            </summary>
            <param name="instrId">Programmable power supply identifier.</param>
            <param name="vValue">It identifies the output voltage value expressed in Volt (+5V/+24V).</param>
            <param name="iValue">It identifies the output current value expressed in Ampères (+10A/+1.5A).</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PPSU_NOT_PRESENT      ->          The PPSU module is not present.</para>
            <para>ERR_PPSU_V_VALUE          ->          The Vvalue parameter is out of range.</para>
            <para>ERR_PPSU_I_VALUE          ->          The Ivalue parameter is out of range.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbAChInConnectUabus(Spea.Probes,Spea.Uabus1To4)">
            <summary>
            <para>The PrbAChInConnectUabus instruction connects the measurement active channels to the internal bus of YAPROCO module.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="row">It identifies the row to be used.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbAChInDisconnectUabus(Spea.Probes,Spea.Uabus1To4)">
            <summary>
            <para>The PrbAChInDisconnectUabus instruction disconnects the measurement active channels from the internal bus of YAPROCO module.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="row">It identifies the row to be used.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbAChInGain(Spea.Probes,Spea.ProbeInGain)">
            <summary>
            <para>The PrbAChInGain instruction sets the gain of the measurement active channel.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="gain">It identifies the measurement gain to set.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbAChInMeasType(Spea.Probes,Spea.ProbeMType)">
            <summary>
            <para>The PrbAChInMeasType instruction sets the current/voltage measure to be performed with the input active channel.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="measureType">It identifies the measurement type to perform.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbAChOutConnectUabus(Spea.Probes,Spea.Uabus1To4)">
            <summary>
            <para>The PrbAChOutConnectUabus instruction connects the active channel to the internal bus of the YAPROCO module.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="row">It identifies the row to be used.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbAChOutDisconnectUabus(Spea.Probes,Spea.Uabus1To4)">
            <summary>
            <para>The PrbAChOutDisconnectUabus instruction disconnects the active channels from the internal bus of YAPROCO module.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="row">It identifies the row to be used.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbAChOutGain(Spea.Probes,Spea.ProbeOutGain)">
            <summary>
            <para>The PrbAChOutGain instruction sets the gain of the output active channel.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="gain">It identifies the measurement gain to set.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbChConnectInterf(Spea.ProbeGroups)">
            <summary>
            <para>The PrbChConnectInterf instruction allows to connect all channels of scanner 1 to the test interface (system connector interface).</para>
            </summary>
            <param name="probeGroup">It identifies the probegroup.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_UABUS     ->          The ProbeGroup parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbChConnectInternal(Spea.ProbeGroups)">
            <summary>
            <para>The PrbChConnectInternal instruction allows to connect the channels of the scanner 1 to the probes.</para>
            </summary>
            <param name="probeGroup">It identifies the probegroup.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_UABUS     ->          The ProbeGroup parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbChConnectUabus(Spea.Probes,Spea.ProbeRows,Spea.ProbeChannel)">
            <summary>
            <para>The PrbChConnectUabus instruction allows to connect the direct analog channels to the internal bus of YAPROCO module.</para>
            <para>Note: It is possible to connect the odd channel to ROW1÷4 only and the even channel to the ROW5÷8 only.</para>
            </summary>
            <param name="probeId">It identifies the probe to program.</param>
            <param name="probeRow">Probe row.</param>
            <param name="probeChan">Probe channel.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            <para>ERR_PROCO_PROBE_CHAN      ->          The ProbeChan parameter is not valid.</para>
            <para>ERR_PROCO_PROBE_ROW       ->          The ProbeRow parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbChDisconnectUabus(Spea.Probes,Spea.ProbeRows,Spea.ProbeChannel)">
            <summary>
            <para>The PrbChDisconnectUabus instruction allows to disconnect the direct analog channels from the internal bus of YAPROCO module.</para>
            <para>Note: It is possible to connect the odd channel to ROW1÷4 only and the even channel to the ROW5÷8 only.</para>
            </summary>
            <param name="probeId">It identifies the probe to program.</param>
            <param name="probeRow">Probe row.</param>
            <param name="probeChan">Probe channel.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            <para>ERR_PROCO_PROBE_CHAN      ->          The ProbeChan parameter is not valid.</para>
            <para>ERR_PROCO_PROBE_ROW       ->          The ProbeRow parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbConnectUabusAbus(Spea.ProbeGroups)">
            <summary>
            <para>The PrbConnectUabusAbus instruction allows to connect the analog bus of YAPROCO module to the System ABus.</para>
            </summary>
            <param name="probeGroup">It identifies the probegroup.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_UABUS     ->          The ProbeGroup parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbCurrScaleSet(Spea.Probes,Spea.ProbeCurrScale)">
            <summary>
            <para>The PrbCurrScaleSet instruction sets the current scale of the specified probe.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="scale">It identifies the current scale.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDChConnect(Spea.Probes)">
            <summary>
            <para>The PrbDChConnect instruction allows to connect the digital channel to the Probe.</para>
            <para>The digital channel connected to the probe allows to make on board programming through the probes.</para>
            <para>The default output impedance of the probe, connected to the digital channel, is 50Ω.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDChDisconnect(Spea.Probes)">
            <summary>
            <para>The PrbDChConnect instruction allows to disconnect the digital channel from the Probe.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDChFloTest(Spea.Probes,Spea.TestplanResults@)">
            <summary>
            <para>The PrbDChFloTest instruction allows to execute the floating test on the specified probe.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="probeResult">It identifies the forced logic level.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDChImpSet(Spea.Probes,Spea.ProbeImpedance)">
            <summary>
            <para>The PrbDChImpSet instruction allows to set the impedance output value of digital channel connected to the specified probe.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="impedance">Impedance output value (Ω). </param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            <para>ERR_PROCO_PROBE_OUT_IMP   ->          The ProbeOutImp parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDChLevelSet(System.Double)">
            <summary>
            <para>The PrbDChLevelSet instruction allows to set the voltage value “H” of all connected digital channels.</para>
            </summary>
            <param name="probeVh">VH Voltage value setting.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_VH        ->          The ProbeVh parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDChSensorSet(System.Double)">
            <summary>
            <para>The PrbDChSensorSet instruction allows to set the threshold voltage value “H” and “L” of all digital sensors connected.</para>
            </summary>
            <param name="probeVth">Vth Voltage value setting.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_VTH       ->          The ProbeVth parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDChVppLevelSet(System.Double)">
            <summary>
            <para>The PrbDChVppLevelSet instruction allows to set the “Super Voltage” of all connected digital channels. Eg. It is required to set in programming mode the PIC device.</para>
            </summary>
            <param name="probeVhh">Vhh Voltage value setting (0-14.0).</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_VHH       ->          The ProbeVhh parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbDisconnectUabusAbus(Spea.ProbeGroups)">
            <summary>
            <para>The PrbDisconnectUabusAbus instruction allows to disconnect the analog bus of YAPROCO module from the System ABus.</para>
            </summary>
            <param name="probeGroup">Probegroup to be disconnected.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_UABUS     ->          The ProbeGroup parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbFreqDivSet(Spea.Probes,System.Int32)">
            <summary>
            <para>The PrbFreqDivSet instruction enables and sets the frequency divider.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="div">Frequency dividers. (1x(2^n)) n[0-15].</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbGndConnect(Spea.Probes)">
            <summary>
            <para>The PrbGndConnect instruction allows to connect the Probe to ground.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbGndDisconnect(Spea.Probes)">
            <summary>
            <para>The PrbGndDisconnect instruction allows to disconnect the Probe from ground.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbRlcmConnect(Spea.Probes,Spea.Probes)">
            <summary>
            <para>The PrbRlcConnect instruction connects the probe to perform the RLC measurement.</para>
            </summary>
            <param name="hotProbe">It identifies the force probe to program.</param>
            <param name="coldProbe">It identifies the measurement probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbRlcmDisonnect">
            <summary>
            <para>The PrbRlcDisconnect instruction disconnects the probes used to perform the RLC measurement.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbRlcmMeas(Spea.ProbeRlcMeasType,Spea.ProbeRlcCirciutType,System.Double@)">
            <summary>
            <para>The PrbRlcmMeas instruction performs the impedance measurement.</para>
            </summary>
            <param name="measType">It identifies the measurement type.</param>
            <param name="circiutType">It identifies the circuit type.</param>
            <param name="measValue">It identifies the measured value.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbRlcmScaleSet(Spea.ProbeRlcCurrentScale)">
            <summary>
            <para>The PrbRlcScaleSet instruction sets the current scale of the specified probe.</para>
            </summary>
            <param name="scale">It identifies the current scale.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbShConnect(Spea.Probes)">
            <summary>
            <para>The PrbshConnect instruction allows to connect the measurement cable shield to ground.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_PROCO_PROBE_ID        ->          The ProbeId parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbShDisconnect(Spea.Probes)">
            <summary>
            <para>The PrbshDisconnect instruction allows to disconnect the measurement cable shield from ground.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.PrbUabusModeSet(Spea.ProbeGroups,Spea.AbusMode)">
            <summary>
            <para>The PrbUabusModeSet instruction sets the analogue bus of the YAPROCO module to 4 or 8 rows.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="mode">It identifies the operative mode to be set.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeAutomaticMoving(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.List{Spea.ProbePositioningState}@)">
            <summary>
            <para>The ProbeAutomaticMoving instruction positions up to eight probes to a listed test points taking count any probe position conflict.</para>
            </summary>
            <param name="tpList">It identifies the test point list to be assigned to the probes terminated with 0.</param>
            <param name="assignedProbeList">It returns the list of the used probes for each test point of the list.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeClearAbus">
            <summary>
            <para>The ProbeClearABUS instruction disconnect all the probes and YAPROCO from the Abus lines.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeDigitalDriverSet(Spea.Probes,Spea.ProbeLogicLevel,Spea.ProbeImpedance)">
            <summary>
            <para>The ProbeDigitalDriverSet instruction connects the probe and force a digital logic level with the probes.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="logicLevel">It identifies the forced logic level.</param>
            <param name="outImp">It identifies the output impedance.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeDigitalDSClear">
            <summary>
            <para>The ProbeDigitalDSClear instruction disconnects all probes from the digital driver/sensor and sets default values in the power supply.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeDigitalDSReset(Spea.Probes)">
            <summary>
            <para>The ProbeDigitalDSReset instruction disconnects the digital driver/sensor from the probe and programs the default impedance value (50Ω).</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeDigitalDSSet(System.Double,System.Double,System.Double)">
            <summary>
            <para>The ProbeDigitalDSSet instruction initializes and configures the digital driver.</para>
            </summary>
            <param name="vH">It identifies the forcing high lelvel value.</param>
            <param name="vHH">It identifies the forcing high level value for the Vpp.</param>
            <param name="vTh">It identifies the voltage threshold for digital sensor.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeDigitalSensorRead(Spea.Probes,Spea.ProbeLogicLevel@)">
            <summary>
            <para>The ProbeDigitalSensorRead instruction reads a digital logic level with the probes. The instruction connects the probe and put in three-state the digital channel.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="logicLevel">It identifies the returned logic level.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeDisconnectAbus(Spea.Probes,Spea.Abus)">
            <summary>
            <para>The ProbeDisconnectAbus instruction disconnects the probe from the specified ABUS line.</para>
            </summary>
            <param name="probe">It identifies the probe to program.</param>
            <param name="abusLine">It identifies the ABUS line for the disconnection of the specified probe.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProbeMoveV2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>The ProbeMoveV2 instruction moves the eight probes to the coordinates of the specified test points or performs special movements.</para>
            <para>If no testpoint should be assigned you can use (int)ProbeAction.X.</para>
            </summary>
            <param name="tpPrb1">Test point for the Probe 1.</param>
            <param name="tpPrb2">Test point for the Probe 2.</param>
            <param name="tpPrb3">Test point for the Probe 3.</param>
            <param name="tpPrb4">Test point for the Probe 4.</param>
            <param name="tpPrb5">Test point for the Probe 5.</param>
            <param name="tpPrb6">Test point for the Probe 6.</param>
            <param name="tpPrb7">Test point for the Probe 7.</param>
            <param name="tpPrb8">Test point for the Probe 8.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProductRead(System.String@,System.Int32)">
            <summary>
            <para>The ProductRead instruction reads the product name.</para>
            </summary>
            <param name="productName">Product name identifier read out.</param>
            <param name="maxLength">The maximal length of the <paramref name="productName"/>.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the ProductName parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProductRead(System.String)">
            <summary>
            <para>The ProductWrite instruction writes the product name.</para>
            </summary>
            <param name="productName">Product name identifier.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProgrammingCheckDisable">
            <summary>
            <para>The ProgrammingCheckDisable instruction disables the programming checks during the functional test program execution.</para>
            <para>The use of this instruction is suggested only for expert programmers.</para>
            </summary>
            <returns>
            <para>0       ->   No error present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ProgrammingCheckEnable">
            <summary>
            <para>The ProgrammingCheckEnable instruction, after using ProgrammingCheckDisable instruction, allows to enable the programming checks during the functional test program execution.</para>
            <para>TThe programming checks are enabled by default.</para>
            </summary>
            <returns>
            <para>0       ->   No error present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ReadAcGenDvm(Spea.InstrAcGen,Spea.AcGenMeasType,System.Double@)">
            <summary>
            <para>The ReadAcGenDvm instruction returns the possible values read from the AC Generator module.</para>
            </summary>
            <param name="instrId">It identifies the AC Generator module.</param>
            <param name="type">It identifies the type of value to read from the AC Generator module.</param>
            <param name="value">It returns the read value.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_ACGEN_NOT_PRESENT     ->          The AC Generator module is not present.</para>
            <para>ERR_ACGEN_TYPE            ->          The type parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ReadAnlTaskLabelMeas(System.String,System.String,System.String,System.Collections.Generic.List{Spea.TTestMeas}@,System.Int32,System.Int32@)">
            <summary>
            <para>This instruction returns the storing execution of the analog task measurement by specifying the starting and ending task labels.</para>
            <para><see cref="M:Spea.LeoF.AnlTaskMeasStoreEnable"/> should be called before using this function.</para>
            <para>This function is not working in tests. It throws an <see cref="T:System.NullReferenceException"/> or a <see cref="T:System.StackOverflowException"/> depending on the number of tests that are required.</para>
            </summary>
            <param name="testPlan">It identifies the testplan name (usually an empty string). If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected.</param>
            <param name="startLabel">It identifies the start task label in the testplan where the measurement are returned.</param>
            <param name="endLabel">It identifies the end task label in the testplan where the measurement are returned.</param>
            <param name="testMeasArray">
            <para> It identifies the returned values of the analog task measurement.</para>
            <para> In details this structure is composed by the following items:</para>
            <para> typedef struct {.</para>
            <para> long TprjId;            -> Test project identifier.</para>
            <para> long TplanId;           -> Testplan identifier.</para>
            <para> long Site;              -> Site number.</para>
            <para> char TaskName[32];      -> Task name.</para>
            <para> long TaskNumber;        -> Task number.</para>
            <para> long TestNumber;        -> Test number in the task.</para>
            <para> long UniqueTestId;      -> Unique test identifier.</para>
            <para> char TestRemark[128];   -> Test remark.</para>
            <para> long TestResult;        -> Test result.</para>
            <para> double MeasuredValue;   -> Measured value.</para>
            <para> double HighThreshold;   -> High threshold.</para>
            <para> double LowThreshold;    -> Low threshold.</para>
            <para> char Unit[8];           -> Measure unit ("ohm", "V", …).</para>
            <para>  }.</para>
            <para> TTestMeas.</para>
            </param>
            <param name="arraysize">It identifies the number of elements TestMeasArray structures array.</param>
            <param name="storedMeasSize">It identifies the number of elements stored in the TestMeasArray structures array.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ReadAnlTaskMeas(System.String,System.String,System.String,System.Collections.Generic.List{Spea.TTestMeas}@,System.Int32,System.Int32@)">
            <summary>
            <para>This instruction returns the storing execution of the analog task measurement by specifying the starting and ending task labels.</para>
            <para><see cref="M:Spea.LeoF.AnlTaskMeasStoreEnable"/> should be called before using this function.</para>
            <para>This function is not working in tests. It throws an <see cref="T:System.NullReferenceException"/> or a <see cref="T:System.StackOverflowException"/> depending on the number of tests that are required.</para>
            </summary>
            <param name="testPlan">It identifies the testplan name. If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected.</param>
            <param name="startTaskName">It identifies the start task name in the testplan where the measurement are returned.</param>
            <param name="endTaskName">It identifies the end task name in the testplan where the measurement are returned.</param>
            <param name="testMeasArray">
            <para> It identifies the returned values of the analog task measurement.</para>
            <para> In details this structure is composed by the following items:</para>
            <para> typedef struct {.</para>
            <para> long TprjId;            -> Test project identifier.</para>
            <para> long TplanId;           -> Testplan identifier.</para>
            <para> long Site;              -> Site number.</para>
            <para> char TaskName[32];      -> Task name.</para>
            <para> long TaskNumber;        -> Task number.</para>
            <para> long TestNumber;        -> Test number in the task.</para>
            <para> long UniqueTestId;      -> Unique test identifier.</para>
            <para> char TestRemark[128];   -> Test remark.</para>
            <para> long TestResult;        -> Test result.</para>
            <para> double MeasuredValue;   -> Measured value.</para>
            <para> double HighThreshold;   -> High threshold.</para>
            <para> double LowThreshold;    -> Low threshold.</para>
            <para> char Unit[8];           -> Measure unit ("ohm", "V", …).</para>
            <para>  }.</para>
            <para> TTestMeas.</para>
            </param>
            <param name="arraysize">It identifies the number of elements TestMeasArray structures array.</param>
            <param name="storedMeasSize">It identifies the number of elements stored in the TestMeasArray structures array.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ReadDcALoadDvm(Spea.DCALoadInstr,Spea.DcActiveLoadMeasType,System.Double@)">
            <summary>
            <para>The ReadDcALoadDvm instruction selects the current, voltage, ripple and power measurements on load.</para>
            </summary>
            <param name="instrId">It identifies the DC Active Load module to be set.</param>
            <param name="type">It identifies the type of measurement.</param>
            <param name="value">It returns the read value.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_DCALOAD_NOT_PRESENT   ->          The DC Active Load module is not present.</para>
            <para>ERR_DCALOAD_READ_TYPE     ->          The Type parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ReadDcGenDvm(Spea.DcGenInstrId,Spea.DcGenMeasType,System.Double@)">
            <summary>
            <para>The ReadDcGenDvm instruction returns the possible values read from the DC Generator module.</para>
            </summary>
            <param name="instrId">It identifies the DC Generator module.</param>
            <param name="type">It identifies the type of measurement.</param>
            <param name="value">It returns the read value.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_DCGEN_NOT_PRESENT     ->          The DC Generator module is not present.</para>
            <para>ERR_DCGEN_TYPE            ->          The type parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ReceiverDown">
            <summary>
            <para>The ReceiverDown instruction allows to configure the receiver position. It moves the receiver is in Down position.</para>
            </summary>
        </member>
        <member name="M:Spea.LeoF.ReceiverMiddle">
            <summary>
            <para>The ReceiverMiddle instruction allows to configure the receiver position. It moves the receiver is in Middle position.</para>
            </summary>
        </member>
        <member name="M:Spea.LeoF.ReceiverUp">
            <summary>
            <para>The ReceiverUp instruction allows to configure the receiver position. It moves the receiver is in Up position.</para>
            </summary>
        </member>
        <member name="M:Spea.LeoF.RunA(System.Int32)">
            <summary>
            <para>The RunA instruction executes an analog test. It starts the analog timing and waits for the end of the test.</para>
            <para>If it has been decided to connect timing outputs to an external source (refer to the AnlTimingOutSourceSet instruction),. </para>
            <para>RunA instruction, even if properly operating, has no effect on the system because the timing outputs are connected elsewhere.</para>
            </summary>
            <param name="testId">Id of the analogue test to run.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT       ->          The AUX module is not present.</para>
            <para>ERR_INV_RELAY_MODE        ->          Invalid Relay Mode.</para>
            <para>ERR_INV_RELAY_TIME        ->          Invalid Relay Time.</para>
            <para>ERR_RUNA_TIMEOUT          ->          RunA Timeout error.</para>
            <para>ERR_RUNA_TIMING_PROG      ->          RunA Timing programming error.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.RunAIct(System.String,System.Int32,System.Int32)">
            <summary>
            <para>The RunAIct instruction executes the Analogue Test Plan by specifying the starting and ending test numbers.</para>
            </summary>
            <param name="testPlan">It identifies the Test Plan name to be executed. If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected. </param>
            <param name="startTest">It identifies the test number to start the Analogue Test Plan execution. -1 = start at beginning of testplan.</param>
            <param name="endTest">It identifies the test number to end the Analogue Test Plan execution. -1 = end at end of testplan.</param>
            <returns>
            <para>TPRJ_RESULT_PASS              ->          The Analogue Test Plan has been executed with PASS result.</para>
            <para>TPRJ_RESULT_FAIL              ->          The Analogue Test Plan has been executed with FAIL result.</para>
            <para>RP3ERR_TPRJ_CANNOT_RUN        ->          The Analogue Test Plan cannot be run.</para>
            <para>RP3ERR_ANL_TPLAN_NOT_FOUND    ->          The Analogue Test Plan was not found.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.RunAnlTask(System.String,System.String,System.String)">
            <summary>
            <para>The RunAnlTask instruction executes the Analogue Test Plan by specifying the starting and ending task names.</para>
            </summary>
            <param name="testPlan">It identifies the Test Plan name to be executed. If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected. </param>
            <param name="startTask">It identifies the task name to start the Analogue Test Plan execution. " " = start at beginning of testplan.</param>
            <param name="endTask">It identifies the task name to end the Analogue Test Plan execution. " " = end at end of testplan.</param>
            <returns>
            <para>TPRJ_RESULT_PASS              ->          The Analogue Test Plan has been executed with PASS result.</para>
            <para>TPRJ_RESULT_FAIL              ->          The Analogue Test Plan has been executed with FAIL result.</para>
            <para>RP3ERR_TPRJ_CANNOT_RUN        ->          The Analogue Test Plan cannot be run.</para>
            <para>RP3ERR_ANL_INV_TASK_NAME      ->          The task name is not valid.</para>
            <para>RP3ERR_ANL_TPLAN_NOT_FOUND    ->          The Analogue Test Plan was not found.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.RunAnlTaskLabel(System.String,System.String,System.String)">
            <summary>
            <para>The RunAnlTaskLabel instruction executes the Analogue Test Plan by specifying the starting and ending task labels.</para>
            </summary>
            <param name="testPlan">It identifies the Test Plan name to be executed. If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected. </param>
            <param name="startTaskLabel">It identifies the task label to start the Analogue Test Plan execution. " " = start at beginning of testplan.</param>
            <param name="endTaskLabel">It identifies the task label to end the Analogue Test Plan execution. " " = end at end of testplan.</param>
            <returns>
            <para>TPRJ_RESULT_PASS              ->          The Analogue Test Plan has been executed with PASS result.</para>
            <para>TPRJ_RESULT_FAIL              ->          The Analogue Test Plan has been executed with FAIL result.</para>
            <para>RP3ERR_TPRJ_CANNOT_RUN        ->          The Analogue Test Plan cannot be run.</para>
            <para>RP3ERR_ANL_INV_TASK_LABEL     ->          The task label is not valid.</para>
            <para>RP3ERR_ANL_TPLAN_NOT_FOUND    ->          The Analogue Test Plan was not found.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.RunAnlTaskNum(System.String,System.Int32,System.Int32)">
            <summary>
            <para>The RunAnlTaskNum instruction executes the Analogue Test Plan by specifying the starting and ending task numbers.</para>
            </summary>
            <param name="testPlan">It identifies the Test Plan name to be executed. If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected. </param>
            <param name="startTask">It identifies the task number to start the Analogue Test Plan execution. -1 = start at beginning of testplan.</param>
            <param name="endTask">It identifies the task number to end the Analogue Test Plan execution. -1 = end at end of testplan.</param>
            <returns>
            <para>TPRJ_RESULT_PASS              ->          The Analogue Test Plan has been executed with PASS result.</para>
            <para>TPRJ_RESULT_FAIL              ->          The Analogue Test Plan has been executed with FAIL result.</para>
            <para>RP3ERR_TPRJ_CANNOT_RUN        ->          The Analogue Test Plan cannot be run.</para>
            <para>RP3ERR_ANL_INV_TASK_NUM       ->          The task number is not valid.</para>
            <para>RP3ERR_ANL_TPLAN_NOT_FOUND    ->          The Analogue Test Plan was not found.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.RunAnlTest(System.String,System.Int32,System.Int32)">
            <summary>
            <para>The RunAnlTest instruction executes the Analogue Test Plan by specifying the starting and ending test numbers.</para>
            </summary>
            <param name="testPlan">It identifies the Test Plan name to be executed. If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected. </param>
            <param name="startTest">It identifies the test number to start the Analogue Test Plan execution. -1 = start at beginning of testplan.</param>
            <param name="endTest">It identifies the test number to end the Analogue Test Plan execution. -1 = end at end of testplan.</param>
            <returns>
            <para>TPRJ_RESULT_PASS              ->          The Analogue Test Plan has been executed with PASS result.</para>
            <para>TPRJ_RESULT_FAIL              ->          The Analogue Test Plan has been executed with FAIL result.</para>
            <para>RP3ERR_TPRJ_CANNOT_RUN        ->          The Analogue Test Plan cannot be run.</para>
            <para>RP3ERR_ANL_TPLAN_NOT_FOUND    ->          The Analogue Test Plan was not found.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.RunATask(System.String,System.Int32,System.Int32)">
            <summary>
            <para>The RunATask instruction executes the Analogue Test Plan by specifying the starting and ending task numbers.</para>
            </summary>
            <param name="testPlan">It identifies the Test Plan name to be executed. If the TestPlanName parameter is identified with " ", the current Analogue Test Plan name is selected. </param>
            <param name="startTask">It identifies the task number to start the Analogue Test Plan execution. -1 = start at beginning of testplan.</param>
            <param name="endTask">It identifies the task number to end the Analogue Test Plan execution. -1 = end at end of testplan.</param>
            <returns>
            <para>TPRJ_RESULT_PASS              ->          The Analogue Test Plan has been executed with PASS result.</para>
            <para>TPRJ_RESULT_FAIL              ->          The Analogue Test Plan has been executed with FAIL result.</para>
            <para>RP3ERR_TPRJ_CANNOT_RUN        ->          The Analogue Test Plan cannot be run.</para>
            <para>RP3ERR_ANL_INV_TASK_NUM       ->          The task number is not valid.</para>
            <para>RP3ERR_ANL_TPLAN_NOT_FOUND    ->          The Analogue Test Plan was not found.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.RunD(Spea.RunDModes,System.Int32,System.Int32@,System.Collections.Generic.List{System.Int32}@,System.Int32@,System.Int32@,System.Int32)">
            <summary>
            <para>The RunD instruction executes the pattern loaded with the last DigPatternLoad instruction.</para>
            <para>The pattern has been automatically unloaded after the execution.</para>
            </summary>
            <param name="mode">It identifies the RunD mode to be set.</param>
            <param name="timeOut">It identifies the number of milliseconds necessary to execute the pattern.</param>
            <param name="result">Execution result.</param>
            <param name="failedPins">It returns the list of failed pins at the first failed step of the pattern.</param>
            <param name="failedPinsCnt">It returns the number of pins that fails at the first failed step of the pattern.</param>
            <param name="failedStep">It returns the number of the first failed step of the pattern.</param>
            <param name="maxNumberOfPins">The number of pins used for the specific digital pattern.</param>
            <returns>
            <para>0                             ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_DIG_MODE                  ->          The Mode parameter is not valid.</para>
            <para>ERR_DIG_TIMEOUT               ->          The Timeout parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.S2A(System.String,System.Int16[]@,System.Int32)">
            <summary>
            <para>The S2A instruction converts the item list string (e.g.: "1,3-6, ...") in an array that can be an argument of the instructions that need an array of unsigned short integers.</para>
            <para>The result of the conversion is written in the buffer array.</para>
            </summary>
            <param name="itemlist">It identifies the item list string to be converted in array.</param>
            <param name="buffer">It identifies the destination buffer of the converted list.</param>
            <param name="maxBufferSize">It identifies the buffer length. Maxvalue has to be greater than the items number.</param>
            <returns>
            <para>0                             ->          No error present.</para>
            <para>WR_ITEM_SYNTAX_ERR            ->          The specified list contains invalid values.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.S2DWA(System.String,System.Int32[]@,System.Int32)">
            <summary>
            <para>The S2DWA instruction converts the item list string (e.g.: "1,3-6, ...") in an array that can be an argument of the instructions that need an array of unsigned short integers.</para>
            <para>The result of the conversion is written in the buffer array.</para>
            </summary>
            <param name="itemlist">It identifies the item list string to be converted in array.</param>
            <param name="buffer">It identifies the destination buffer of the converted list.</param>
            <param name="maxBufferSize">It identifies the buffer length. Maxvalue has to be greater than the items number.</param>
            <returns>
            <para>0                             ->          No error present.</para>
            <para>WR_ITEM_SYNTAX_ERR            ->          The specified list contains invalid values.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.S2LA(System.String,System.Int32[]@,System.Int32)">
            <summary>
            <para>The S2LA instruction converts the item list string (e.g.: "1,3-6, ...") in an array that can be an argument of the instructions that need an array of unsigned short integers.</para>
            <para>The result of the conversion is written in the buffer array.</para>
            </summary>
            <param name="itemlist">It identifies the item list string to be converted in array.</param>
            <param name="buffer">It identifies the destination buffer of the converted list.</param>
            <param name="maxBufferSize">It identifies the buffer length. Maxvalue has to be greater than the items number.</param>
            <returns>
            <para>0                             ->          No error present.</para>
            <para>WR_ITEM_SYNTAX_ERR            ->          The specified list contains invalid values.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SaveMeasure(System.Int32,System.String,System.Double,System.Int16)">
            <summary>
            <para>The SaveMeasure instruction is used to associate a measured value with a site and save it.</para>
            <para>It allows the datalogging of the measured value with the associated site.</para>
            </summary>
            <param name="testNumber">
            <para>It identifies the number of the test which measures has to be saved.</para>
            <para>This values must be equal to the values specified in the "Testplan" sheet of VRAD to avoid false results or indications.</para>
            </param>
            <param name="pinName">It identifies a string that identifies the name of the pin which measures has to be saved.</param>
            <param name="value">It identifies the value to be saved and associated to the specified site.</param>
            <param name="die">It identifies the site which result has to be associated and saved.</param>
            <returns>
            <para>PASS                  ->          The instruction has been successfully executed without errors.</para>
            <para>FAIL                  ->          The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SaveResult(System.Int32,System.String,Spea.SaveResultValues,System.Int16)">
            <summary>
            <para>The SaveResult instruction associates the result of a test with the specified site.</para>
            <para>It allows the datalogging of the test result with the associated site.</para>
            </summary>
            <param name="testNumber">
            <para>It identifies the number of the test which measures has to be saved.</para>
            <para>This values must be equal to the values specified in the "Testplan" sheet of VRAD to avoid false results or indications.</para>
            </param>
            <param name="pinName">It identifies a string that identifies the name of the pin which measures has to be saved.</param>
            <param name="result">It identifies the result to be saved and associated to the specified site.</param>
            <param name="die">It identifies the site which result has to be associated and saved.</param>
            <returns>
            <para>PASS                  ->          The instruction has been successfully executed without errors.</para>
            <para>FAIL                  ->          The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SbusDefault(Spea.SbusMode)">
            <summary>
            <para>The SbusDefault instruction connects the instruments to the Synchro Bus according to defaut configuration.</para>
            </summary>
            <param name="busId">It identifies the bus to be set at default.</param>
            <returns>
            <para>0                      ->         The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT    ->         The AUX module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SbusIdle">
            <summary>
            <para>The SbusIdle instruction resets the Synchro Bus, that is:.</para>
            <para> - disconnects all the flags (internal instrument signals) from the Synchro Bus and the extended SynchroBus.</para>
            <para> - disconnects the extended SynchroBus from the Synchro Bus.</para>
            </summary>
            <returns>
            <para>0                      ->         The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT    ->         The AUX module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ScnConnectAbus(Spea.ScannerId,Spea.Abus)">
            <summary>
            <para>The ScnConnectAbus instruction allows the connection of the scanner ABUS to the specified line(s) of the system ABUS.</para>
            </summary>
            <param name="scanId">It identifies the scanner to be connected.</param>
            <param name="row">System ABUS Line to be connected.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ScnDisconnectAbus(Spea.ScannerId,Spea.Abus)">
            <summary>
            <para>The ScnDisconnectAbus instruction allows the disconnection of the scanner ABUS from the specified line(s) of the system ABUS.</para>
            </summary>
            <param name="scanId">It identifies the scanner to be disconnected.</param>
            <param name="row">System ABUS Line to be disconnected.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ScnExtInstrConnect(Spea.ScannerId,Spea.ScannerExtInstrIds)">
            <summary>
            <para>The ScnExtInstrConnect instruction allows from the System Interface, the connection of the external instrument to the scanner ABUS.</para>
            </summary>
            <param name="scanId">It identifies the scanner to be connected with the external instrument.</param>
            <param name="point">External instrument to be connected.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.ScnExtInstrDisconnect(Spea.ScannerId,Spea.ScannerExtInstrIds)">
            <summary>
            <para>The ScnExtInstrDisconnect instruction allows from the System Interface, the disconnection of the external instrument from the scanner ABUS.</para>
            </summary>
            <param name="scanId">It identifies the scanner to be disconnected from the external instrument.</param>
            <param name="point">External instrument to be disconnected.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SerialNumberRead(System.Int32,System.String@,System.Int32)">
            <summary>
            <para>The SerialNumberRead instruction reads the serial number.</para>
            </summary>
            <param name="site">It identifies the site (used if the "panel of boards" feature is active).</param>
            <param name="serialNumber">It identifies the serial number (returned by this instruction).</param>
            <param name="serialNumberLength">The maximal length of the serial number.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the SerialNumber parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SerialNumberWrite(System.Int32,System.String)">
            <summary>
            <para>The SerialNumberWrite instruction writes the serial number for the next start.</para>
            </summary>
            <param name="site">It identifies the site (used if the "panel of boards" feature is active).</param>
            <param name="serialNumber">It identifies the serial number.</param>
            <returns>
            <para>This instruction returns the serial numbers number of characters.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SiteResultRead(System.Int32)">
            <summary>
            <para>The SiteResultRead instruction returns the test result of panel specified site.</para>
            </summary>
            <param name="site">It identifies the site (used if the "panel of boards" feature is active).</param>
            <returns>
            <para>RESULT_PASS or PASS     ->     The site result is PASS.</para>
            <para>RESULT_FAIL or FAIL     ->     The site result is FAIL.</para>
            <para>RESULT_NONE             ->     The site has no result.</para>
            <para>RESULT_NOT_MOUNTED      ->     The site is not mounted.</para>
            <para>RESULT_REJECT           ->     The site has been rejected.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SerialNumberResultRead(System.Int32)">
            <summary>
            <para>The SerialNumberResultRead instruction returns the test result of panel specified site of any stage. It is used for multistage projects.</para>
            </summary>
            <param name="site">It identifies the site (used if the "panel of boards" feature is active).</param>
            <returns>
            <para>RESULT_PASS or PASS     ->     The site result is PASS.</para>
            <para>RESULT_FAIL or FAIL     ->     The site result is FAIL.</para>
            <para>RESULT_NONE             ->     The site has no result.</para>
            <para>RESULT_NOT_MOUNTED      ->     The site is not mounted.</para>
            <para>RESULT_REJECT           ->     The site has been rejected.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SiteResultBayRead(System.Int32,System.Int32)">
            <summary>
            <para>The SiteResultBayRead instruction returns the test result of panel specified site of any bay.</para>
            </summary>
            <param name="bay">It identifies the bay.</param>
            <param name="site">It identifies the site (used if the "panel of boards" feature is active).</param>
            <returns>
            <para>RESULT_PASS or PASS     ->     The site result is PASS.</para>
            <para>RESULT_FAIL or FAIL     ->     The site result is FAIL.</para>
            <para>RESULT_NONE             ->     The site has no result.</para>
            <para>RESULT_NOT_MOUNTED      ->     The site is not mounted.</para>
            <para>RESULT_REJECT           ->     The site has been rejected.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SiteResultWrite(System.Int32,Spea.SiteResults)">
            <summary>
            <para>The SiteResultWrite instruction enables to force the test result of panel specified site.</para>
            </summary>
            <param name="site">It identifies the site (used if the "panel of boards" feature is active).</param>
            <param name="result">It identifies the site result .</param>
            <returns>
            <para>True     ->     The site result was correctly set.</para>
            <para>False    ->     The site result was not correctly set.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SyncParallelExec">
            <summary>
            <para>Syncs the execution of the bays.</para>
            </summary>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SysSyncRead(System.Int32@)">
            <summary>
            <para>The SysSyncRead instruction returns a system input flag status (logical level).</para>
            </summary>
            <param name="data">It identifies the flag status.</param>
            <returns>
            <para>0                       ->  The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.</para>
            <para>ERR_INV_FLAG_ID         ->  The FlagId parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SysSyncSet(Spea.SysCpuId,Spea.SbusLine)">
            <summary>
            <para>The SysSyncSet instruction connects/disconnects the system flags to the Synchro Bus.</para>
            </summary>
            <param name="flagId">Flag identifier.</param>
            <param name="sbusLine">It identifies the line of the Synchro Bus used for the synchronization.</param>
            <returns>
            <para>0                       ->  The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.</para>
            <para>ERR_INV_FLAG_ID         ->  The FlagId parameter is not valid.</para>
            <para>ERR_INVALID_SYNC_LINE   ->  The SbusLine parameter is not valid.</para>
            <para>ERR_INV_LINE_FOR_FLAG   ->  The SbusLine parameter is not valid for the selected FlagId.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SysSyncWrite(System.Int32)">
            <summary>
            <para>The SysSyncWrite instruction sets the system output flag value (logical level).</para>
            </summary>
            <param name="data">It identifies the flag status.</param>
            <returns>
            <para>0                       ->  The instruction has been successfully executed without errors.</para>
            <para>ERR_AUX_NOT_PRESENT     ->  The AUX module is not present.</para>
            <para>ERR_INV_FLAG_ID         ->  The FlagId parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SystemSerialNumberRead(System.String@,System.Int32)">
            <summary>
            <para>The SystemSerialNumberRead instruction reads the system serial number.</para>
            </summary>
            <param name="sysSN">It identifies the system serial number.</param>
            <param name="maxLength">The maximal length of the <paramref name="sysSN"/>.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the SysSn parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SysWait(System.Int16)">
            <summary>
            <para>The SysWait instruction performs a NULL instruction that lasts the value programmed in the time argument.</para>
            <para>This istruction does NOT suspend the testprogram execution, but affects the timing used by the system to execute the instructions.</para>
            <para>It is NOT a way to make possible an interaction between the operator and the testprogram, or to show temporized messages on the screen.</para>
            <para>For this purpose the Windows OS and the programming languages makes available several functions like Dialog Box, Message Box and Time related instructions.</para>
            </summary>
            <param name="time">It identifies the wait time. It is expressed in milliseconds.</param>
        </member>
        <member name="M:Spea.LeoF.SysWaitForAnswer">
            <summary>
            <para>The SysWaitForAnswer instruction allows to synchronize the computer CPU with the tester CPU (Test Sequencer).</para>
            <para>These 2 CPUs communicate by means of a FIFO interface, through which the computer CPU sends the commands to be executed by the tester CPU.</para>
            <para>For most of the sent commands the computer CPU does not wait for any answer from the tester CPU, and continues to execute the testprogram,by sending commands until the FIFO is full, without worrying if all of them have been executed.</para>
            <para>For this purpose the Windows OS and the programming languages makes available several functions like Dialog Box, Message Box and Time related instructions.</para>
            <para>If WaitForAnswer is reached the computer CPU suspends the testprogram execution until answer from the tester CPU is received.</para>
            <para>Due to the different speed can happen that the computer CPU reaches the end of the testprogram ( Stop to the system), and the tester CPU has not ended yet to execute the received commands.</para>
            <para>In order to prevent this anomalous situation, the computer CPU automatically executes this instruction at the end of the testprogram, even it is not used by the programmer.</para>
            </summary>
        </member>
        <member name="M:Spea.LeoF.TesterNumberRead(System.Int32@)">
            <summary>
            <para>The TesterNumberRead instruction reads the tester number.</para>
            </summary>
            <param name="sysNo">It identifies the tester number.</param>
            <returns>
            <para>True   ->   The tester number was correctly read.</para>
            <para>False  ->   The tester number was not correctly read.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TestPointAttributeRead(System.Int32,System.Int32@,System.Int32@,System.Collections.Generic.List{System.Int32}@,System.Double@,System.Double@)">
            <summary>
            The TestPointAttributeRead instruction reads the main information of the test point.
            </summary>
            <param name="tpNumber">It identifies the Test point number to on which read the information.</param>
            <param name="tpType">
            <para>It identifies the test point type. Possible values are:.</para>
            <para>FLYING            ->   Test point contactable by flying probe.</para>
            <para>NOT_POSITIONED    ->   Test point not positioned like Master Unposition.</para>
            <para>NOT_CONTACTABLE   ->   Test point not reachable from any probe.</para>
            <para>FIXED_ANALOGUE    ->   Test point wired to YASCA with only analogue channel.</para>
            <para>FIXED_DIGITAL     ->   Test point wired to YASCA with digital and analogue channel.</para>
            <para>FIXED_ACTIVE      ->   Test point wired to ZPROMEA.</para>
            <para>FIXED_OBP_ACTIVE  ->   Test point wired to ZPROMEA with digital I/O.</para>
            </param>
            <param name="channel">It returns the channel number.</param>
            <param name="prbAcc">
            <para>It returns the list of the probes that can contact the test point. Possible values are:.</para>
            <para>TRUE or FALSE. See example:.</para>
            <para>0  ->  TRUE  -> PROBE1.</para>
            <para>1  ->  TRUE  -> PROBE2.</para>
            <para>2  ->  FALSE -> PROBE3.</para>
            <para>3  ->  FALSE -> PROBE4.</para>
            <para>4  ->  TRUE  -> PROBE5.</para>
            <para>5  ->  TRUE  -> PROBE6.</para>
            <para>6  ->  FALSE -> PROBE7.</para>
            <para>7  ->  TRUE  -> PROBE8.</para>
            </param>
            <param name="xCoord">It returns the X coordinate of the test point (in mm).</param>
            <param name="yCoord">It returns the Y coordinate of the test point (in mm).</param>
            <returns>
            <para>0   ->  no error present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpConnectAbus(System.Collections.Generic.IEnumerable{System.Int32},Spea.Abus)">
            <summary>
            The TpConnectAbus instruction allows the connection of the specified Test points to the specified line(s) of the ABUS.
            </summary>
            <param name="tpList">It identifies the list of Test points to be connected (terminated by 0). To get the list of Tetst points use the S2DWA instruction.</param>
            <param name="row">Line to be connected.</param>
            <returns>
            <para>0                    ->   The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpConnectUabus(System.Collections.Generic.IEnumerable{System.Int32},Spea.Abus)">
            <summary>
            The TpConnectUabus instruction allows the connection of the specified Test points to the specified line(s) of the UABUS.
            </summary>
            <param name="tpList">It identifies the list of Test points to be connected (terminated by 0). To get the list of Tetst points use the S2DWA instruction.</param>
            <param name="row">Line to be connected.</param>
            <returns>
            <para>0                    ->   The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpDisconnectAbus(System.Collections.Generic.IEnumerable{System.Int32},Spea.Abus)">
            <summary>
            The TpDisconnectAbus instruction allows the disconnection of the specified Test points to the specified line(s) of the ABUS.
            </summary>
            <param name="tpList">It identifies the list of Test points to be disconnected (terminated by 0). To get the list of Tetst points use the S2DWA instruction.</param>
            <param name="row">Line to be disconnected.</param>
            <returns>
            <para>0                    ->   The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpDisconnectAllAbus(Spea.Abus)">
            <summary>
            The TpDisconnectAllAbus instruction allows the disconnection of all the Test points from the specified line(s) of the ABUS.
            </summary>
            <param name="row">Line to be disconnected.</param>
            <returns>
            <para>0                    ->   The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpDisconnectUabus(System.Collections.Generic.IEnumerable{System.Int32},Spea.Abus)">
            <summary>
            The TpDisconnectUabus instruction allows the disconnection of the specified Test points to the specified line(s) of the UABUS.
            </summary>
            <param name="tpList">It identifies the list of Test points to be disconnected (terminated by 0). To get the list of Tetst points use the S2DWA instruction.</param>
            <param name="row">Line to be disconnected.</param>
            <returns>
            <para>0                    ->   The instruction has been successfully executed without errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpgmFolderRead(System.String@,System.Int32)">
            <summary>
            The TpgmFolderRead instruction reads the test program folder.
            </summary>
            <param name="tpgmFolder">It identifies the test program folder (returned by this instruction).</param>
            <param name="maxLength">The maximal length of the <paramref name="tpgmFolder"/>.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the TpgmFolder parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpgmGetNominalValue(System.Int32,System.Double@)">
            <summary>
            The TpgmGetNominalValue instruction returns the nominal value of a test.
            </summary>
            <param name="testHandle">The TestHnd is the test handle that is returned using the TpgmGetTestHandle instruction.</param>
            <param name="nominalValue">It returns the nominal value of the defined test.</param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                    ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpgmGetTestHandle(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <para>The TpgmGetTestHandle instruction returns the handle of a test and task. These two handles are used in the other instruction.</para>
            <para>The test must be one of the selected device in the Testprogram Control Window of the Control Panel, otherwise the function fails.</para>
            </summary>
            <param name="testNo">It identifies the test number.</param>
            <param name="taskHandle">It returns the task handle.</param>
            <param name="testHandle">It returns the test handle.</param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                    ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpgmGetThr(System.Int32,System.Double@,System.Double@,System.Byte@,System.Byte@)">
            <summary>
            <para>The TpgmHetThr instruction returns the thresholds of a test programmed in the Testplan map of the VRAD software.</para>
            </summary>
            <param name="testHandle">The TestHnd is the test handle that is returned using the TpgmGetTestHandle instruction.</param>
            <param name="thrLow">It returns the low threshold of the test. In case of the threshold programmed in the Vrad sheet is missing, the INVALID_THR will be returned.</param>
            <param name="thrHigh">It returns the high threshold of the test. In case of the threshold programmed in the Vrad sheet is missing, the INVALID_THR will be returned.</param>
            <param name="thrLInfo">
            <para>It returns the information about the low threshold. Possible values are:.</para>
            <para>THR_OK            ->   0   ->  The low threshold is valid.</para>
            <para>THR_NO_PRESENT    ->   2   ->  The low threshold is not programmed in the Vrad sheet.</para>
            <para>THR_KO            ->   1   ->  The low threshold is invalid.</para>
            </param>
            <param name="thrHInfo">
            <para>It returns the information about the high threshold. Possible values are:.</para>
            <para>THR_OK            ->   0   ->  The high threshold is valid.</para>
            <para>THR_NO_PRESENT    ->   2   ->  The high threshold is not programmed in the Vrad sheet.</para>
            <para>THR_KO            ->   1   ->  The high threshold is invalid.</para>
            </param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                    ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpgmNameRead(System.String@,System.Int32)">
            <summary>
            The TpgmNameRead instruction reads the test program name.
            </summary>
            <param name="tpgmName">It identifies the test program name (returned by this instruction).</param>
            <param name="maxLength">The maximal length of the <paramref name="tpgmName"/>.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the TpgmName parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpgmPathRead(System.String@,System.Int32)">
            <summary>
            The TpgmPathRead instruction reads the test program path name.
            </summary>
            <param name="tpgmPath">It identifies the test program path name (returned by this instruction).</param>
            <param name="maxLength">The maximal length of the <paramref name="tpgmPath"/>.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the tpgmPath parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TplanResultSet(Spea.TestplanResults)">
            <summary>
            The TplanResultSet instruction works in two different ways according to the error code value.
            </summary>
            <param name="result">Test plan execution fail flag.</param>
        </member>
        <member name="M:Spea.LeoF.TpStrConnectAbus(System.String,Spea.Abus)">
            <summary>
            The TpStrConnectAbus instruction allows the connection of the specified Test points to the specified line(s) of the ABUS.
            </summary>
            <param name="tpList">It identifies the Test points string to be connected (e.g. "1,3-5": connects the Test points 1,3,4,5).</param>
            <param name="row">Line to be connected.</param>
            <returns>
            <para>0                    ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_TP_STRING    ->      The TpList parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpStrConnectUabus(System.String,Spea.Abus)">
            <summary>
            The TpStrConnectUabus instruction allows the connection of the specified Test points to the specified line(s) of the UABUS.
            </summary>
            <param name="tpList">It identifies the Test points string to be connected (e.g. "1,3-5": connects the Test points 1,3,4,5).</param>
            <param name="row">Line to be connected.</param>
            <returns>
            <para>0                    ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_TP_STRING    ->      The TpList parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpStrDisconnectAbus(System.String,Spea.Abus)">
            <summary>
            The TpStrDisconnectAbus instruction allows the disconnection of the specified Test points to the specified line(s) of the ABUS.
            </summary>
            <param name="tpList">It identifies the Test points string to be disconnected (e.g. "1,3-5": connects the Test points 1,3,4,5).</param>
            <param name="row">Line to be disconnected.</param>
            <returns>
            <para>0                    ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_TP_STRING    ->      The TpList parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.TpStrDisconnectUabus(System.String,Spea.Abus)">
            <summary>
            The TpStrDisconnectUabus instruction allows the disconnection of the specified Test points to the specified line(s) of the UABUS.
            </summary>
            <param name="tpList">It identifies the Test points string to be disconnected (e.g. "1,3-5": connects the Test points 1,3,4,5).</param>
            <param name="row">Line to be disconnected.</param>
            <returns>
            <para>0                    ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_TP_STRING    ->      The TpList parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UseBayRead(System.Int32@)">
            <summary>
            <para>The UseBayRead instruction reads the current bay number.</para>
            </summary>
            <param name="currentBay">It identifies the bay in use by the functional test plan. (returned by this instruction).</param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                    ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UseProjectWrite(System.Int32)">
            <summary>
            <para>In case of a multi test project, all the involved test projects are loaded on the tester memory.</para>
            <para>During the test execution, the UseProjectWrite instruction selects the test project to be used.</para>
            </summary>
            <param name="tprj">It identifies the Test project to be used.If the Tprj parameter is = 0, it will be selected the multi test project part of the test program.</param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                    ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UserFlagRead(Spea.InputUserFlags,System.Int32,Spea.FlagValues@)">
            <summary>
            The UserFlagRead instruction returns the status of an input user flag.
            </summary>
            <param name="flagGroup">It identifies the group of the flag to be read.</param>
            <param name="flagId">It identifies the flag number.</param>
            <param name="flagValue">It identifies the flag status returned by the system. (ON or OFF).</param>
            <returns>
            <para>0                    ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_GROUP_ID     ->      The FlagGroup parameter is not valid.</para>
            <para>ERR_UFLGROUP_NOT_PRESENT    ->      The selected Flag is not present in the group.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UserFlagGroupRead(Spea.InputUserFlags,System.Collections.Generic.List{Spea.FlagValues}@,System.Int32)">
            <summary>
            The UserFlagGroupRead instruction returns the status of a group of input user flags.
            </summary>
            <param name="flagGroup">It identifies the group of the flag to be read.</param>
            <param name="flagValueArray">Array containing the status of the flags of the selected group. Each element in the array represents the status of one flag.</param>
            <param name="numberOfFlags">The number of user flags in the <paramref name="flagGroup"/>.</param>
            <returns>
            <para>0                           ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_GROUP_ID            ->      The FlagGroup parameter is not valid.</para>
            <para>ERR_UFLGROUP_NOT_PRESENT    ->      The selected Flag is not present in the group.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UserFlagsIdle">
            <summary>
            <para>The UserFlagsIdle instruction sets the Output User Flags in the idle status (resets all flags).</para>
            <para>It is possible to use this instruction to program all system flags or just one group.</para>
            </summary>
            <returns>
            <para>0                      ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_UFL_NOT_PRESENT    ->      The User Flags are not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UserFlagsReset(Spea.OutputUserFlags,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The UserFlagsReset instruction resets one or more Output User Flag (OFF status).
            </summary>
            <param name="flagGroup">It identifies the group of the flag to be reset.</param>
            <param name="flagsArray">It identifies the array containing the list of the flags to be reset. Each element in the array contains the number of one flag (1-n). The array has to terminate with 0.</param>
            <returns>
            <para>0                           ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_GROUP_ID            ->      The FlagGroup parameter is not valid.</para>
            <para>ERR_UFLGROUP_NOT_PRESENT    ->      The selected Flag is not present in the group.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UserFlagsSet(Spea.OutputUserFlags,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The UserFlagsSet instruction sets one or more Output User Flag (ON status).
            </summary>
            <param name="flagGroup">It identifies the group of the flag to be set.</param>
            <param name="flagsArray">It identifies the array containing the list of the flags to be set. Each element in the array contains the number of one flag (1-n). The array has to terminate with 0.</param>
            <returns>
            <para>0                           ->      The instruction has been successfully executed without errors.</para>
            <para>ERR_INV_GROUP_ID            ->      The FlagGroup parameter is not valid.</para>
            <para>ERR_UFLGROUP_NOT_PRESENT    ->      The selected Flag is not present in the group.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UserRead(System.Int32,System.Byte@)">
            <summary>
            The UserRead instruction reads a data from a specified address.
            </summary>
            <param name="address">It identifies the address of data source. Possible values: 0x1E00 ~ 0x1E71.</param>
            <param name="data">It identifies the read data. Possible values: 0x00 ~ 0xFF.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UseSiteRead(System.Int32@)">
            <summary>
            <para>The UseSiteRead instruction reads the current site in test.</para>
            </summary>
            <param name="site">It identifies the current site in test (returned by this instruction).</param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                   ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.UseSiteWrite(System.Int32)">
            <summary>
            <para>The UseSiteWrite instruction writes the current site in test.</para>
            </summary>
            <param name="site">It identifies the current site in test.</param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                   ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.VariantCheck(System.Int32)">
            <summary>
            <para>TThe VariantCheck instruction checks ia a variant is active.</para>
            </summary>
            <param name="variantNum">It identifies the variant number..</param>
            <returns>
            <para>This instruction returns nonzero if the variant is active, otherwise returns 0.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.VariantCompositionNumRead(System.Int32@)">
            <summary>
            <para>The VariantCompositionNumRead instruction reads the current variant composition number.</para>
            </summary>
            <param name="variantCompNum">It identifies the variant composition number (returned by this instruction).</param>
            <returns>
            <para>TRUE                    ->   The instruction has been successfully executed without errors.</para>
            <para>FALSE                   ->   The instruction has been executed with errors.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.VariantCompositionRead(System.String@,System.Int32)">
            <summary>
            <para>The VariantCompositionRead instruction reads the current variant composition.</para>
            </summary>
            <param name="variantComp">It identifies the variant composition (returned by this instruction).</param>
            <param name="maxLength">The maximal length of the <paramref name="variantComp"/>.</param>
            <returns>
            <para>This instruction returns the number of characters stored into the VariantComposition parameter.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.VariantCompositionWrite(System.String)">
            <summary>
            <para>The VariantCompositionWrite instruction writes the current variant composition.</para>
            </summary>
            <param name="variantComp">It identifies the variant composition.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.Wait(System.Int32)">
            <summary>
            <para>The Wait instruction allows the firmware to wait for the specified number of milliseconds.</para>
            </summary>
            <param name="time">It identifies the wait time to be set.</param>
            <returns>
            <para>? not documented.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgConnectAbus(Spea.Abus,Spea.Abus)">
            <summary>
            <para>The WfgConnectAbus connects the Wfg module to the specified line of the ABUS.</para>
            <para>The connection of the points is added to those already connected, if any.</para>
            <para>If the Wfg module is enabled, the instuction can not be executed.</para>
            </summary>
            <param name="row1">It identifies the rows on OUT1.</param>
            <param name="row2">It identifies the rows on OUT2.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            <para>ERR_WFG_ABUS              ->          The ABUS row parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgConnectInterf">
            <summary>
            <para>The WfgConnectInterf instruction connects the output channels of the Wfg module to the System Interface.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgConnectMobus(Spea.Mobus)">
            <summary>
            <para>The WfgConnectMobus instruction connects the output channels of the Wfg module to the modulation bus.</para>
            <para>The connection of the points is added to those already connected, if any. The instruction connects the positive modulation line and the negative modulation line.</para>
            <para>If the Wfg module is enabled, the instuction can not be executed.</para>
            </summary>
            <param name="row">It identifies the Mobus row.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            <para>ERR_WFG_MOBUS             ->          The MOBUS row parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgConnectUabusBmu(Spea.Uabus1To4,Spea.Uabus5To8)">
            <summary>
            <para>The WfgConnectUabusBmu instruction connects the interface pins of the Wfg module to the UABUS rows of the YABMU board.</para>
            </summary>
            <param name="rowOut1">It identifies the UABUS rows on OUT1.</param>
            <param name="rowOut2">It identifies the UABUS rows on OUT2.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            <para>ERR_WFG_UABUS              ->         The UABUS row parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgDisable">
            <summary>
            <para>The WfgDisable instruction turns off the instrument and stop the waveform generation.</para>
            <para>The outputs are set to zero volt.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgDisconnectAbus(Spea.Abus,Spea.Abus)">
            <summary>
            <para>The WfgDisconnectAbus disconnects the Wfg module from the specified line of the ABUS.</para>
            <para>If the Wfg module is enabled, the instuction can not be executed.</para>
            </summary>
            <param name="row1">It identifies the rows on OUT1.</param>
            <param name="row2">It identifies the rows on OUT2.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            <para>ERR_WFG_ABUS              ->          The ABUS row parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgDisconnectAll">
            <summary>
            <para>The WfgDisconnectAll instruction disconnects the output stage of the Wfg module from every possible connection point.</para>
            <para>If the Wfg module is enabled, the instuction can not be executed.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgDisconnectInterf">
            <summary>
            <para>The WfgDisconnectInterf instruction disconnects the output channels of the Wfg module to the System Interface.</para>
            <para>If the Wfg module is enabled, the instuction can not be executed.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgDisconnectMobus(Spea.Mobus)">
            <summary>
            <para>The WfgDisconnectMobus instruction disconnects the output channels of the Wfg module from the modulation bus.</para>
            <para>If the Wfg module is enabled, the instuction can not be executed.</para>
            </summary>
            <param name="row">It identifies the Mobus row.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            <para>ERR_WFG_MOBUS             ->          The MOBUS row parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgDisconnectUabusBmu">
            <summary>
            <para>The WfgDisconnectUabusBmu instruction disconnects the Wfg module from the system interface and from the UABUS rows of the YABMU board.</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SitesGet(System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            <para>Gets the Sites regarding the bay which is excecuting this function.</para>
            </summary>
            <param name="siteList">Integer enumerable with all sites.</param>
            <returns>
            <para>0      ->          The instruction has been successfully executed without errors.</para>
            <para>1      ->          Not possible to retrive the sitelist.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SitesEnabledGet(System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            <para>Gets the with tsite enabled Sites for the bay which is excecuting this function.</para>
            </summary>
            <param name="siteList">Integer enumerable with all sites that are enabled.</param>
            <returns>
            <para>0      ->          The instruction has been successfully executed without errors.</para>
            <para>1      ->          Not possible to retrive the sitelist.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SitesBayGet(System.Int32@,System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            <para>Gets the sites regarding the given bay.</para>
            </summary>
            <param name="bayNo">Bay number, for which the sites should be retrieved.</param>
            <param name="siteList">Integer enumerable with all sites.</param>
            <returns>
            <para>0      ->          The instruction has been successfully executed without errors.</para>
            <para>1      ->          Not possible to retrive the sitelist.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SitesEnabledBayGet(System.Int32@,System.Collections.Generic.IEnumerable{System.Int32}@)">
            <summary>
            <para>Gets the sites regarding the given bay, which have been enabled with tsite.</para>
            </summary>
            <param name="bayNo">Bay number, for which the sites should be retrieved.</param>
            <param name="siteList">Integer enumerable with all sites that are enabled.</param>
            <returns>
            <para>0      ->          The instruction has been successfully executed without errors.</para>
            <para>1      ->          Not possible to retrive the sitelist.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.CdcollFileNameGet(System.String@,System.Int32@)">
            <summary>
            <para>This instruction returns the full path filename of the CDCOLL file for the specified site of the current test project.</para>
            <para>If customized CDCOLL for each site is used, the site can be given to retrieve the cdcollName for the specific site.</para>
            </summary>
            <param name="fileName">It returns the cdcoll file name.</param>
            <param name="site">It identifies the site number.</param>
        </member>
        <member name="M:Spea.LeoF.WfgEnable">
            <summary>
            <para>The WfgEnable instruction enables the Wfg module.</para>
            <para>The instruction cannot be executed if the waveform is not selected (refer to the WfgWaveformSelect instruction).</para>
            <para> and if the module input is set in INTSOURCE mode (refer to the Wfg InputSelect instruction).</para>
            </summary>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgInputSelect(Spea.WfgInput)">
            <summary>
            <para>The WfgInputSelect select the input stage of the Wfg module to the specified point to operate as a buffer.</para>
            </summary>
            <param name="source">It identifies the input point for the connection.</param>
            <returns>
            <para>0                         ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT       ->          The Wfg module is not present.</para>
            <para>ERR_WFG_SOURCE            ->          The Source parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgOutputSet(Spea.WfgOutputMode,Spea.WfgAmpRange,System.Double,Spea.WfgOffsetRange,System.Double,Spea.WfgImpedance)">
            <summary>
            <para>The WfgOutputSet intruction sets the instrument’s output parameters.</para>
            </summary>
            <param name="outputMode">It identifies the output modality.</param>
            <param name="ampRange">It identifies the range of the Amlitude value.</param>
            <param name="amplitude">
            <para>It identifies the waveform peak amplitude (expressed in Volts).</para>
            <para>This paramenter is used only if a Waveform Generator mode is selected, otherwise it is ignored by the system.</para>
            </param>
            <param name="offRange">It identifies the range of the DCOffset value.</param>
            <param name="dcOffset">It identifies a DC offset that can be added to the generated waveform.</param>
            <param name="impedance">It identifies the range of the Impedance value.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT              ->          The Wfg module is not present.</para>
            <para>ERR_WFG_OUTPUT_MODE_SET          ->          The OutputMode parameter is not valid.</para>
            <para>ERR_WFG_AMPLITUDE_RANGE          ->          The AmpRange parameter is not valid.</para>
            <para>ERR_WFG_AMPLITUDE                ->          The Amplitude parameter is out of range.</para>
            <para>ERR_WFG_OFFSET_RANGE             ->          The OffRange parameter is not valid.</para>
            <para>ERR_WFG_DC_OFFSET                ->          The DCOffset parameter is out of range.</para>
            <para>ERR_WFG_IMPEDANCE                ->          The Impedance parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgSequenceSelect(System.String,System.Double,Spea.WfgOutputFormat)">
            <summary>
            This instruction loads on the YAGEN300 the customized waveform made by AWE2 editor.
            </summary>
            <param name="sequenceName">It identifies the sequence name edited in the AWE2.</param>
            <param name="stepTime">It identifies the test time of one waveform time point.</param>
            <param name="outFormat">It identifies the type of the waveform to be generated.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT              ->          The Wfg module is not present.</para>
            <para>ERR_WFG_WFORM_TYPE               ->          The WformType parameter is not valid.</para>
            <para>ERR_WFG_FREQUENCY                ->          The Frequency parameter is out of range.</para>
            <para>ERR_WFG_OUT_FORMAT               ->          The OutFormat parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgTimingSet(Spea.WfgTiming)">
            <summary>
            <para>The WfgTimingSet instruction allows to select the timing to use when the Waveform Generator module is programmed in PULSE (refer to the WfgWaveformSelect instruction).</para>
            </summary>
            <param name="flag">It identifies the timing to use in order to define the output pulse time.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT              ->          The Wfg module is not present.</para>
            <para>ERR_WFG_FLAG                     ->          The Flag parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.WfgWaveformSelect(Spea.WfgWaveformType,System.Double,Spea.WfgOutputFormat)">
            <summary>
            <para>The WfgWaveformSelect intruction sets the instrument to generate a “standard-type” waveform.</para>
            </summary>
            <param name="wFormtype">It identifies the type of the waveform to be generated.</param>
            <param name="frequency">It identifies the frequency of the generated waveform. In case of DC voltage generation the system software ignores this parameter.</param>
            <param name="outFormat">It identifies the output voltage source origin.</param>
            <returns>
            <para>0                                ->          The instruction has been successfully executed without errors.</para>
            <para>ERR_WFG_NOT_PRESENT              ->          The Wfg module is not present.</para>
            <para>ERR_WFG_WFORM_TYPE               ->          The WformType parameter is not valid.</para>
            <para>ERR_WFG_FREQUENCY                ->          The Frequency parameter is out of range.</para>
            <para>ERR_WFG_OUT_FORMAT               ->          The OutFormat parameter is not valid.</para>
            </returns>
        </member>
        <member name="M:Spea.LeoF.SendPrint(Spea.OutputWindow,System.String,System.Boolean)">
            <summary>
            Prints a message in the selected Runpack window.
            </summary>
            <param name="windowId">The selected Runpack window.</param>
            <param name="msg">>The message.</param>
            <param name="avoidCrLf">A value indicating whether a new line after the message should be avoided.</param>
        </member>
        <member name="M:Spea.LeoF.StorePrintFuncValue(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,Spea.TestResult,System.Double,System.Double,System.Double,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Int32},System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            General function used to log information to the "Test Report Window" in Runpack, "Data Log" and/or "Certification Data Collection (CdColl)".
            </summary>
            <param name="testNumber">The global test number.</param>
            <param name="testNumberInTask">The local test number inside of the task.</param>
            <param name="uniqueTestId">An unique test ID.</param>
            <param name="taskNumber">The task number.</param>
            <param name="drawingReference">The drawing reference of tested component.</param>
            <param name="remark">A test remark.</param>
            <param name="testResult">The test result.</param>
            <param name="measuredValue">The measured value.</param>
            <param name="thrLow">The lower threshold.</param>
            <param name="thrHigh">The upper threshold.</param>
            <param name="measFactor">The measurement factor. (Not documented, usually set as empty string).</param>
            <param name="measUnit">The measurement unit.</param>
            <param name="measuredValueStr">The measured value as string.</param>
            <param name="thrLowStr">The lower threshold as string.</param>
            <param name="thrHighStr">The upper threshold as string.</param>
            <param name="tpList">A list of test points used to perform this test.</param>
            <param name="altMsg">An alternative message.</param>
            <param name="siteNum">The site number.</param>
            <param name="storeToReport">Value indicating whether information should be logged to the "Test Report Window" in Runpack.</param>
            <param name="storeToDatalog">Value indicating whether information should be logged to the "Data Log".</param>
            <param name="storeToCdcoll">Value indicating whether information should be logged to the "Certification Data Collection (CdColl)".</param>
        </member>
        <member name="M:Spea.LeoF.ReadSystemError(System.Int32@,System.String@)">
            <summary>
            Reads the last error occurred during the execution. It returns the error code.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorText">The error message.</param>
            <returns>The error code as <see cref="T:Spea.Status"/> or <see cref="F:Spea.Status.FAIL"/> if error code is not yet implemented in <see cref="T:Spea.Status"/>.</returns>
        </member>
        <member name="M:Spea.LeoF.SetExecutionError(Spea.Status)">
            <summary>
            Sets the current execution error value (this value is read from <see cref="M:Spea.LeoF.ReadSystemError(System.Int32@,System.String@)"/>). <br/>
            Passing <see cref="F:Spea.Status.PASS"/> will clear the error.
            </summary>
            <param name="status">The status to be set.</param>
        </member>
        <member name="M:Spea.LeoF.GetOperationStatus(System.Int32)">
            <summary>
            It returns the correspondent error code as a <see cref="T:Spea.Status"/> value.
            If no correspondent error code is found <see cref="F:Spea.Status.FAIL"/> is returned instead.
            </summary>
            <param name="code">The error code returned by the AtosF function.</param>
            <returns>The correspondent <see cref="T:Spea.Status"/> value or <see cref="F:Spea.Status.FAIL"/> if the correspondent value isn't found.</returns>
        </member>
        <member name="M:Spea.LeoF.DuplicateDelegateAs``1(System.MulticastDelegate)">
            <summary>
            It casts a delegate into another compatible delegate type.
            </summary>
            <typeparam name="TResult">The destination type.</typeparam>
            <param name="source">The original delegate.</param>
            <returns>A casted delegate.</returns>
        </member>
        <member name="T:Spea.InstrAcGen">
            <summary>
            Enum contains all possible IDs for AC-generator.
            </summary>
        </member>
        <member name="F:Spea.InstrAcGen.ACGEN1">
            <summary>
            ACGEN1 = AC-Generator 1.
            </summary>
        </member>
        <member name="F:Spea.InstrAcGen.ACGEN2">
            <summary>
            ACGEN2 = AC-Generator 2.
            </summary>
        </member>
        <member name="F:Spea.InstrAcGen.ACGEN3">
            <summary>
            ACGEN3 = AC-Generator 3.
            </summary>
        </member>
        <member name="F:Spea.InstrAcGen.ACGEN4">
            <summary>
            ACGEN4 = AC-Generator 4.
            </summary>
        </member>
        <member name="T:Spea.VoltRangeAcGen">
            <summary>
            Enum contains all possible voltage ranges for AC-generator.
            </summary>
        </member>
        <member name="F:Spea.VoltRangeAcGen.R150V">
            <summary>
            R150V = 1V - 150V.
            </summary>
        </member>
        <member name="F:Spea.VoltRangeAcGen.R300V">
            <summary>
            R300V = 150V - 300V.
            </summary>
        </member>
        <member name="F:Spea.VoltRangeAcGen.AUTORANGE">
            <summary>
            AUTORANGE = 1V - 300V.
            </summary>
        </member>
        <member name="T:Spea.OutAcGen">
            <summary>
            Enum contains all possible output selections for AC-generator.
            </summary>
        </member>
        <member name="F:Spea.OutAcGen.OUT_A">
            <summary>
            OUT_A = Ouput A of AC-gen.
            </summary>
        </member>
        <member name="F:Spea.OutAcGen.OUT_B">
            <summary>
            OUT_B = Ouput B of AC-gen.
            </summary>
        </member>
        <member name="F:Spea.OutAcGen.OUT_ALL">
            <summary>
            OUT_ALL = Ouput A + output B of AC-gen.
            </summary>
        </member>
        <member name="T:Spea.FlagIdAcLine">
            <summary>
            Enum contains all possible flag-IDs for AC-line synchronisation.
            </summary>
        </member>
        <member name="F:Spea.FlagIdAcLine.ACLINE_S">
            <summary>
            It controls the connection between the AC line and the Sbus.
            </summary>
        </member>
        <member name="F:Spea.FlagIdAcLine.ACLINE_E">
            <summary>
            It controls the connection between the AC line and the Esbus.
            </summary>
        </member>
        <member name="T:Spea.MbusLine">
            <summary>
            Enum contains all possible selections for MBUSLINE.
            </summary>
        </member>
        <member name="F:Spea.MbusLine.MBUS1">
            <summary>
            MbusLine 1.
            </summary>
        </member>
        <member name="F:Spea.MbusLine.MBUS2">
            <summary>
            MbusLine 2.
            </summary>
        </member>
        <member name="F:Spea.MbusLine.MBUS3">
            <summary>
            MbusLine 3.
            </summary>
        </member>
        <member name="F:Spea.MbusLine.MBUS4">
            <summary>
            MbusLine 4.
            </summary>
        </member>
        <member name="F:Spea.MbusLine.NONE">
            <summary>
            No Mbus Connection.
            </summary>
        </member>
        <member name="T:Spea.DriSbusLine">
            <summary>
            Enum contains all possible selections for SBUSLINE on drivers.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS1">
            <summary>
            Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS2">
            <summary>
            Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS3">
            <summary>
            Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS4">
            <summary>
            Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS5">
            <summary>
            Synchro Bus 5.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS6">
            <summary>
            Synchro Bus 6.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS7">
            <summary>
            Synchro Bus 7.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.SBUS8">
            <summary>
            Synchro Bus 8.
            </summary>
        </member>
        <member name="F:Spea.DriSbusLine.NONE">
            <summary>
            No connections.
            </summary>
        </member>
        <member name="T:Spea.SbusLine">
            <summary>
            Enum contains all possible selections for SBUSLINE.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS1">
            <summary>
            Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS2">
            <summary>
            Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS3">
            <summary>
            Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS4">
            <summary>
            Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS5">
            <summary>
            Synchro Bus 5.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS6">
            <summary>
            Synchro Bus 6.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS7">
            <summary>
            Synchro Bus 7.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.SBUS8">
            <summary>
            Synchro Bus 8.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.ESBUS1">
            <summary>
            External Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.ESBUS2">
            <summary>
            External Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.ESBUS3">
            <summary>
            External Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.ESBUS4">
            <summary>
            External Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.SbusLine.NONE">
            <summary>
            No Synchro Bus Connection.
            </summary>
        </member>
        <member name="T:Spea.AnlPhase">
            <summary>
            Enum contains all possible analog phases.
            </summary>
        </member>
        <member name="F:Spea.AnlPhase.APH1">
            <summary>
            APH1 = Analog phase 1.
            </summary>
        </member>
        <member name="F:Spea.AnlPhase.APH2">
            <summary>
            APH2 = Analog phase 2.
            </summary>
        </member>
        <member name="F:Spea.AnlPhase.APH3">
            <summary>
            APH3 = Analog phase 3.
            </summary>
        </member>
        <member name="F:Spea.AnlPhase.APH4">
            <summary>
            APH4 = Analog phase 4.
            </summary>
        </member>
        <member name="T:Spea.BoosterId">
            <summary>
            Enum contains all possible booster idetentifiers.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTV1">
            <summary>
            BSTV1 = Booster type V number 1.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTV2">
            <summary>
            BSTV2 = Booster type V number 2.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTV3">
            <summary>
            BSTV3 = Booster type V number 3.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTV4">
            <summary>
            BSTV4 = Booster type V number 4.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTI1">
            <summary>
            BSTI1 = Booster type I number 1.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTI2">
            <summary>
            BSTI2 = Booster type I number 2.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTI3">
            <summary>
            BSTI3 = Booster type I number 3.
            </summary>
        </member>
        <member name="F:Spea.BoosterId.BSTI4">
            <summary>
            BSTI4 = Booster type I number 4.
            </summary>
        </member>
        <member name="T:Spea.AnlRelMode">
            <summary>
            Enum contains all possible switching modes for analog relays.
            </summary>
        </member>
        <member name="F:Spea.AnlRelMode.SWITCHING">
            <summary>
            SWITCHING = SWITCHING means that, before connecting the desired test points, all the scanner relays are disconnected. This is the default mode, switching time is twice as long.
            </summary>
        </member>
        <member name="F:Spea.AnlRelMode.LATCHING">
            <summary>
            LATCHING = LATCHING means that at the same time the Test points are connected or disconnected.
            </summary>
        </member>
        <member name="T:Spea.InstrExtInput">
            <summary>
            Enum contains all possible external input sources for boosters/drivers.
            </summary>
        </member>
        <member name="F:Spea.InstrExtInput.MOBUS1">
            <summary>
            MOBUS1 = MOBUS1.
            </summary>
        </member>
        <member name="F:Spea.InstrExtInput.MOBUS2">
            <summary>
            MOBUS2 = MOBUS2.
            </summary>
        </member>
        <member name="F:Spea.InstrExtInput.EXTSOURCE">
            <summary>
            EXTSOURCE = Interface.
            </summary>
        </member>
        <member name="T:Spea.AnlRelTime">
            <summary>
            Enum contains all possible switching times for analog relays.
            </summary>
        </member>
        <member name="F:Spea.AnlRelTime.T1MS">
            <summary>
            T1MS = 1 msec.
            </summary>
        </member>
        <member name="F:Spea.AnlRelTime.T5MS">
            <summary>
            T5MS = 5 msec.
            </summary>
        </member>
        <member name="F:Spea.AnlRelTime.T10MS">
            <summary>
            T10MS = 10 msec.
            </summary>
        </member>
        <member name="T:Spea.OutSource">
            <summary>
            Enum contains all possible values for the outputsource.
            </summary>
        </member>
        <member name="F:Spea.OutSource.OS_INTERNAL">
            <summary>
            OS_INTERNAL = Internal, on-system timing generator.
            </summary>
        </member>
        <member name="F:Spea.OutSource.OS_INTERFACE">
            <summary>
            OS_INTERNAL = System Interface INPSYNC 1 ÷ 4 signals.
            </summary>
        </member>
        <member name="T:Spea.StartSource">
            <summary>
            Enum contains all possible values for the startsource.
            </summary>
        </member>
        <member name="F:Spea.StartSource.IMMEDIATE">
            <summary>
            IMMEDIATE = Internal (firmware).
            </summary>
        </member>
        <member name="F:Spea.StartSource.ACLINE">
            <summary>
            ACLINE = AC line.
            </summary>
        </member>
        <member name="F:Spea.StartSource.INPSYINC1">
            <summary>
            INPSYINC1 = System Interface INPSYINC 1 signal.
            </summary>
        </member>
        <member name="F:Spea.StartSource.INPSYINC2">
            <summary>
            INPSYINc2 = System Interface INPSYINC 2 signal.
            </summary>
        </member>
        <member name="F:Spea.StartSource.INPSYINC3">
            <summary>
            INPSYINC 3 = System Interface INPSYINC 3 signal.
            </summary>
        </member>
        <member name="F:Spea.StartSource.INPSYINC4">
            <summary>
            INPSYINC 4 = System Interface INPSYINC 4 signal.
            </summary>
        </member>
        <member name="F:Spea.StartSource.ATIMSTARTS">
            <summary>
            ATIMSTARTS = Start Flag connected to the Synchro Bus.
            </summary>
        </member>
        <member name="F:Spea.StartSource.ATIMSTARTE">
            <summary>
            ATIMSTARTE = Start Flag connected to the Ebus.
            </summary>
        </member>
        <member name="T:Spea.StartMode">
            <summary>
            Enum contains all possible values for the startmode.
            </summary>
        </member>
        <member name="F:Spea.StartMode.LEVEL">
            <summary>
            LEVEL = Start on LEVEL.
            </summary>
        </member>
        <member name="F:Spea.StartMode.EDGE">
            <summary>
            EDGE = Start on EDGE.
            </summary>
        </member>
        <member name="F:Spea.StartMode.UNRELEVANT">
            <summary>
            UNRELEVANT = No choice.
            </summary>
        </member>
        <member name="T:Spea.StartPol">
            <summary>
            Enum contains all possible values for the start polarity.
            </summary>
        </member>
        <member name="F:Spea.StartPol.DIRECT">
            <summary>
            DIRECT = Direct polarity.
            </summary>
        </member>
        <member name="F:Spea.StartPol.INVERTED">
            <summary>
            INVERTED = Inverted polarity.
            </summary>
        </member>
        <member name="F:Spea.StartPol.UNRELEVANT">
            <summary>
            UNRELEVANT = No choice.
            </summary>
        </member>
        <member name="T:Spea.AnlTimingSyncFlagID">
            <summary>
            Enum contains all possible flag-IDs for Analog timing sync.
            </summary>
        </member>
        <member name="F:Spea.AnlTimingSyncFlagID.APH1">
            <summary>
            APH1 = Analog phase 1.
            </summary>
        </member>
        <member name="F:Spea.AnlTimingSyncFlagID.APH2">
            <summary>
            APH2 = Analog phase 2.
            </summary>
        </member>
        <member name="F:Spea.AnlTimingSyncFlagID.APH3">
            <summary>
            APH3 = Analog phase 3.
            </summary>
        </member>
        <member name="F:Spea.AnlTimingSyncFlagID.APH4">
            <summary>
            APH4 = Analog phase 4.
            </summary>
        </member>
        <member name="F:Spea.AnlTimingSyncFlagID.ATIMSTARTS">
            <summary>
            ATIMSTARTS = Start Flag connected to the Synchro Bus.
            </summary>
        </member>
        <member name="F:Spea.AnlTimingSyncFlagID.ATIMSTARTE">
            <summary>
            ATIMSTARTE = Start Flag connected to the Ebus.
            </summary>
        </member>
        <member name="F:Spea.AnlTimingSyncFlagID.ATEST">
            <summary>
            ATEST = Analog Test.
            </summary>
        </member>
        <member name="T:Spea.Abus">
            <summary>
            Enum contains all possible Values for ABUS.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS1">
            <summary>
            ABUS1 = ABUS1.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS2">
            <summary>
            ABUS2 = ABUS2.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS3">
            <summary>
            ABUS3 = ABUS3.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS4">
            <summary>
            ABUS4 = ABUS4.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS5">
            <summary>
            ABUS5 = ABUS5.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS6">
            <summary>
            ABUS6 = ABUS6.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS7">
            <summary>
            ABUS7 = ABUS7.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUS8">
            <summary>
            ABUS8 = ABUS8.
            </summary>
        </member>
        <member name="F:Spea.Abus.ABUSALL">
            <summary>
            ABUSALL = All Abus Lines.
            </summary>
        </member>
        <member name="F:Spea.Abus.NONE">
            <summary>
            NONE = No Abus Lines.
            </summary>
        </member>
        <member name="T:Spea.Uabus">
            <summary>
            Enum contains all possible Values for UABUS.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW1">
            <summary>
            ROW1 = UABUS1.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW2">
            <summary>
            ROW2 = UABUS2.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW3">
            <summary>
            ROW3 = UABUS3.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW4">
            <summary>
            ROW4 = UABUS4.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW5">
            <summary>
            ROW5 = UABUS5.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW6">
            <summary>
            ROW6 = UABUS6.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW7">
            <summary>
            ROW7 = UABUS7.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROW8">
            <summary>
            ROW8 = UABUS8.
            </summary>
        </member>
        <member name="F:Spea.Uabus.ROWALL">
            <summary>
            All UABUS Rows.
            </summary>
        </member>
        <member name="T:Spea.Uabus5To8">
            <summary>
            Enum contains last 4 UABUS rows.
            </summary>
        </member>
        <member name="F:Spea.Uabus5To8.NONE">
            <summary>
            NONE = No UABUS.
            </summary>
        </member>
        <member name="F:Spea.Uabus5To8.ROW5">
            <summary>
            ROW5 = UABUS5.
            </summary>
        </member>
        <member name="F:Spea.Uabus5To8.ROW6">
            <summary>
            ROW6 = UABUS6.
            </summary>
        </member>
        <member name="F:Spea.Uabus5To8.ROW7">
            <summary>
            ROW7 = UABUS7.
            </summary>
        </member>
        <member name="F:Spea.Uabus5To8.ROW8">
            <summary>
            ROW8 = UABUS8.
            </summary>
        </member>
        <member name="T:Spea.Uabus1To4">
            <summary>
            Enum contains frist 4 UABUS rows.
            </summary>
        </member>
        <member name="F:Spea.Uabus1To4.ROW1">
            <summary>
            ROW1 = UABUS1.
            </summary>
        </member>
        <member name="F:Spea.Uabus1To4.ROW2">
            <summary>
            ROW2 = UABUS2.
            </summary>
        </member>
        <member name="F:Spea.Uabus1To4.ROW3">
            <summary>
            ROW3 = UABUS3.
            </summary>
        </member>
        <member name="F:Spea.Uabus1To4.ROW4">
            <summary>
            ROW4 = UABUS4.
            </summary>
        </member>
        <member name="F:Spea.Uabus1To4.NONE">
            <summary>
            NONE = no UABUS.
            </summary>
        </member>
        <member name="T:Spea.InstrInterfCon">
            <summary>
            Enum contains all possible booster/driver interface connection points.
            </summary>
        </member>
        <member name="F:Spea.InstrInterfCon.HOT">
            <summary>
            HOT = It identifies where to connect the positive pole of the booster/driver.
            </summary>
        </member>
        <member name="F:Spea.InstrInterfCon.COLD">
            <summary>
            COLD = It identifies where to connect the negative pole of the booster/driver.
            </summary>
        </member>
        <member name="F:Spea.InstrInterfCon.SENSE">
            <summary>
            SENSE = It identifies where to connect the sense of the booster/driver.
            </summary>
        </member>
        <member name="F:Spea.InstrInterfCon.ALL">
            <summary>
            ALL = Connects all the points of the booster/driver.
            </summary>
        </member>
        <member name="T:Spea.InstrBMUUabusCon">
            <summary>
            Enum contains all possible booster/driver BMU UABUS disconnection points.
            </summary>
        </member>
        <member name="F:Spea.InstrBMUUabusCon.HOT">
            <summary>
            HOT = It identifies where to connect the positive pole of the booster/driver.
            </summary>
        </member>
        <member name="F:Spea.InstrBMUUabusCon.COLD">
            <summary>
            COLD = It identifies where to connect the negative pole of the booster/driver.
            </summary>
        </member>
        <member name="F:Spea.InstrBMUUabusCon.ALL">
            <summary>
            ALL = Connects all the points of the booster/driver.
            </summary>
        </member>
        <member name="T:Spea.BMUHead">
            <summary>
            Enum contains all possible Values for BMU-Heads.
            </summary>
        </member>
        <member name="F:Spea.BMUHead.BMU1">
            <summary>
            BMU1 = Bottom Multiprobe 1.
            </summary>
        </member>
        <member name="F:Spea.BMUHead.BMU2">
            <summary>
             BMU2 = Bottom Multiprobe 2.
            </summary>
        </member>
        <member name="T:Spea.BMUPadId">
            <summary>
            Enum contains all possible Values for BMU pad identifiers.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad1">
            <summary>
            Pad1 = Pad Position 1.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad2">
            <summary>
            Pad2 = Pad Position 2.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad3">
            <summary>
            Pad3 = Pad Position 3.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad4">
            <summary>
            Pad4 = Pad Position 4.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad5">
            <summary>
            Pad5 = Pad Position 5.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad6">
            <summary>
            Pad6 = Pad Position 6.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad7">
            <summary>
            Pad7 = Pad Position 7.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad8">
            <summary>
            Pad8 = Pad Position 8.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad9">
            <summary>
            Pad9 = Pad Position 9.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad10">
            <summary>
            Pad10 = Pad Position 10.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad11">
            <summary>
            Pad11 = Pad Position 11.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad12">
            <summary>
            Pad12 = Pad Position 12.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad13">
            <summary>
            Pad13 = Pad Position 13.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad14">
            <summary>
            Pad14 = Pad Position 14.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad15">
            <summary>
            Pad15 = Pad Position 15.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.Pad16">
            <summary>
            Pad16 = Pad Position 16.
            </summary>
        </member>
        <member name="F:Spea.BMUPadId.PRB_PARK">
            <summary>
             PRB_PARK = Park Position.
            </summary>
        </member>
        <member name="T:Spea.BMUZDirection">
            <summary>
            Enum contains all possible Z-direcetion values for BMU-Heads.
            </summary>
        </member>
        <member name="F:Spea.BMUZDirection.BMU_UP">
            <summary>
            BMU_UP = Move BMU up.
            </summary>
        </member>
        <member name="F:Spea.BMUZDirection.BMU_DOWN">
            <summary>
             BMU_DOWN = Move BMU down.
            </summary>
        </member>
        <member name="T:Spea.BMUPin">
            <summary>
            Enum contains all possible Pin values for BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin1">
            <summary>
            Pin1 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin2">
            <summary>
            Pin2 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin3">
            <summary>
            Pin3 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin4">
            <summary>
            Pin4 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin5">
            <summary>
            Pin5 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin6">
            <summary>
            Pin6 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin7">
            <summary>
            Pin7 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin8">
            <summary>
            Pin8 on BMU.
            </summary>
        </member>
        <member name="F:Spea.BMUPin.Pin9">
            <summary>
            Pin9 on BMU.
            </summary>
        </member>
        <member name="T:Spea.BscanTestResult">
            <summary>
            Enum contains all possible resultvalues for Bscan-tests.
            </summary>
        </member>
        <member name="F:Spea.BscanTestResult.PASS">
            <summary>
            PASS      -> The result is PASS.
            </summary>
        </member>
        <member name="F:Spea.BscanTestResult.FAILH">
            <summary>
            FAILH     -> The result is over the high threshold.
            </summary>
        </member>
        <member name="F:Spea.BscanTestResult.FAILL">
            <summary>
            FAILL     -> The result is under the low threshold.
            </summary>
        </member>
        <member name="F:Spea.BscanTestResult.FAILBOTH">
            <summary>
            FAILBOTH  -> Failure over the high threshold and under the low threshold.
            </summary>
        </member>
        <member name="T:Spea.BscanTestPinLevel">
            <summary>
            Enum contains all possible pinlevel for Bscan-tests.
            </summary>
        </member>
        <member name="F:Spea.BscanTestPinLevel.LOW">
            <summary>
            LOW      -> Level is low.
            </summary>
        </member>
        <member name="F:Spea.BscanTestPinLevel.HIGH">
            <summary>
            HIGH     -> Level is high.
            </summary>
        </member>
        <member name="F:Spea.BscanTestPinLevel.THREE_STATE">
            <summary>
            THREE_STATE     -> Level is threestate.
            </summary>
        </member>
        <member name="T:Spea.BstRangeI">
            <summary>
            Enum contains all possible current ranges for boosters.
            </summary>
        </member>
        <member name="F:Spea.BstRangeI.R100mA">
            <summary>
            R100mA = 100mA range.
            </summary>
        </member>
        <member name="F:Spea.BstRangeI.R1A">
            <summary>
            R1A = 1A range.
            </summary>
        </member>
        <member name="F:Spea.BstRangeI.R3A">
            <summary>
            R3A = 3A range.
            </summary>
        </member>
        <member name="F:Spea.BstRangeI.AUTORANGE">
            <summary>
            AUTORANGE = chooses range automatically.
            </summary>
        </member>
        <member name="T:Spea.OutputFormat">
            <summary>
            Enum contains all possible output voltage origins for boosters/drivers.
            </summary>
        </member>
        <member name="F:Spea.OutputFormat.CONT_OFF">
            <summary>
            CONT_OFF = Continous off.
            </summary>
        </member>
        <member name="F:Spea.OutputFormat.CONT_ON">
            <summary>
            CONT_ON = Continous on.
            </summary>
        </member>
        <member name="F:Spea.OutputFormat.D_PULSE">
            <summary>
            D_PULSE = Direct pulse.
            </summary>
        </member>
        <member name="F:Spea.OutputFormat.I_PULSE">
            <summary>
            I_PULSE = Invert pulse.
            </summary>
        </member>
        <member name="T:Spea.BstSbusCon">
            <summary>
            Enum contains all possible Sbus-Line connection points for boosters.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS1">
            <summary>
            Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS2">
            <summary>
            Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS3">
            <summary>
            Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS4">
            <summary>
            Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS5">
            <summary>
            Synchro Bus 5.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS6">
            <summary>
            Synchro Bus 6.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS7">
            <summary>
            Synchro Bus 7.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.SBUS8">
            <summary>
            Synchro Bus 8.
            </summary>
        </member>
        <member name="F:Spea.BstSbusCon.NONE">
            <summary>
            None = no connection.
            </summary>
        </member>
        <member name="T:Spea.BstTimingFlags">
            <summary>
            Enum contains all possible timing flags for boosters.
            </summary>
        </member>
        <member name="F:Spea.BstTimingFlags.TIM1">
            <summary>
            TIM1 = Timing Flag 1 (default=SBUS1[ATEST]).
            </summary>
        </member>
        <member name="F:Spea.BstTimingFlags.TIM2">
            <summary>
            TIM2 = Timing Flag 2 (default=SBUS2[APH1]).
            </summary>
        </member>
        <member name="F:Spea.BstTimingFlags.TIM3">
            <summary>
            TIM3 = Timing Flag 3 (default=SBUS3[APH2]).
            </summary>
        </member>
        <member name="F:Spea.BstTimingFlags.TIM4">
            <summary>
            TIM4 = Timing Flag4 (default=SBUS4[APH3]).
            </summary>
        </member>
        <member name="T:Spea.DriTimingFlags">
            <summary>
            Enum contains all possible timing flags for drivers.
            </summary>
        </member>
        <member name="F:Spea.DriTimingFlags.TIM1">
            <summary>
            TIM1 = Timing Flag 1 (default=SBUS1[ATEST]).
            </summary>
        </member>
        <member name="F:Spea.DriTimingFlags.TIM2">
            <summary>
            TIM2 = Timing Flag 2 (default=SBUS2[APH1]).
            </summary>
        </member>
        <member name="F:Spea.DriTimingFlags.TIM3">
            <summary>
            TIM3 = Timing Flag 3 (default=SBUS3[APH2]).
            </summary>
        </member>
        <member name="F:Spea.DriTimingFlags.TIM4">
            <summary>
            TIM4 = Timing Flag4 (default=SBUS4[APH3]).
            </summary>
        </member>
        <member name="T:Spea.AbusMode">
            <summary>
            Enum contains all possible ABUS modes.
            </summary>
        </member>
        <member name="F:Spea.AbusMode.ROW_8">
            <summary>
            ROW_8 = The odd channels are connected to the ABUS lines 1 ÷ 4.The even channels are connected to the ABUS lines 5 ÷ 8.
            </summary>
        </member>
        <member name="F:Spea.AbusMode.ROW_4">
            <summary>
            ROW_4 = The even and the odd channels are connected to the ABUS lines 1 ÷ 4.
            </summary>
        </member>
        <member name="T:Spea.CntInstrId">
            <summary>
            Enum contains all instrument identifiers for counters.
            </summary>
        </member>
        <member name="F:Spea.CntInstrId.CNT1">
            <summary>
            CNT1 = Counter 1.
            </summary>
        </member>
        <member name="F:Spea.CntInstrId.CNT2">
            <summary>
            CNT2 = Counter2.
            </summary>
        </member>
        <member name="T:Spea.CntRefCon">
            <summary>
            Enum contains all possible counter refernce connections.
            </summary>
        </member>
        <member name="F:Spea.CntRefCon.ABUS4">
            <summary>
            ABUS4 = Abus line 4.
            </summary>
        </member>
        <member name="F:Spea.CntRefCon.ABUS8">
            <summary>
            ABUS8 = Abus line 8.
            </summary>
        </member>
        <member name="F:Spea.CntRefCon.EXTERNAL_REF">
            <summary>
            EXTERNAL_REF = Reference connected to EXTCOM_CNT.
            </summary>
        </member>
        <member name="F:Spea.CntRefCon.NONE">
            <summary>
            NONE = no connection.
            </summary>
        </member>
        <member name="T:Spea.CntDvmCon">
            <summary>
            Enum contains all possible counter connections connections.
            </summary>
        </member>
        <member name="F:Spea.CntDvmCon.DVM1">
            <summary>
            DVM1 = Digital Voltmeter 1.
            </summary>
        </member>
        <member name="F:Spea.CntDvmCon.DVM2">
            <summary>
            DVM2 = Digital Voltmeter 2.
            </summary>
        </member>
        <member name="F:Spea.CntDvmCon.NONE">
            <summary>
            NONE = no connection.
            </summary>
        </member>
        <member name="T:Spea.CntConFlag">
            <summary>
            Enum contains all possible counter connection flags.
            </summary>
        </member>
        <member name="F:Spea.CntConFlag.CNT_CHA">
            <summary>
            CNT_CHA = Counter channel A.
            </summary>
        </member>
        <member name="F:Spea.CntConFlag.CNT_CHB">
            <summary>
            CNT_CHB = Counter channel B.
            </summary>
        </member>
        <member name="F:Spea.CntConFlag.NONE">
            <summary>
            NONE = no connection.
            </summary>
        </member>
        <member name="T:Spea.CntInterfCon">
            <summary>
            Enum contains all possible counter interface connections.
            </summary>
        </member>
        <member name="F:Spea.CntInterfCon.EXTCH1_CNT">
            <summary>
            EXTCH1_CNT = External channel 1.
            </summary>
        </member>
        <member name="F:Spea.CntInterfCon.EXTCH2_CNT">
            <summary>
            EXTCH2_CNT = External channel 2.
            </summary>
        </member>
        <member name="F:Spea.CntInterfCon.EXTCH3_CNT">
            <summary>
            EXTCH3_CNT = External channel 3.
            </summary>
        </member>
        <member name="F:Spea.CntInterfCon.EXTCH4_CNT">
            <summary>
            EXTCH4_CNT = External channel 4.
            </summary>
        </member>
        <member name="F:Spea.CntInterfCon.NONE">
            <summary>
            NONE = no connection.
            </summary>
        </member>
        <member name="T:Spea.CntVoltRange">
            <summary>
            Enum contains all possible voltage ranges for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntVoltRange.HV">
            <summary>
            HV = Up to 100V.
            </summary>
        </member>
        <member name="F:Spea.CntVoltRange.LV">
            <summary>
            LV = Up to 10V.
            </summary>
        </member>
        <member name="T:Spea.CntSlope">
            <summary>
            Enum contains all possible triggermodes for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntSlope.SLOPE_RISE">
            <summary>
            SLOPE_RISE = It is used to trigger the counter on the rising edge of the signal.
            </summary>
        </member>
        <member name="F:Spea.CntSlope.SLOPE_FALL">
            <summary>
            SLOPE_FALL = It is used to trigger the counter on the falling edge of the signal.
            </summary>
        </member>
        <member name="T:Spea.CntFreqResol">
            <summary>
            Enum contains all possible frequency resolutions for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntFreqResol.RSL_0_1Hz">
            <summary>
            RSL_0_1Hz = Range 0 ÷ 9.9999999 MHz.
            </summary>
        </member>
        <member name="F:Spea.CntFreqResol.RSL_1Hz">
            <summary>
            RSL_1Hz = Range 0 ÷ 9.999999 MHz.
            </summary>
        </member>
        <member name="F:Spea.CntFreqResol.RSL_10Hz">
            <summary>
            RSL_10Hz = Range 0 ÷ 9.99999 MHz.
            </summary>
        </member>
        <member name="F:Spea.CntFreqResol.RSL_100Hz">
            <summary>
            RSL_100Hz = Range 0 ÷ 9.9999 MHz.
            </summary>
        </member>
        <member name="F:Spea.CntFreqResol.RSL_1KHz">
            <summary>
            RSL_1KHz = Range 0 ÷ 9.999 MHz.
            </summary>
        </member>
        <member name="F:Spea.CntFreqResol.RSL_10KHz">
            <summary>
            RSL_10KHz = Range 0 ÷ 9.99 MHz.
            </summary>
        </member>
        <member name="F:Spea.CntFreqResol.RSL_100KHz">
            <summary>
            RSL_100KHz = Range 0 ÷ 9.9 MHz.
            </summary>
        </member>
        <member name="T:Spea.CntPeriodResol">
            <summary>
            Enum contains all possible period resolutions for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntPeriodResol.RSL_0_1ps">
            <summary>
            RSL_0_1Hz = Range 0 ÷ 99.9999999 us.
            </summary>
        </member>
        <member name="F:Spea.CntPeriodResol.RSL_1ps">
            <summary>
            RSL_1ps = Range 0 ÷ 999.999999 us.
            </summary>
        </member>
        <member name="F:Spea.CntPeriodResol.RSL_10ps">
            <summary>
            RSL_10ps = Range 0 ÷ 9.99999999 ms.
            </summary>
        </member>
        <member name="F:Spea.CntPeriodResol.RSL_100ps">
            <summary>
            RSL_100ps = Range 0 ÷ 99.9999999 ms.
            </summary>
        </member>
        <member name="F:Spea.CntPeriodResol.RSL_1ns">
            <summary>
            RSL_1ns = Range 0 ÷ 999.999999 ms.
            </summary>
        </member>
        <member name="F:Spea.CntPeriodResol.RSL_10ns">
            <summary>
            RSL_10ns = Range 0 ÷ 9.99999999 s.
            </summary>
        </member>
        <member name="F:Spea.CntPeriodResol.RSL_100ns">
            <summary>
            RSL_100ns = Range 0 ÷ 99.9999999 s. Only for YAMPU.
            </summary>
        </member>
        <member name="T:Spea.CntRatioResol">
            <summary>
            Enum contains all possible ratio resolutions for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntRatioResol.RSL_0_000001">
            <summary>
            RSL_0_000001 = Range 0 ÷ 999.999999.
            </summary>
        </member>
        <member name="F:Spea.CntRatioResol.RSL_0_00001">
            <summary>
            RSL_0_00001 = Range 0 ÷ 9999.99999.
            </summary>
        </member>
        <member name="F:Spea.CntRatioResol.RSL_0_0001">
            <summary>
            RSL_0_0001 = Range 0 ÷ 99999.9999.
            </summary>
        </member>
        <member name="F:Spea.CntRatioResol.RSL_0_001">
            <summary>
            RSL_0_001 = Range 0 ÷ 999999.999.
            </summary>
        </member>
        <member name="F:Spea.CntRatioResol.RSL_0_01">
            <summary>
            RSL_0_01 = Range 0 ÷ 9999999.99.
            </summary>
        </member>
        <member name="F:Spea.CntRatioResol.RSL_0_1">
            <summary>
            RSL_0_1 = Range 0 ÷ 99999999.9.
            </summary>
        </member>
        <member name="F:Spea.CntRatioResol.RSL_1">
            <summary>
            RSL_1 = Range 0 ÷ 999999999.
            </summary>
        </member>
        <member name="T:Spea.CntMeasType">
            <summary>
            Enum contains all possible measuring types for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntMeasType.MU_FREQ">
            <summary>
            MU_FREQ = If the measure done is a frequency measurement.
            </summary>
        </member>
        <member name="F:Spea.CntMeasType.MU_TIME">
            <summary>
            MU_TIME = If the measure done is a period measurement or time interval measurement.
            </summary>
        </member>
        <member name="F:Spea.CntMeasType.MU_NONE">
            <summary>
            MU_NONE = If the measure done is a frequency ratio measurement or a event count measurement.
            </summary>
        </member>
        <member name="T:Spea.CntSyncFlags">
            <summary>
            Enum contains all possible syncing flags for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntSyncFlags.CNT_CHA">
            <summary>
            CNT_CHA = Channel A (input flag).
            </summary>
        </member>
        <member name="F:Spea.CntSyncFlags.CNT_CHB">
            <summary>
            CNT_CHB = Channel B (input flag).
            </summary>
        </member>
        <member name="F:Spea.CntSyncFlags.CNT_TEST">
            <summary>
            CNT_TEST = TEST (input flag).
            </summary>
        </member>
        <member name="F:Spea.CntSyncFlags.CNT_EXEC">
            <summary>
            CNT_EXEC = EXEC (input flag).
            </summary>
        </member>
        <member name="F:Spea.CntSyncFlags.CNT_OVER_FLOW">
            <summary>
            CNT_OVER_FLOW = overflow (output flag).
            </summary>
        </member>
        <member name="F:Spea.CntSyncFlags.CNT_MEAS_PRO">
            <summary>
            CNT_MEAS_PRO = measure pro (output flag).
            </summary>
        </member>
        <member name="F:Spea.CntSyncFlags.CNT_END_MEAS">
            <summary>
            CNT_END_MEAS = measure end (output flag).
            </summary>
        </member>
        <member name="T:Spea.CntPolarity">
            <summary>
            Enum contains all possible polarity options for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntPolarity.DIRECT">
            <summary>
            DIRECT = Direct polarity.
            </summary>
        </member>
        <member name="F:Spea.CntPolarity.INVERTED">
            <summary>
            INVERTED = Inverted polarity.
            </summary>
        </member>
        <member name="T:Spea.CntSyncLine">
            <summary>
            Enum contains all possible syncing line options for the counter.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS1">
            <summary>
            Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS2">
            <summary>
            Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS3">
            <summary>
            Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS4">
            <summary>
            Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS5">
            <summary>
            Synchro Bus 5.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS6">
            <summary>
            Synchro Bus 6.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS7">
            <summary>
            Synchro Bus 7.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.SBUS8">
            <summary>
            Synchro Bus 8.
            </summary>
        </member>
        <member name="F:Spea.CntSyncLine.NONE">
            <summary>
            No connection.
            </summary>
        </member>
        <member name="T:Spea.DCALoadInstr">
            <summary>
            Enum contains all instrument Ids for the DC active loads.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL1">
            <summary>
            Active Load 1.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL2">
            <summary>
            Active Load 2.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL3">
            <summary>
            Active Load 3.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL4">
            <summary>
            Active Load 4.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL5">
            <summary>
            Active Load 5.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL6">
            <summary>
            Active Load 6.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL7">
            <summary>
            Active Load 7.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.DCAL8">
            <summary>
            Active Load 8.
            </summary>
        </member>
        <member name="F:Spea.DCALoadInstr.NONE">
            <summary>
            No connection.
            </summary>
        </member>
        <member name="T:Spea.DCALVoltageRange">
            <summary>
            Enum contains all possible voltage ranges for DC active loads.
            </summary>
        </member>
        <member name="F:Spea.DCALVoltageRange.R100mV">
            <summary>
            R100mV = 100mV range.
            </summary>
        </member>
        <member name="F:Spea.DCALVoltageRange.R1V">
            <summary>
            R1V = 1V range.
            </summary>
        </member>
        <member name="F:Spea.DCALVoltageRange.R10V">
            <summary>
            R10 = 10V range.
            </summary>
        </member>
        <member name="T:Spea.DCALRippleMeasMode">
            <summary>
            Enum contains all possible ripple measurment modes for DC active loads.
            </summary>
        </member>
        <member name="F:Spea.DCALRippleMeasMode.RIPPLE_TOTAL">
            <summary>
            RIPPLE_TOTAL = Range 10Hz ÷ 1MHz.
            </summary>
        </member>
        <member name="F:Spea.DCALRippleMeasMode.RIPPLE_LINE">
            <summary>
            RIPPLE_LINE = Range 25Hz ÷ 1.5KHz.
            </summary>
        </member>
        <member name="F:Spea.DCALRippleMeasMode.RIPPLE_SWITCHING">
            <summary>
            RIPPLE_SWITCHING = Range 20KHz ÷ 150KHz.
            </summary>
        </member>
        <member name="F:Spea.DCALRippleMeasMode.RIPPLE_SPIKES">
            <summary>
            RIPPLE_SPIKES = Range 250KHz ÷ 1MHz.
            </summary>
        </member>
        <member name="T:Spea.DcGenInstrId">
            <summary>
            Enum contains all possible DC generator Ids.
            </summary>
        </member>
        <member name="F:Spea.DcGenInstrId.DCGEN1">
            <summary>
            DCGEN1 = Dc-generator 1.
            </summary>
        </member>
        <member name="F:Spea.DcGenInstrId.DCGEN2">
            <summary>
            DCGEN2 = Dc-generator 2.
            </summary>
        </member>
        <member name="F:Spea.DcGenInstrId.DCGEN3">
            <summary>
            DCGEN3 = Dc-generator 3.
            </summary>
        </member>
        <member name="F:Spea.DcGenInstrId.DCGEN4">
            <summary>
            DCGEN4 = Dc-generator 4.
            </summary>
        </member>
        <member name="T:Spea.DcGenOut">
            <summary>
            Enum contains all possible DC generator output values.
            </summary>
        </member>
        <member name="F:Spea.DcGenOut.OUT_A">
            <summary>
            OUT_A = Output A.
            </summary>
        </member>
        <member name="F:Spea.DcGenOut.OUT_B">
            <summary>
            OUT_B = Output B.
            </summary>
        </member>
        <member name="F:Spea.DcGenOut.OUT_ALL">
            <summary>
            OUT_ALL = All outputs.
            </summary>
        </member>
        <member name="T:Spea.ImpedancePattern">
            <summary>
            Enum contains all possible impedances for DigStrTpOutputImpedanceSet.
            </summary>
        </member>
        <member name="F:Spea.ImpedancePattern.Z_5_OHM">
            <summary>
            Z_5_OHM = 5 Ohm Impedance
            </summary>
        </member>
        <member name="F:Spea.ImpedancePattern.Z_50_OHM">
            <summary>
            Z_50_OHM = 50 Ohm Impedance
            </summary>
        </member>
        <member name="T:Spea.AquisitionLevel">
            <summary>
            Enum contains all possible levels for <see cref="M:Spea.LeoF.DigTimAcquisitionSet(System.Int32,Spea.CntSlope,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:Spea.AquisitionLevel.NONE">
            <summary>
            NONE = Start of the acquisition is always enabled
            </summary>
        </member>
        <member name="F:Spea.AquisitionLevel.ENABLE_LOW">
            <summary>
            ENABLE_LOW = Start of the acquisition is enabled when Enable signal is at low level
            </summary>
        </member>
        <member name="F:Spea.AquisitionLevel.ENABLE_HIGH">
            <summary>
            ENABLE_HIGH = Start of the acquisition is enabled when Enable signal is at high level
            </summary>
        </member>
        <member name="T:Spea.AcquisitionResolution">
            <summary>
            Enum contains all possible return values for <see cref="M:Spea.LeoF.DigTimAcquisitionSet(System.Int32,Spea.CntSlope,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:Spea.AcquisitionResolution.RSL_50ns">
            <summary>
            Resolution 50ns.
            </summary>
        </member>
        <member name="F:Spea.AcquisitionResolution.RSL_100ns">
            <summary>
            Resolution 100ns.
            </summary>
        </member>
        <member name="F:Spea.AcquisitionResolution.RSL_200ns">
            <summary>
            Resolution 200ns.
            </summary>
        </member>
        <member name="T:Spea.DriSelection">
            <summary>
            Enum contains all possible selections for Drivers.
            </summary>
        </member>
        <member name="F:Spea.DriSelection.DRI1">
            <summary>
            DRI1 = It identifies the driver module number 1
            </summary>
        </member>
        <member name="F:Spea.DriSelection.DRI2">
            <summary>
            DRI2 = It identifies the driver module number 2
            </summary>
        </member>
        <member name="T:Spea.DriverId">
            <summary>
            Enum contains all possible driver idetentifiers.
            </summary>
        </member>
        <member name="F:Spea.DriverId.DRI1">
            <summary>
            DRI1 = It identifies the driver module number 1.
            </summary>
        </member>
        <member name="F:Spea.DriverId.DRI2">
            <summary>
            DRI2 = It identifies the driver module number 2.
            </summary>
        </member>
        <member name="T:Spea.MbusLineDri">
            <summary>
            Enum contains all possible selections for MBUSLINE for DriReadbackIConnectMbus.
            </summary>
        </member>
        <member name="F:Spea.MbusLineDri.MBUS1">
            <summary>
            MbusLine 1.
            </summary>
        </member>
        <member name="F:Spea.MbusLineDri.MBUS2">
            <summary>
            MbusLine 2.
            </summary>
        </member>
        <member name="F:Spea.MbusLineDri.MBUS3">
            <summary>
            MbusLine 3.
            </summary>
        </member>
        <member name="F:Spea.MbusLineDri.MBUS4">
            <summary>
            MbusLine 4.
            </summary>
        </member>
        <member name="T:Spea.Gain">
            <summary>
            Enum contains all possible selections for GAIN for DriReadbackIConnectMbus.
            </summary>
        </member>
        <member name="F:Spea.Gain.GAINX1">
            <summary>
            Gain x1.
            </summary>
        </member>
        <member name="F:Spea.Gain.GAINX10">
            <summary>
            Gain x10.
            </summary>
        </member>
        <member name="T:Spea.AmplitudeRange">
            <summary>
            Enum contains all possible amplitude voltage ranges for driver.
            </summary>
        </member>
        <member name="F:Spea.AmplitudeRange.R1V">
            <summary>
            R1V = 1V range.
            </summary>
        </member>
        <member name="F:Spea.AmplitudeRange.R10V">
            <summary>
            R10 = 10V range.
            </summary>
        </member>
        <member name="T:Spea.DriGeneratorIrange">
            <summary>
            Enum contains all possible current ranges for driver signal generator.
            </summary>
        </member>
        <member name="F:Spea.DriGeneratorIrange.R3A">
            <summary>
            R1mA = 1mA range.
            </summary>
        </member>
        <member name="F:Spea.DriGeneratorIrange.R1A">
            <summary>
            R10mA = 10mA range.
            </summary>
        </member>
        <member name="F:Spea.DriGeneratorIrange.R100mA">
            <summary>
            R100mA = 100mA range.
            </summary>
        </member>
        <member name="T:Spea.WaveFormType">
            <summary>
            Enum contains all possible waveform types for driver signal generator.
            </summary>
        </member>
        <member name="F:Spea.WaveFormType.SINE">
            <summary>
            SINE = Sine waveform.
            </summary>
        </member>
        <member name="F:Spea.WaveFormType.TRIANGLE">
            <summary>
            TRIANGLE = Triangle waveform.
            </summary>
        </member>
        <member name="T:Spea.DriRangeI">
            <summary>
            Enum contains all possible current ranges for drivers.
            </summary>
        </member>
        <member name="F:Spea.DriRangeI.R10uA">
            <summary>
            R10uA = 10uA range (admitted I value: 100nA - 10uA).
            </summary>
        </member>
        <member name="F:Spea.DriRangeI.R100uA">
            <summary>
            R100uA = 100uA range (admitted I value: 1uA - 100uA).
            </summary>
        </member>
        <member name="F:Spea.DriRangeI.R1mA">
            <summary>
            R1mA = 1mA range (admitted I value: 10uA - 1mA).
            </summary>
        </member>
        <member name="F:Spea.DriRangeI.R10mA">
            <summary>
            R10mA = 10mA range (admitted I value: 100uA - 10mA).
            </summary>
        </member>
        <member name="F:Spea.DriRangeI.R100mA">
            <summary>
            R100mA = 100mA range (admitted I value: 1mA - 100mA).
            </summary>
        </member>
        <member name="F:Spea.DriRangeI.R1A">
            <summary>
            R1A = 1A range (admitted I value: 10mA - 1A).
            </summary>
        </member>
        <member name="F:Spea.DriRangeI.AUTORANGE">
            <summary>
            AUTORANGE = chooses range automatically.
            </summary>
        </member>
        <member name="T:Spea.DriVrange">
            <summary>
            Enum contains all possible voltage ranges for drivers.
            </summary>
        </member>
        <member name="F:Spea.DriVrange.R10V">
            <summary>
            R10V = 10V range: -10V to +10V.
            </summary>
        </member>
        <member name="F:Spea.DriVrange.R50V">
            <summary>
            R50V = 50V range: -50V to +50V.
            </summary>
        </member>
        <member name="F:Spea.DriVrange.AUTORANGE">
            <summary>
            AUTORANGE = chooses range automatically.
            </summary>
        </member>
        <member name="T:Spea.DriOutMode">
            <summary>
            Enum contains all possible output modes for driver.
            </summary>
        </member>
        <member name="F:Spea.DriOutMode.SIGNAL">
            <summary>
            SIGNAL = Signal Output mode (lower than 1mA).
            </summary>
        </member>
        <member name="F:Spea.DriOutMode.DIGITAL">
            <summary>
            DIGITAL = Digital Output mode.
            </summary>
        </member>
        <member name="F:Spea.DriOutMode.DIRECT">
            <summary>
            DIRECT = Direct Output mode.
            </summary>
        </member>
        <member name="F:Spea.DriOutMode.POWERV">
            <summary>
            POWERV = Output mode for fast voltage signals. <para/>
            Caution is needed when using it, since during Toff the HOT wire is shorted with the COLD wire for discharging stray capacitance. <br/>
            If capacitance is too high, high currents are expected that may damage the Driver output FET.
            </summary>
        </member>
        <member name="F:Spea.DriOutMode.POWERI">
            <summary>
            POWERV = Output mode for fast current signals. <para/>
            Caution is needed when using it, since during Toff the HOT wire is shorted with the COLD wire for discharging stray capacitance. <br/>
            If capacitance is too high, high currents are expected that may damage the Driver output FET.
            </summary>
        </member>
        <member name="T:Spea.SlewRate">
            <summary>
            Enum contains all possible slew rates for drivers and guard.
            </summary>
        </member>
        <member name="F:Spea.SlewRate.VERY_FAST">
            <summary>
            VERY_FAST = Very fast slew rate.
            </summary>
        </member>
        <member name="F:Spea.SlewRate.FAST">
            <summary>
            FAST = Fast slew rate.
            </summary>
        </member>
        <member name="F:Spea.SlewRate.NORMAL">
            <summary>
            NORMAL = Normal slew rate.
            </summary>
        </member>
        <member name="F:Spea.SlewRate.SLOW">
            <summary>
            SLOW = Slow slew rate.
            </summary>
        </member>
        <member name="F:Spea.SlewRate.VERY_SLOW">
            <summary>
            VERY_SLOW = Very slow slew rate.
            </summary>
        </member>
        <member name="T:Spea.ByPass">
            <summary>
            Enum contains all possible bypass settings for drivers.
            </summary>
        </member>
        <member name="F:Spea.ByPass.BY_PASS_OFF">
            <summary>
            VERY_FAST = ByPass is off.
            </summary>
        </member>
        <member name="F:Spea.ByPass.BY_PASS_ON">
            <summary>
            BY_PASS_ON = ByPass is on.
            </summary>
        </member>
        <member name="T:Spea.DvmId">
            <summary>
            Enum contains all possible Measurement Module numbers.
            </summary>
        </member>
        <member name="F:Spea.DvmId.DVM1">
            <summary>
            DVM1 = Digital Voltmeter 1.
            </summary>
        </member>
        <member name="F:Spea.DvmId.DVM2">
            <summary>
            DVM2 = Digital Voltmeter 2.
            </summary>
        </member>
        <member name="T:Spea.DvmAbus">
            <summary>
            Enum contains all possible Values for DVM ABUS Connections.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS1">
            <summary>
            ABUS1 = ABUS1.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS2">
            <summary>
            ABUS2 = ABUS2.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS3">
            <summary>
            ABUS3 = ABUS3.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS4">
            <summary>
            ABUS4 = ABUS4.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS5">
            <summary>
            ABUS5 = ABUS5.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS6">
            <summary>
            ABUS6 = ABUS6.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS7">
            <summary>
            ABUS7 = ABUS7.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUS8">
            <summary>
            ABUS8 = ABUS8.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.ABUSALL">
            <summary>
            ABUSALL = All Abus Lines.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.INTERNAL_REF">
            <summary>
            INTERNAL_REF = Internal reference.
            </summary>
        </member>
        <member name="F:Spea.DvmAbus.NONE">
            <summary>
            NONE = No Abus Lines.
            </summary>
        </member>
        <member name="T:Spea.DvmInterfaceHot">
            <summary>
            Enum contains all possible Values for DVM Interface Hot Connections.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceHot.EXTCH1P">
            <summary>
            EXTCH1P = EXTCH1P.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceHot.EXTCH2P">
            <summary>
            EXTCH2P = EXTCH2P.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceHot.INTERNAL_REF">
            <summary>
            INTERNAL_REF = Internal reference.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceHot.NONE">
            <summary>
            NONE = No Connection.
            </summary>
        </member>
        <member name="T:Spea.DvmInterfaceCold">
            <summary>
            Enum contains all possible Values for DVM Interface Cold Connections.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceCold.EXTCH1N">
            <summary>
            EXTCH1N = EXTCH1N.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceCold.EXTCH2N">
            <summary>
            EXTCH2N = EXTCH2N.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceCold.EXTERNAL_REF">
            <summary>
            EXTERNAL_REF = External reference (EXTCOM).
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceCold.INTERNAL_REF">
            <summary>
            INTERNAL_REF = Internal reference.
            </summary>
        </member>
        <member name="F:Spea.DvmInterfaceCold.NONE">
            <summary>
            NONE = No Connection.
            </summary>
        </member>
        <member name="T:Spea.DvmMbus">
            <summary>
            Enum contains all possible selections for DVM MBUS Connections.
            </summary>
        </member>
        <member name="F:Spea.DvmMbus.MBUS1">
            <summary>
            MbusLine 1.
            </summary>
        </member>
        <member name="F:Spea.DvmMbus.MBUS2">
            <summary>
            MbusLine 2.
            </summary>
        </member>
        <member name="F:Spea.DvmMbus.MBUS3">
            <summary>
            MbusLine 3.
            </summary>
        </member>
        <member name="F:Spea.DvmMbus.MBUS4">
            <summary>
            MbusLine 4.
            </summary>
        </member>
        <member name="F:Spea.DvmMbus.INTERNAL_REF">
            <summary>
            INTERNAL_REF = Internal reference.
            </summary>
        </member>
        <member name="F:Spea.DvmMbus.NONE">
            <summary>
            No Mbus Connection.
            </summary>
        </member>
        <member name="T:Spea.DvmMeasTypeReturn">
            <summary>
            Enum contains all possible returned measuring types for the DVM.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_VOLT">
            <summary>
            MU_VOLT = Direct voltage measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_CURR">
            <summary>
            MU_CURR = Direct current measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_VOLT_RMS">
            <summary>
            MU_VOLT_RMS = RMS voltage measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_CURR_RMS">
            <summary>
            MU_CURR_RMS = RMS current measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_VOLT_PP">
            <summary>
            MU_VOLT_PP = Peak to peak voltage measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_CURR_PP">
            <summary>
            MU_CURR_PP = Peak to peak current measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_VOLT_PK">
            <summary>
            MU_VOLT_PK = Peak voltage measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_CURR_PK">
            <summary>
            MU_CURR_PK = Peak current measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasTypeReturn.MU_OVER_RANGE">
            <summary>
            MU_OVER_RANGE = The value to be measured is over the selected range of the Dvm.
            </summary>
        </member>
        <member name="T:Spea.DvmResult">
            <summary>
            Enum contains all possible return values for DVM Result.
            </summary>
        </member>
        <member name="F:Spea.DvmResult.CPASS">
            <summary>
            CPASS = The Result is pass.
            </summary>
        </member>
        <member name="F:Spea.DvmResult.CHFAIL">
            <summary>
            CHFAIL = The Result ist over the highthreshold.
            </summary>
        </member>
        <member name="F:Spea.DvmResult.CLFAIL">
            <summary>
            CLFAIL = The Result is under the low threshold.
            </summary>
        </member>
        <member name="F:Spea.DvmResult.CFAIL">
            <summary>
            CFAIL = Failure over the high threshold and under the low threshold.
            </summary>
        </member>
        <member name="T:Spea.DvmInputStage">
            <summary>
            Enum contains all possible Measurement input stage parameters.
            </summary>
        </member>
        <member name="F:Spea.DvmInputStage.LV">
            <summary>
            LV = Low voltage, input impedance 100MΩ (up to 100KHz).
            </summary>
        </member>
        <member name="F:Spea.DvmInputStage.HVHZ">
            <summary>
            HVHZ = High voltage, input impedance 10MΩ (up to 10KHz).
            </summary>
        </member>
        <member name="F:Spea.DvmInputStage.HVLZ">
            <summary>
            HVLZ = High voltage, input impedance 1MΩ (up to 100KHz) [NOT AVAILABLE FOR YAICT].
            </summary>
        </member>
        <member name="T:Spea.DvmCoupling">
            <summary>
            Enum contains all possible Measurement coupling parameters.
            </summary>
        </member>
        <member name="F:Spea.DvmCoupling.CPL_DC">
            <summary>
            CPL_DC = DC measurement coupling.
            </summary>
        </member>
        <member name="F:Spea.DvmCoupling.CPL_AC">
            <summary>
            CPL_AC = AC measurement coupling.
            </summary>
        </member>
        <member name="T:Spea.DvmFilter">
            <summary>
            Enum contains all possible Measurement filter parameters.
            </summary>
        </member>
        <member name="F:Spea.DvmFilter.LPF_NONE">
            <summary>
            LPF_NONE = No filter.
            </summary>
        </member>
        <member name="F:Spea.DvmFilter.LPF_25Hz">
            <summary>
            LPF_25Hz = Low pass filter 25Hz.
            </summary>
        </member>
        <member name="F:Spea.DvmFilter.LPF_250Hz">
            <summary>
            LPF_250Hz = Low pass filter 250Hz.
            </summary>
        </member>
        <member name="F:Spea.DvmFilter.LPF_2_5KHz">
            <summary>
            LPF_2_5KHz = Low pass filter 2.5KHz.
            </summary>
        </member>
        <member name="F:Spea.DvmFilter.LPF_25KHz">
            <summary>
            LPF_25KHz = Low pass filter 25KHz.
            </summary>
        </member>
        <member name="T:Spea.DvmVRange">
            <summary>
            Enum contains all possible Measurement voltage range parameters.
            </summary>
        </member>
        <member name="F:Spea.DvmVRange.R100mV">
            <summary>
            R100mV = Only for input stage LV (Range 100mV).
            </summary>
        </member>
        <member name="F:Spea.DvmVRange.R1V">
            <summary>
            R1V = Only for input stage LV and HV (Range 1V).
            </summary>
        </member>
        <member name="F:Spea.DvmVRange.R10V">
            <summary>
            R10V = Only for input stage LV and HV (Range 10V).
            </summary>
        </member>
        <member name="F:Spea.DvmVRange.R100V">
            <summary>
            R100V = Only for input stage HV (Range 100V).
            </summary>
        </member>
        <member name="T:Spea.DvmMeasMode">
            <summary>
            Enum contains all possible Measurement mode parameters for the DVM.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasMode.NORMAL">
            <summary>
            NORMAL = Measurement performed by Synchro Bus.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasMode.TRIGGER">
            <summary>
            TRIGGER = Measurement performed by trigger (CH1 comparator of the CNT) [NOT AVAILABLE FOR YAICT].
            </summary>
        </member>
        <member name="F:Spea.DvmMeasMode.WINDOW">
            <summary>
            WINDOW = Measurement with window comparison [NOT AVAILABLE FOR YAICT].
            </summary>
        </member>
        <member name="T:Spea.DvmMeasType">
            <summary>
            Enum contains all possible Measurement mode parameters for the DVM.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasType.DC_MEAS">
            <summary>
            DC_MEAS = Amplitude measurement.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasType.POS_PEAK">
            <summary>
            POS_PEAK = Positive peak detect.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasType.NEG_PEAK">
            <summary>
            NEG_PEAK = Negative peak detect.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasType.PEAK_TO_PEAK">
            <summary>
            PEAK_TO_PEAK = Peak to peak value.
            </summary>
        </member>
        <member name="F:Spea.DvmMeasType.RMS_MEAS">
            <summary>
            RMS_MEAS = RMS measurement.
            </summary>
        </member>
        <member name="T:Spea.DvmAcqRam">
            <summary>
            Enum contains all possible Measurement acquisition RAM parameters.
            </summary>
        </member>
        <member name="F:Spea.DvmAcqRam.ENABLED">
            <summary>
            ENABLED = Enable acquisition RAM.
            </summary>
        </member>
        <member name="F:Spea.DvmAcqRam.DISABLED">
            <summary>
            DISABLED = Disable acquisition RAM.
            </summary>
        </member>
        <member name="T:Spea.DvmSbusLine">
            <summary>
            Enum contains all possible selections for SBUSLINE on DVM.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS1">
            <summary>
            Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS2">
            <summary>
            Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS3">
            <summary>
            Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS4">
            <summary>
            Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS5">
            <summary>
            Synchro Bus 5.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS6">
            <summary>
            Synchro Bus 6.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS7">
            <summary>
            Synchro Bus 7.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.SBUS8">
            <summary>
            Synchro Bus 8.
            </summary>
        </member>
        <member name="F:Spea.DvmSbusLine.NONE">
            <summary>
            No connections.
            </summary>
        </member>
        <member name="T:Spea.DvmFlagId">
            <summary>
            Enum contains all possible Measurement FlagId parameters.
            </summary>
        </member>
        <member name="F:Spea.DvmFlagId.DVM_TEST">
            <summary>
            DVM_TEST = Enable input flag.
            </summary>
        </member>
        <member name="F:Spea.DvmFlagId.DVM_EXEC">
            <summary>
            DVM_EXEC = Start input flag.
            </summary>
        </member>
        <member name="F:Spea.DvmFlagId.PKMEAS_EN">
            <summary>
            PKMEAS_EN = Peak measurement input flag.
            </summary>
        </member>
        <member name="F:Spea.DvmFlagId.V_TRIGG_CMP_H">
            <summary>
            V_TRIGG_CMP_H = Trigger CMP_H output flag.
            </summary>
        </member>
        <member name="F:Spea.DvmFlagId.V_TRIGG_CMP_L">
            <summary>
            V_TRIGG_CMP_L = Trigger CMP_L output flag.
            </summary>
        </member>
        <member name="T:Spea.DvmSlope">
            <summary>
            Enum contains all possible triggermodes for the DVM.
            </summary>
        </member>
        <member name="F:Spea.DvmSlope.SLOPE_RISE">
            <summary>
            SLOPE_RISE = It is used to trigger the counter on the rising edge of the signal.
            </summary>
        </member>
        <member name="F:Spea.DvmSlope.SLOPE_FALL">
            <summary>
            SLOPE_FALL = It is used to trigger the counter on the falling edge of the signal.
            </summary>
        </member>
        <member name="T:Spea.EsbusLine">
            <summary>
            Enum contains all possible selections for SBUSLINE.
            </summary>
        </member>
        <member name="F:Spea.EsbusLine.ESBUS1">
            <summary>
            External Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.EsbusLine.ESBUS2">
            <summary>
            External Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.EsbusLine.ESBUS3">
            <summary>
            External Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.EsbusLine.ESBUS4">
            <summary>
            External Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.EsbusLine.NONE">
            <summary>
            No Synchro Bus Connection.
            </summary>
        </member>
        <member name="T:Spea.SynchroBusLine">
            <summary>
            Enum contains all possible selections for SBUSLINE on System Synchronizations instructions.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS1">
            <summary>
            Synchro Bus 1.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS2">
            <summary>
            Synchro Bus 2.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS3">
            <summary>
            Synchro Bus 3.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS4">
            <summary>
            Synchro Bus 4.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS5">
            <summary>
            Synchro Bus 5.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS6">
            <summary>
            Synchro Bus 6.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS7">
            <summary>
            Synchro Bus 7.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.SBUS8">
            <summary>
            Synchro Bus 8.
            </summary>
        </member>
        <member name="F:Spea.SynchroBusLine.NONE">
            <summary>
            It disconnects the previously indicated EsbusLine/Flag from any possible connection to the Sbus.
            </summary>
        </member>
        <member name="T:Spea.EsbusLinkMode">
            <summary>
            Enum contains all possible selections for Mode to link the Esbus.
            </summary>
        </member>
        <member name="F:Spea.EsbusLinkMode.INPSYNC">
            <summary>
            INPSYNC = The line of the Esbus is the source, the line of the Sbus is the destination.
            </summary>
        </member>
        <member name="F:Spea.EsbusLinkMode.OUTSYNC">
            <summary>
            OUTSYNC = The line of Sbus the is the source, the line of the Esbus is the destination.
            </summary>
        </member>
        <member name="T:Spea.BmuExtInstrId">
            <summary>
            Enum contains all possible external instruments to be connected to the BMU.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrId.EXTINSTR1">
            <summary>
            External Instrument 1.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrId.EXTINSTR2">
            <summary>
            External Instrument 2.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrId.EXTINSTR3">
            <summary>
            External Instrument 3.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrId.EXTINSTR4">
            <summary>
            External Instrument 4.
            </summary>
        </member>
        <member name="T:Spea.BmuExtInstrPin">
            <summary>
            Enum contains all possible external instrument points to be disconnected from the BMU.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrPin.EXTINSTRPOINT1">
            <summary>
            Disconnects the pin#1 of the external instrument.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrPin.EXTINSTRPOINT2">
            <summary>
            Disconnects the pin#2 of the external instrument.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrPin.EXTINSTRPOINT3">
            <summary>
            Disconnects the pin#3 of the external instrument.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrPin.EXTINSTRPOINT4">
            <summary>
            Disconnects the pin#4 of the external instrument.
            </summary>
        </member>
        <member name="F:Spea.BmuExtInstrPin.ALL">
            <summary>
            Disonnects all the pins of the external instrument.
            </summary>
        </member>
        <member name="T:Spea.FpsId">
            <summary>
            Enum contains all possible Fixed power supply Ids.
            </summary>
        </member>
        <member name="F:Spea.FpsId.FPS1">
            <summary>
            FPS1.
            </summary>
        </member>
        <member name="F:Spea.FpsId.FPS2">
            <summary>
            FPS2.
            </summary>
        </member>
        <member name="F:Spea.FpsId.FPS3">
            <summary>
            FPS3.
            </summary>
        </member>
        <member name="F:Spea.FpsId.FPS4">
            <summary>
            FPS4.
            </summary>
        </member>
        <member name="T:Spea.FpsUabus5To8">
            <summary>
            Enum contains last 4 UABUS rows.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus5To8.ROW5">
            <summary>
            ROW5 = UABUS5.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus5To8.ROW6">
            <summary>
            ROW6 = UABUS6.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus5To8.ROW7">
            <summary>
            ROW7 = UABUS7.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus5To8.ROW8">
            <summary>
            ROW8 = UABUS8.
            </summary>
        </member>
        <member name="T:Spea.FpsUabus1To4">
            <summary>
            Enum contains frist 4 UABUS rows.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus1To4.ROW1">
            <summary>
            ROW1 = UABUS1.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus1To4.ROW2">
            <summary>
            ROW2 = UABUS2.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus1To4.ROW3">
            <summary>
            ROW3 = UABUS3.
            </summary>
        </member>
        <member name="F:Spea.FpsUabus1To4.ROW4">
            <summary>
            ROW4 = UABUS4.
            </summary>
        </member>
        <member name="T:Spea.TestResult">
            <summary>
            Enum contains all possible testresults.
            </summary>
        </member>
        <member name="F:Spea.TestResult.PASS">
            <summary>
            The result is PASS.
            </summary>
        </member>
        <member name="F:Spea.TestResult.FAILH">
            <summary>
            The result is over the high threshold.
            </summary>
        </member>
        <member name="F:Spea.TestResult.FAILL">
            <summary>
            The result is under the low threshold.
            </summary>
        </member>
        <member name="F:Spea.TestResult.FAILBOTH">
            <summary>
            Failre over the high threshold and under the low threshold.
            </summary>
        </member>
        <member name="T:Spea.Mobus">
            <summary>
            Enum contains all possible MOBUS lines.
            </summary>
        </member>
        <member name="F:Spea.Mobus.MOBUS1">
            <summary>
            MOBUS1.
            </summary>
        </member>
        <member name="F:Spea.Mobus.MOBUS2">
            <summary>
            MOBUS2.
            </summary>
        </member>
        <member name="T:Spea.SyncFlag">
            <summary>
            Enum contains all possible input and output synchronization signals.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.INPSYNC1">
            <summary>
            INPSYNC1.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.INPSYNC2">
            <summary>
            INPSYNC2.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.INPSYNC3">
            <summary>
            INPSYNC3.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.INPSYNC4">
            <summary>
            INPSYNC4.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.OUTSYNC1">
            <summary>
            OUTSYNC1.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.OUTSYNC2">
            <summary>
            OUTSYNC2.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.OUTSYNC3">
            <summary>
            OUTSYNC3.
            </summary>
        </member>
        <member name="F:Spea.SyncFlag.OUTSYNC4">
            <summary>
            OUTSYNC4.
            </summary>
        </member>
        <member name="T:Spea.AllInstruments">
            <summary>
            Enum contains all possible Instrument idetentifiers (Might be incomplete).
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.ACGEN1">
            <summary>
            ACGEN1 = AC-Generator 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.ACGEN2">
            <summary>
            ACGEN2 = AC-Generator 2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.ACGEN3">
            <summary>
            ACGEN3 = AC-Generator 3.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.ACGEN4">
            <summary>
            ACGEN4 = AC-Generator 4.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTV1">
            <summary>
            BSTV1 = Booster type V number 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTV2">
            <summary>
            BSTV2 = Booster type V number 2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTV3">
            <summary>
            BSTV3 = Booster type V number 3.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTV4">
            <summary>
            BSTV4 = Booster type V number 4.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTI1">
            <summary>
            BSTI1 = Booster type I number 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTI2">
            <summary>
            BSTI2 = Booster type I number 2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTI3">
            <summary>
            BSTI3 = Booster type I number 3.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.BSTI4">
            <summary>
            BSTI4 = Booster type I number 4.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.CNT1">
            <summary>
            CNT1 = Counter 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.CNT2">
            <summary>
            CNT2 = Counter2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL1">
            <summary>
            Active Load 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL2">
            <summary>
            Active Load 2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL3">
            <summary>
            Active Load 3.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL4">
            <summary>
            Active Load 4.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL5">
            <summary>
            Active Load 5.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL6">
            <summary>
            Active Load 6.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL7">
            <summary>
            Active Load 7.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCAL8">
            <summary>
            Active Load 8.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCGEN1">
            <summary>
            DCGEN1 = Dc-generator 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCGEN2">
            <summary>
            DCGEN2 = Dc-generator 2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCGEN3">
            <summary>
            DCGEN3 = Dc-generator 3.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DCGEN4">
            <summary>
            DCGEN4 = Dc-generator 4.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DRI1">
            <summary>
            DRI1 = It identifies the driver module number 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DRI2">
            <summary>
            DRI2 = It identifies the driver module number 2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DVM1">
            <summary>
            DVM1 = Digital Voltmeter 1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.DVM2">
            <summary>
            DVM2 = Digital Voltmeter 2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.FPS1">
            <summary>
            FPS1.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.FPS2">
            <summary>
            FPS2.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.FPS3">
            <summary>
            FPS3.
            </summary>
        </member>
        <member name="F:Spea.AllInstruments.FPS4">
            <summary>
            FPS4.
            </summary>
        </member>
        <member name="T:Spea.LcsMeasureState">
            <summary>
            Enum contains the possible states for measurements for LCS.
            </summary>
        </member>
        <member name="F:Spea.LcsMeasureState.FALSE">
            <summary>
            Measure disabled.
            </summary>
        </member>
        <member name="F:Spea.LcsMeasureState.TRUE">
            <summary>
            Measure enabled.
            </summary>
        </member>
        <member name="T:Spea.LCSTiming">
            <summary>
            Enum contains all possible Timing options for LCSSetup.
            </summary>
        </member>
        <member name="F:Spea.LCSTiming.KTIME_12_ms">
            <summary>
            Set the integration time at 12 ms.
            </summary>
        </member>
        <member name="F:Spea.LCSTiming.KTIME_100_ms">
            <summary>
            Set the integration time at 100 ms.
            </summary>
        </member>
        <member name="F:Spea.LCSTiming.KTIME_700_ms">
            <summary>
            Set the integration time at 700 ms.
            </summary>
        </member>
        <member name="T:Spea.LCSColorGain">
            <summary>
            Enum contains all possible colourgain values for LCSSetup.
            </summary>
        </member>
        <member name="F:Spea.LCSColorGain.KCOLOR_GAIN_1">
            <summary>
            Sensor color scale is set at x1.
            </summary>
        </member>
        <member name="F:Spea.LCSColorGain.KCOLOR_GAIN_4">
            <summary>
            Sensor color scale is set at x4.
            </summary>
        </member>
        <member name="F:Spea.LCSColorGain.KCOLOR_GAIN_16">
            <summary>
            Sensor color scale is set at x16.
            </summary>
        </member>
        <member name="F:Spea.LCSColorGain.KCOLOR_GAIN_64">
            <summary>
            Sensor color scale is set at x64.
            </summary>
        </member>
        <member name="T:Spea.LCSLuxGain">
            <summary>
            Enum contains all possible luxgain values for LCSSetup.
            </summary>
        </member>
        <member name="F:Spea.LCSLuxGain.KLUX_GAIN_1">
            <summary>
            Sensor lightness scale is set at x1.
            </summary>
        </member>
        <member name="F:Spea.LCSLuxGain.KLUX_GAIN_8">
            <summary>
            Sensor lightness scale is set at x8.
            </summary>
        </member>
        <member name="F:Spea.LCSLuxGain.KLUX_GAIN_16">
            <summary>
            Sensor lightness scale is set at x16.
            </summary>
        </member>
        <member name="F:Spea.LCSLuxGain.KLUX_GAIN_120">
            <summary>
            Sensor lightness scale is set at x120.
            </summary>
        </member>
        <member name="T:Spea.LCSTestResult">
            <summary>
            Enum contains all possible testresult values for LCSTestExecute.
            </summary>
        </member>
        <member name="F:Spea.LCSTestResult.PASS">
            <summary>
            The test result is PASS.
            </summary>
        </member>
        <member name="F:Spea.LCSTestResult.KERR_LCS_ID_NOT_VALID">
            <summary>
            Sensor Id parameter not valid.
            </summary>
        </member>
        <member name="F:Spea.LCSTestResult.KERR_LCS_FW_TIMEOUT">
            <summary>
            Sensor timeout.
            </summary>
        </member>
        <member name="F:Spea.LCSTestResult.KERR_LCS_MEAS_STAT_ALS_DONE_UNDERRANGE">
            <summary>
            Lightness measurement under range (lux or IR).
            </summary>
        </member>
        <member name="F:Spea.LCSTestResult.KERR_LCS_MEAS_STAT_ALS_DONE_OVERRANGE">
            <summary>
            Lightness measurement over range (lux or IR).
            </summary>
        </member>
        <member name="F:Spea.LCSTestResult.KERR_LCS_MEAS_STAT_RGB_DONE_UNDERRANGE">
            <summary>
            Color measurement under range.
            </summary>
        </member>
        <member name="F:Spea.LCSTestResult.KERR_LCS_MEAS_STAT_RGB_DONE_OVERRANGE">
            <summary>
            Color measurement over range.
            </summary>
        </member>
        <member name="T:Spea.ObpID">
            <summary>
            Enum contains all possible OBP identifiers.
            </summary>
        </member>
        <member name="F:Spea.ObpID.SYS_OBP1">
            <summary>
            OBP400 ID.
            </summary>
        </member>
        <member name="F:Spea.ObpID.OBP500A">
            <summary>
            OBP500 first ID.
            </summary>
        </member>
        <member name="F:Spea.ObpID.OBP500B">
            <summary>
             OBP500 second ID.
            </summary>
        </member>
        <member name="F:Spea.ObpID.OBP500C">
            <summary>
             OBP500 third ID.
            </summary>
        </member>
        <member name="F:Spea.ObpID.OBP500D">
            <summary>
             OBP500 fourth ID.
            </summary>
        </member>
        <member name="T:Spea.DataType">
            <summary>
            Enum contains all possible data types.
            </summary>
        </member>
        <member name="F:Spea.DataType.TYP_BYTE">
            <summary>
            It identifies the BYTE data type.
            </summary>
        </member>
        <member name="F:Spea.DataType.TYP_WORD">
            <summary>
            It identifies the WORD data type.
            </summary>
        </member>
        <member name="F:Spea.DataType.TYP_DWORD">
            <summary>
             It identifies the DWORD data type.
            </summary>
        </member>
        <member name="T:Spea.ObpChSignalType">
            <summary>
            Enum contains all possible values for differential modes of YADIO5xx channels.
            </summary>
        </member>
        <member name="F:Spea.ObpChSignalType.DIFF_STO">
            <summary>
            Output Transceiver (require 1 channel pair).
            </summary>
        </member>
        <member name="F:Spea.ObpChSignalType.DIFF_STI">
            <summary>
            Input Transceiver (require 1 channel pair).
            </summary>
        </member>
        <member name="F:Spea.ObpChSignalType.DIFF_STIO">
            <summary>
             Input Transceiver. Require 3 channel pair one for the input, one for the output and one for the direction.
            </summary>
        </member>
        <member name="F:Spea.ObpChSignalType.DIFF_STVPP">
            <summary>
             VPP transceiver (require 1 channel pair).
            </summary>
        </member>
        <member name="T:Spea.ObpMuxProbes">
            <summary>
            Enum contains all ProbeValues for the channel multiplexing for OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE1">
            <summary>
            Probe 1 of Flying Prober.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE2">
            <summary>
            Probe 2 of Flying Prober.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE3">
            <summary>
            Probe 3 of Flying Prober.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE4">
            <summary>
            Probe 4 of Flying Prober.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE5">
            <summary>
            Probe 5 of Flying Prober.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE6">
            <summary>
            Probe 6 of Flying Prober.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE7">
            <summary>
            Probe 7 of Flying Prober.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxProbes.PROBE8">
            <summary>
            Probe 8 of Flying Prober.
            </summary>
        </member>
        <member name="T:Spea.ObpMuxCahnnel">
            <summary>
            Enum contains all channel values for the channel multiplexing for OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH1">
            <summary>
            Channel 1.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH2">
            <summary>
            Channel 2.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH3">
            <summary>
            Channel 3.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH4">
            <summary>
            Channel 4.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH5">
            <summary>
            Channel 5.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH6">
            <summary>
            Channel 6.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH7">
            <summary>
            Channel 7.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH8">
            <summary>
            Channel 8.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH9">
            <summary>
            Channel 9.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH10">
            <summary>
            Channel 10.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH11">
            <summary>
            Channel 11.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH12">
            <summary>
            Channel 12.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH13">
            <summary>
            Channel 13.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH14">
            <summary>
            Channel 14.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH15">
            <summary>
            Channel 15.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH16">
            <summary>
            Channel 16.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH17">
            <summary>
            Channel 17.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH18">
            <summary>
            Channel 18.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH19">
            <summary>
            Channel 1.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH20">
            <summary>
            Channel 20.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH21">
            <summary>
            Channel 21.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH22">
            <summary>
            Channel 22.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH23">
            <summary>
            Channel 23.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH24">
            <summary>
            Channel 24.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH25">
            <summary>
            Channel 25.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH26">
            <summary>
            Channel 26.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH27">
            <summary>
            Channel 27.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH28">
            <summary>
            Channel 28.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH29">
            <summary>
            Channel 29.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH30">
            <summary>
            Channel 30.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH31">
            <summary>
            Channel 31.
            </summary>
        </member>
        <member name="F:Spea.ObpMuxCahnnel.CH32">
            <summary>
            Channel 32.
            </summary>
        </member>
        <member name="T:Spea.ObpChannelLevel">
            <summary>
            Enum contains all possible channel levels for OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpChannelLevel.HIGH">
            <summary>
            It identifies the high level.
            </summary>
        </member>
        <member name="F:Spea.ObpChannelLevel.LOW">
            <summary>
            It identifies the low level.
            </summary>
        </member>
        <member name="T:Spea.ObpLoad">
            <summary>
            Enum contains all possible values for loads used by OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpLoad.NONE">
            <summary>
            It is not connect any resistor load.
            </summary>
        </member>
        <member name="F:Spea.ObpLoad.PULLUP_4K7">
            <summary>
            Connect a 4.7K pull-up resistor.
            </summary>
        </member>
        <member name="T:Spea.ObpImpedance">
            <summary>
            Enum contains all possible values for output impedances used by OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpImpedance.Z_5_OHM">
            <summary>
            Impedance 5 Ohm.
            </summary>
        </member>
        <member name="F:Spea.ObpImpedance.Z_25_OHM">
            <summary>
            Impedance 25 Ohm (available only with DBDIO3xx).
            </summary>
        </member>
        <member name="F:Spea.ObpImpedance.Z_50_OHM">
            <summary>
            Impedance 50 Ohm.
            </summary>
        </member>
        <member name="T:Spea.ObpStuckLevel">
            <summary>
            Enum contains all possible values for stucking levels used by OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpStuckLevel.HIGH">
            <summary>
            It identifies the High level.
            </summary>
        </member>
        <member name="F:Spea.ObpStuckLevel.LOW">
            <summary>
            It identifies the Low level.
            </summary>
        </member>
        <member name="F:Spea.ObpStuckLevel.THREE_STATE">
            <summary>
            It identifies the tri-state.
            </summary>
        </member>
        <member name="F:Spea.ObpStuckLevel.VPP">
            <summary>
            It identifies the Vpp level (only Vpp channels can be stuck to this level).
            </summary>
        </member>
        <member name="T:Spea.HashType">
            <summary>
            Enum contains all possible hashtypes used by OBP.
            </summary>
        </member>
        <member name="F:Spea.HashType.HASH_SUM8">
            <summary>
            It identifies the SUM8 hash type.
            </summary>
        </member>
        <member name="F:Spea.HashType.HASH_SUM16">
            <summary>
            It identifies the SUM16 hash type.
            </summary>
        </member>
        <member name="F:Spea.HashType.HASH_SUM24">
            <summary>
            It identifies the SUM24 hash type.
            </summary>
        </member>
        <member name="F:Spea.HashType.HASH_SUM32">
            <summary>
            It identifies the SUM32 hash type.
            </summary>
        </member>
        <member name="F:Spea.HashType.HASH_XOR8">
            <summary>
            It identifies the XOR8 hash type.
            </summary>
        </member>
        <member name="F:Spea.HashType.HASH_CRC16">
            <summary>
            It identifies the CRC16 hash type.
            </summary>
        </member>
        <member name="F:Spea.HashType.HASH_CRC32">
            <summary>
            It identifies the CRC32 hash type.
            </summary>
        </member>
        <member name="T:Spea.FileType">
            <summary>
            Enum contains all possible file types.
            </summary>
        </member>
        <member name="F:Spea.FileType.TYP_BIN">
            <summary>
            It identifies a binary file type.
            </summary>
        </member>
        <member name="F:Spea.FileType.TYP_SREC">
            <summary>
            It identifies a SREC file type.
            </summary>
        </member>
        <member name="F:Spea.FileType.TYP_HEX">
            <summary>
            It identifies a HEX file type.
            </summary>
        </member>
        <member name="F:Spea.FileType.TYP_SVF">
            <summary>
            It identifies a SVF file type.
            </summary>
        </member>
        <member name="T:Spea.HexFileOptions">
            <summary>
            Enum contains all possible options for hexfile types.
            </summary>
        </member>
        <member name="F:Spea.HexFileOptions.HEX_BYTE">
            <summary>
            It identifies a file with 1-byte addresses (default).
            </summary>
        </member>
        <member name="F:Spea.HexFileOptions.HEX_WORD">
            <summary>
            It identifies a file with 2-byte addresses.
            </summary>
        </member>
        <member name="F:Spea.HexFileOptions.HEX_DWORD">
            <summary>
            It identifies a file with 4-byte addresses.
            </summary>
        </member>
        <member name="T:Spea.SRECFileOptions">
            <summary>
            Enum contains all possible options for srecfile types.
            </summary>
        </member>
        <member name="F:Spea.SRECFileOptions.SREC_BYTE">
            <summary>
            It identifies a file with 1-byte addresses (default).
            </summary>
        </member>
        <member name="F:Spea.SRECFileOptions.SREC_WORD">
            <summary>
            It identifies a file with 2-byte addresses.
            </summary>
        </member>
        <member name="F:Spea.SRECFileOptions.SREC_DWORD">
            <summary>
            It identifies a file with 4-byte addresses.
            </summary>
        </member>
        <member name="T:Spea.SVFFileOptions">
            <summary>
            Enum contains all possible options for srecfile types.
            </summary>
        </member>
        <member name="F:Spea.SVFFileOptions.SVF_RUNTEST_TIME">
            <summary>
            It identifies to execute the RUNTEST instructions using waits instead of clocking the TCK. (default).
            </summary>
        </member>
        <member name="F:Spea.SVFFileOptions.SVF_RUNTEST_PROG">
            <summary>
            It identifies to execute the RUNTEST instructions as they are specified in the file. In some cases this setting increases the execution time.
            </summary>
        </member>
        <member name="F:Spea.SVFFileOptions.SVF_RUNTEST_TIMETCK">
            <summary>
            It identifies to execute the RUNTEST instructions in optimized mode toggling the only TCK for the necessary time.
            </summary>
        </member>
        <member name="F:Spea.SVFFileOptions.SVF_IDCODE_SKIP">
            <summary>
            It identifies to skip the signature check. This setting is necessary only for some old family of Altera device.
            </summary>
        </member>
        <member name="T:Spea.ObpPluType">
            <summary>
            Enum contains all possible plu-type options for OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpPluType.OBP_PLU_NONE">
            <summary>
            It identifies the default function.
            </summary>
        </member>
        <member name="F:Spea.ObpPluType.OBP_PLU_UART">
            <summary>
            It identifies the UART function.
            </summary>
        </member>
        <member name="T:Spea.ObpSkipValues">
            <summary>
            Enum contains all possible skip value options for OBP.
            </summary>
        </member>
        <member name="F:Spea.ObpSkipValues.NOSKIP">
            <summary>
            Nothing to be skipped.
            </summary>
        </member>
        <member name="F:Spea.ObpSkipValues.SKIP_00">
            <summary>
            Skip to the next data if current data is 00.
            </summary>
        </member>
        <member name="F:Spea.ObpSkipValues.SKIP_FF">
            <summary>
            Skip to the next data if current data is FF.
            </summary>
        </member>
        <member name="T:Spea.PluLinPorts">
            <summary>
            Enum contains all possible ports for use via PLU.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN1">
            <summary>
            Lin Port 1.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN2">
            <summary>
            Lin Port 2.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN3">
            <summary>
            Lin Port 3.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN4">
            <summary>
            Lin Port 4.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN5">
            <summary>
            Lin Port 5.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN6">
            <summary>
            Lin Port 6.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN7">
            <summary>
            Lin Port 7.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN8">
            <summary>
            Lin Port 8.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN9">
            <summary>
            Lin Port 9.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN10">
            <summary>
            Lin Port 10.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN11">
            <summary>
            Lin Port 11.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN12">
            <summary>
            Lin Port 12.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN13">
            <summary>
            Lin Port 13.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN14">
            <summary>
            Lin Port 14.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN15">
            <summary>
            Lin Port 15.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.LIN16">
            <summary>
            Lin Port 16.
            </summary>
        </member>
        <member name="F:Spea.PluLinPorts.NULL">
            <summary>
            Array Abschluss.
            </summary>
        </member>
        <member name="T:Spea.PluLinAttributes">
            <summary>
            Enum contains all possible attribute values for LIN via PLU.
            </summary>
        </member>
        <member name="F:Spea.PluLinAttributes.LIN_BAUDRATE">
            <summary>
            It identifies the baudrate used for the communication.
            </summary>
        </member>
        <member name="F:Spea.PluLinAttributes.LIN_CHECKSUM">
            <summary>
            It identifies the checksum model used for the communication.
            </summary>
        </member>
        <member name="T:Spea.PluLinChecksum">
            <summary>
            Enum contains all possible checksum options for LIN via PLU.
            </summary>
        </member>
        <member name="F:Spea.PluLinChecksum.LIN_CHECKSUM_CLASSIC">
            <summary>
            Checksum used in earlier LIN versions (LIN 1.3).
            </summary>
        </member>
        <member name="F:Spea.PluLinChecksum.LIN_CHECKSUM_ENHANCED">
            <summary>
            Checksum that includes the protected identifier in the sum, not only data bytes. It is used for the communication with LIN 2.0 slave nodes.
            </summary>
        </member>
        <member name="T:Spea.PluLinSendResult">
            <summary>
            Enum contains all possible result values for LIN via PLU send command.
            </summary>
        </member>
        <member name="F:Spea.PluLinSendResult.LIN_SEND_ECHO_MISSING">
            <summary>
            Error while sending frame (missing echo of bytes send).
            </summary>
        </member>
        <member name="F:Spea.PluLinSendResult.LIN_SEND_ECHO_ERROR">
            <summary>
            Error while sending frame (wrong echo of bytes send).
            </summary>
        </member>
        <member name="F:Spea.PluLinSendResult.LIN_RECEIVE_TIMEOUT">
            <summary>
            Timeout during frame reception.
            </summary>
        </member>
        <member name="F:Spea.PluLinSendResult.LIN_CHECKSUM_ERROR">
            <summary>
            Wrong checksum of the received frame.
            </summary>
        </member>
        <member name="F:Spea.PluLinSendResult.LIN_FRAME_MISSING">
            <summary>
            No frame available in the receive buffer (PluFrameSendReceive not executed correctly).
            </summary>
        </member>
        <member name="T:Spea.PluComPorts">
            <summary>
            Enum contains all possible comports for use via PLU.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT1">
            <summary>
            Port 1.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT2">
            <summary>
            Port 2.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT3">
            <summary>
            Port 3.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT4">
            <summary>
            Port 4.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT5">
            <summary>
            Port 5.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT6">
            <summary>
            Port 6.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT7">
            <summary>
            Port 7.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT8">
            <summary>
            Port 8.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT9">
            <summary>
            Port 9.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT10">
            <summary>
            Port 10.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT11">
            <summary>
            Port 11.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT12">
            <summary>
            Port 12.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT13">
            <summary>
            Port 13.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT14">
            <summary>
            Port 14.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT15">
            <summary>
            Port 15.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.PORT16">
            <summary>
            Port 16.
            </summary>
        </member>
        <member name="F:Spea.PluComPorts.NULL">
            <summary>
            Array Abschluss.
            </summary>
        </member>
        <member name="T:Spea.PluIdleLevel">
            <summary>
            Enum contains all possible idle level values for Com via PLU send command.
            </summary>
        </member>
        <member name="F:Spea.PluIdleLevel.LOW">
            <summary>
            Transmission line default low.
            </summary>
        </member>
        <member name="F:Spea.PluIdleLevel.HIGH">
            <summary>
            Transmission line default high.
            </summary>
        </member>
        <member name="F:Spea.PluIdleLevel.BIT_SEQUENCE">
            <summary>
            Transmission line default send continuously data.
            </summary>
        </member>
        <member name="T:Spea.PluASCPort">
            <summary>
            Enum contains all possible ASC ports for use via PLU.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC1">
            <summary>
            ASC 1.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC2">
            <summary>
            ASC 2.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC3">
            <summary>
            ASC 3.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC4">
            <summary>
            ASC 4.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC5">
            <summary>
            ASC 5.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC6">
            <summary>
            ASC 6.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC7">
            <summary>
            ASC 7.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC8">
            <summary>
            ASC 8.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC9">
            <summary>
            ASC 9.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC10">
            <summary>
            ASC 10.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC11">
            <summary>
            ASC 11.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC12">
            <summary>
            ASC 12.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC13">
            <summary>
            ASC 13.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC14">
            <summary>
            ASC 14.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC15">
            <summary>
            ASC 15.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.ASC16">
            <summary>
            ASC 16.
            </summary>
        </member>
        <member name="F:Spea.PluASCPort.NULL">
            <summary>
            Array Abschluss.
            </summary>
        </member>
        <member name="T:Spea.PluSerialParityBit">
            <summary>
            This Enum contains all possible parity options for serial communication via PLU.
            </summary>
        </member>
        <member name="F:Spea.PluSerialParityBit.ASC_PARITY_EVEN">
            <summary>
            The number of mark (parity bit included) is always even.
            </summary>
        </member>
        <member name="F:Spea.PluSerialParityBit.ASC_PARITY_ODD">
            <summary>
            The number of mark (parity bit included) is always odd.
            </summary>
        </member>
        <member name="F:Spea.PluSerialParityBit.ASC_PARITY_NONE">
            <summary>
            Any type of parity, that is no bit added.
            </summary>
        </member>
        <member name="F:Spea.PluSerialParityBit.ASC_PARITY_MARK">
            <summary>
            The parity bit is alwais mark.
            </summary>
        </member>
        <member name="F:Spea.PluSerialParityBit.ASC_PARITY_SPACE">
            <summary>
            The parity bit is alwais space.
            </summary>
        </member>
        <member name="T:Spea.PluSerialStopBits">
            <summary>
            This Enum contains all possible stop bits options for serial communication via PLU.
            </summary>
        </member>
        <member name="F:Spea.PluSerialStopBits.ASC_STOP_BITS_1">
            <summary>
            Stop time of 1 bit.
            </summary>
        </member>
        <member name="F:Spea.PluSerialStopBits.ASC_STOP_BITS_2">
            <summary>
            Stop time of 2 bit.
            </summary>
        </member>
        <member name="T:Spea.PmxInstrId">
            <summary>
            This Enum contains all possible IDs for the PMX.
            </summary>
        </member>
        <member name="F:Spea.PmxInstrId.PMX1">
            <summary>
            Power matrix 1.
            </summary>
        </member>
        <member name="F:Spea.PmxInstrId.PMX2">
            <summary>
            Power matrix 2.
            </summary>
        </member>
        <member name="T:Spea.PmxSection">
            <summary>
            This Enum contains all possible section options for the power matrix.
            </summary>
        </member>
        <member name="F:Spea.PmxSection.HPREL">
            <summary>
            Power relay.
            </summary>
        </member>
        <member name="F:Spea.PmxSection.HVREL">
            <summary>
            Insulation relay.
            </summary>
        </member>
        <member name="F:Spea.PmxSection.HPDECREL">
            <summary>
            Hp decoded relay.
            </summary>
        </member>
        <member name="F:Spea.PmxSection.HVDECREL">
            <summary>
            Hv decoded relay.
            </summary>
        </member>
        <member name="F:Spea.PmxSection.DISCR">
            <summary>
            Discharge resistors.
            </summary>
        </member>
        <member name="F:Spea.PmxSection.HVDISCR">
            <summary>
            HV Discharge resistors.
            </summary>
        </member>
        <member name="F:Spea.PmxSection.SHUNT">
            <summary>
            Shunt user.
            </summary>
        </member>
        <member name="T:Spea.PPS">
            <summary>
            This Enum contains all possible programmable power supply instrument IDs.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS1">
            <summary>
            Programmable Power Supply 1.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS2">
            <summary>
            Programmable Power Supply 2.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS3">
            <summary>
            Programmable Power Supply 3.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS4">
            <summary>
            Programmable Power Supply 4.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS5">
            <summary>
            Programmable Power Supply 5.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS6">
            <summary>
            Programmable Power Supply 6.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS7">
            <summary>
            Programmable Power Supply 7.
            </summary>
        </member>
        <member name="F:Spea.PPS.PPS8">
            <summary>
            Programmable Power Supply 8.
            </summary>
        </member>
        <member name="T:Spea.PPS1To4">
            <summary>
            This Enum contains 1-4  programmable power supply instrument IDs.
            </summary>
        </member>
        <member name="F:Spea.PPS1To4.PPS1">
            <summary>
            Programmable Power Supply 1.
            </summary>
        </member>
        <member name="F:Spea.PPS1To4.PPS2">
            <summary>
            Programmable Power Supply 2.
            </summary>
        </member>
        <member name="F:Spea.PPS1To4.PPS3">
            <summary>
            Programmable Power Supply 3.
            </summary>
        </member>
        <member name="F:Spea.PPS1To4.PPS4">
            <summary>
            Programmable Power Supply 4.
            </summary>
        </member>
        <member name="T:Spea.Probes">
            <summary>
            Enum contains all possible Probe values.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE1">
            <summary>
            PROBE 1.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE2">
            <summary>
            PROBE 2.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE3">
            <summary>
            PROBE 3.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE4">
            <summary>
            PROBE 4.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE5">
            <summary>
            PROBE 5.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE6">
            <summary>
            PROBE 6.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE7">
            <summary>
            PROBE 7.
            </summary>
        </member>
        <member name="F:Spea.Probes.PROBE8">
            <summary>
            PROBE 8.
            </summary>
        </member>
        <member name="T:Spea.ProbeInGain">
            <summary>
            Enum contains all possible IN gain values for probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeInGain.MUL_1">
            <summary>
            Gain = 1.
            </summary>
        </member>
        <member name="F:Spea.ProbeInGain.MUL_2">
            <summary>
            Gain = 2.
            </summary>
        </member>
        <member name="F:Spea.ProbeInGain.MUL_5">
            <summary>
            Gain = 5.
            </summary>
        </member>
        <member name="F:Spea.ProbeInGain.MUL_10">
            <summary>
            Gain = 10.
            </summary>
        </member>
        <member name="F:Spea.ProbeInGain.MUL_20">
            <summary>
            Gain = 20.
            </summary>
        </member>
        <member name="F:Spea.ProbeInGain.MUL_50">
            <summary>
            Gain = 50.
            </summary>
        </member>
        <member name="F:Spea.ProbeInGain.MUL_100">
            <summary>
            Gain = 100.
            </summary>
        </member>
        <member name="T:Spea.ProbeMType">
            <summary>
            Enum contains all possible measuring types for probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeMType.V_MEAS">
            <summary>
            voltage measure type.
            </summary>
        </member>
        <member name="F:Spea.ProbeMType.I_MEAS">
            <summary>
            current measure type.
            </summary>
        </member>
        <member name="T:Spea.ProbeOutGain">
            <summary>
            Enum contains all possible OUT gain values for probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeOutGain.DIV_1">
            <summary>
            Gain = 1.
            </summary>
        </member>
        <member name="F:Spea.ProbeOutGain.DIV_2">
            <summary>
            Gain = 2.
            </summary>
        </member>
        <member name="F:Spea.ProbeOutGain.DIV_5">
            <summary>
            Gain = 5.
            </summary>
        </member>
        <member name="F:Spea.ProbeOutGain.DIV_10">
            <summary>
            Gain = 10.
            </summary>
        </member>
        <member name="F:Spea.ProbeOutGain.DIV_20">
            <summary>
            Gain = 20.
            </summary>
        </member>
        <member name="F:Spea.ProbeOutGain.DIV_50">
            <summary>
            Gain = 50.
            </summary>
        </member>
        <member name="F:Spea.ProbeOutGain.DIV_100">
            <summary>
            Gain = 100.
            </summary>
        </member>
        <member name="T:Spea.ProbeGroups">
            <summary>
            Enum contains all possible probe group values.
            </summary>
        </member>
        <member name="F:Spea.ProbeGroups.PROBE1_4">
            <summary>
            YAPROCO 1 Probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeGroups.PROBE5_8">
            <summary>
            YAPROCO 2 Probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeGroups.PROBESALL">
            <summary>
            YAPROCO 1 + 2 Probes.
            </summary>
        </member>
        <member name="T:Spea.ProbeChannel">
            <summary>
            Enum contains all possible probe channels.
            </summary>
        </member>
        <member name="F:Spea.ProbeChannel.PROBE_CH1">
            <summary>
            It identifies the channel 1.
            </summary>
        </member>
        <member name="F:Spea.ProbeChannel.PROBE_CH2">
            <summary>
            It identifies the channel 2.
            </summary>
        </member>
        <member name="F:Spea.ProbeChannel.AUTOMATIC">
            <summary>
            Automatic selection based on row (Not AtosF standard).
            </summary>
        </member>
        <member name="T:Spea.ProbeRows">
            <summary>
            Enum contains all possible row values for the probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW1">
            <summary>
            PROBE ROW 1.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW2">
            <summary>
            PROBE ROW 2.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW3">
            <summary>
            PROBE ROW 3.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW4">
            <summary>
            PROBE ROW 4.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW5">
            <summary>
            PROBE ROW 5.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW6">
            <summary>
            PROBE ROW 6.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW7">
            <summary>
            PROBE ROW 7.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROW8">
            <summary>
            PROBE ROW 8.
            </summary>
        </member>
        <member name="F:Spea.ProbeRows.PROBE_ROWALL">
            <summary>
            PROBE All ROW.
            </summary>
        </member>
        <member name="T:Spea.ProbeCurrScale">
            <summary>
            Enum contains all possible current scales for probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeCurrScale.SC_20uA">
            <summary>
            20uA current scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeCurrScale.SC_200uA">
            <summary>
            200uA current scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeCurrScale.SC_2mA">
            <summary>
            2mA current scale.
            </summary>
        </member>
        <member name="T:Spea.ProbeImpedance">
            <summary>
            Enum contains all possible output impenace values for probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_5">
            <summary>
            5 Ω.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_25">
            <summary>
            25 Ω.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_30">
            <summary>
            30 Ω.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_50">
            <summary>
            50 Ω.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_1000">
            <summary>
            1 kΩ.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_2200">
            <summary>
            2.2 kΩ.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_4700">
            <summary>
            4.7 kΩ.
            </summary>
        </member>
        <member name="F:Spea.ProbeImpedance.R_10000">
            <summary>
            10 kΩ.
            </summary>
        </member>
        <member name="T:Spea.ProbeRlcMeasType">
            <summary>
            Enum contains all possible measure types for probe RLC measurement.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcMeasType.Meas_C">
            <summary>
            Capacitive Measurement.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcMeasType.Meas_R">
            <summary>
            Resistive Measurement.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcMeasType.Meas_L">
            <summary>
            Inductive Measurement.
            </summary>
        </member>
        <member name="T:Spea.ProbeRlcCirciutType">
            <summary>
            Enum contains all possible circuit types for probe RLC measurement.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCirciutType.CIRCUIT_LC">
            <summary>
            LC-Circuit.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCirciutType.CIRCUIT_RC">
            <summary>
            RC-Circuit.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCirciutType.CIRCUIT_RL">
            <summary>
            RL-Circuit.
            </summary>
        </member>
        <member name="T:Spea.ProbeRlcCurrentScale">
            <summary>
            Enum contains all possible current scales probe RLC measurement.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_200k">
            <summary>
            200k-scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_100k">
            <summary>
            100k-scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_20k">
            <summary>
            20k-scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_10k">
            <summary>
            10k-scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_2k">
            <summary>
            2k-scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_1k">
            <summary>
            1k-scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_200R">
            <summary>
            200R-scale.
            </summary>
        </member>
        <member name="F:Spea.ProbeRlcCurrentScale.SC_100R">
            <summary>
            100R-scale.
            </summary>
        </member>
        <member name="T:Spea.ProbePositioningState">
            <summary>
            Enum contains all possible values for probe positioning.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE1">
            <summary>
            PROBE 1.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE2">
            <summary>
            PROBE 2.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE3">
            <summary>
            PROBE 3.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE4">
            <summary>
            PROBE 4.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE5">
            <summary>
            PROBE 5.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE6">
            <summary>
            PROBE 6.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE7">
            <summary>
            PROBE 7.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.PROBE8">
            <summary>
            PROBE 8.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.NOT_POSITIONED">
            <summary>
            No Probe positioned.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.FIXED_ANALOGUE_PROBE">
            <summary>
            Fixed analogue Probe is used.
            </summary>
        </member>
        <member name="F:Spea.ProbePositioningState.FIXED_ACTIVE_PROBE">
            <summary>
            Fixed active Probe is used.
            </summary>
        </member>
        <member name="T:Spea.ProbeLogicLevel">
            <summary>
            Enum contains all possible digital pinlevel for probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeLogicLevel.LOW">
            <summary>
            LOW      -> Level is low.
            </summary>
        </member>
        <member name="F:Spea.ProbeLogicLevel.HIGH">
            <summary>
            HIGH     -> Level is high.
            </summary>
        </member>
        <member name="F:Spea.ProbeLogicLevel.THREE_STATE">
            <summary>
            THREE_STATE     -> Level is threestate.
            </summary>
        </member>
        <member name="F:Spea.ProbeLogicLevel.VPP">
            <summary>
            VPP     -> Level is VPP.
            </summary>
        </member>
        <member name="T:Spea.ProbeAction">
            <summary>
            Enum contains all possible actions for probes.
            </summary>
        </member>
        <member name="F:Spea.ProbeAction.PRB_PARK">
            <summary>
            Probe parking.
            </summary>
        </member>
        <member name="F:Spea.ProbeAction.PRB_NOT_USED">
            <summary>
            Probe not used. Z-axis up and probe moved only if it is required to leave space to an used probe.
            </summary>
        </member>
        <member name="F:Spea.ProbeAction.PRB_UP">
            <summary>
            Z-axis up.
            </summary>
        </member>
        <member name="F:Spea.ProbeAction.PRB_DOWN">
            <summary>
            Z-axis down.
            </summary>
        </member>
        <member name="F:Spea.ProbeAction.PRB_NO_MOVE">
            <summary>
            Probe is not moved.
            </summary>
        </member>
        <member name="T:Spea.AcGenMeasType">
            <summary>
            Enum contains all possible AC-generator measure types.
            </summary>
        </member>
        <member name="F:Spea.AcGenMeasType.AC_V">
            <summary>
            RMS supplied voltage value.
            </summary>
        </member>
        <member name="F:Spea.AcGenMeasType.AC_I">
            <summary>
            RMS supplied current value
            </summary>
        </member>
        <member name="F:Spea.AcGenMeasType.AC_F">
            <summary>
            Frequency value on the generator output.
            </summary>
        </member>
        <member name="F:Spea.AcGenMeasType.AC_P">
            <summary>
            Supplied power value.
            </summary>
        </member>
        <member name="F:Spea.AcGenMeasType.AC_PF">
            <summary>
            Power factor.
            </summary>
        </member>
        <member name="T:Spea.DcActiveLoadMeasType">
            <summary>
            Enum contains all possible DCALoad measure types.
            </summary>
        </member>
        <member name="F:Spea.DcActiveLoadMeasType.DCAL_V">
            <summary>
            Voltage reading.
            </summary>
        </member>
        <member name="F:Spea.DcActiveLoadMeasType.DCAL_I">
            <summary>
            Current reading.
            </summary>
        </member>
        <member name="F:Spea.DcActiveLoadMeasType.DCAL_RIPPLE">
            <summary>
            It identifies the type of measurement.
            </summary>
        </member>
        <member name="F:Spea.DcActiveLoadMeasType.DCAL_POWER">
            <summary>
            Power reading.
            </summary>
        </member>
        <member name="F:Spea.DcActiveLoadMeasType.DCAL_OFF">
            <summary>
            Disabled reading.
            </summary>
        </member>
        <member name="T:Spea.DcGenMeasType">
            <summary>
            Enum contains all possible DC generator measure types.
            </summary>
        </member>
        <member name="F:Spea.DcGenMeasType.DC_V">
            <summary>
            Voltage reading.
            </summary>
        </member>
        <member name="F:Spea.DcGenMeasType.DC_I">
            <summary>
            Current reading.
            </summary>
        </member>
        <member name="T:Spea.RippleMeasMode">
            <summary>
            Enum contains all measure modes for ripple current.
            </summary>
        </member>
        <member name="F:Spea.RippleMeasMode.RIPPLE_TOTAL">
            <summary>
            10Hz ÷ 1MHz.
            </summary>
        </member>
        <member name="F:Spea.RippleMeasMode.RIPPLE_LINE">
            <summary>
            25Hz ÷ 1.5KHz.
            </summary>
        </member>
        <member name="F:Spea.RippleMeasMode.RIPPLE_SWITCHING">
            <summary>
            20KHz ÷ 150KHz.
            </summary>
        </member>
        <member name="F:Spea.RippleMeasMode.RIPPLE_SPIKES">
            <summary>
            250KHz ÷ 1MHz.
            </summary>
        </member>
        <member name="T:Spea.RippleScale">
            <summary>
            Enum contains all scale values for ripple current.
            </summary>
        </member>
        <member name="F:Spea.RippleScale.FT_SC_10V">
            <summary>
            It identifies the measurement scale value from 0V ÷ 10V.
            </summary>
        </member>
        <member name="F:Spea.RippleScale.FT_SC_1V">
            <summary>
            It identifies the measurement scale value from 0V ÷ 1V.
            </summary>
        </member>
        <member name="F:Spea.RippleScale.FT_SC_100mV">
            <summary>
            It identifies the measurement scale value from 0V ÷ 100mV.
            </summary>
        </member>
        <member name="T:Spea.RunDModes">
            <summary>
            Enum contains all runD modes for digital pattern execution.
            </summary>
        </member>
        <member name="F:Spea.RunDModes.NORMAL">
            <summary>
            RunD normal.
            </summary>
        </member>
        <member name="F:Spea.RunDModes.JOIN">
            <summary>
            RunD join.
            </summary>
        </member>
        <member name="T:Spea.SaveResultValues">
            <summary>
            Enum contains all SaveResult result types.
            </summary>
        </member>
        <member name="F:Spea.SaveResultValues.CPASS">
            <summary>
            The result is Pass.
            </summary>
        </member>
        <member name="F:Spea.SaveResultValues.CFAIL">
            <summary>
            The result is Fail.
            </summary>
        </member>
        <member name="F:Spea.SaveResultValues.CLFAIL">
            <summary>
            The result is under the low threshold.
            </summary>
        </member>
        <member name="F:Spea.SaveResultValues.CHFAIL">
            <summary>
            The result is over the high thrshold.
            </summary>
        </member>
        <member name="T:Spea.SbusMode">
            <summary>
            Enum contains all SBUS modes.
            </summary>
        </member>
        <member name="F:Spea.SbusMode.ESBUS">
            <summary>
            Only extended Synchro Bus.
            </summary>
        </member>
        <member name="F:Spea.SbusMode.SBUS">
            <summary>
            Only Synchro Bus and connection to the extended Synchro Bus.
            </summary>
        </member>
        <member name="F:Spea.SbusMode.ALL">
            <summary>
            All synchronization buses (ESBUS and SBUS).
            </summary>
        </member>
        <member name="T:Spea.ScannerId">
            <summary>
            Enum contains all possible IDs for scanners.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN1">
            <summary>
            Scanner 1.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN2">
            <summary>
            Scanner 2.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN3">
            <summary>
            Scanner 3.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN4">
            <summary>
            Scanner 4.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN5">
            <summary>
            Scanner 5.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN6">
            <summary>
            Scanner 6.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN7">
            <summary>
            Scanner 7.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN8">
            <summary>
            Scanner 8.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN9">
            <summary>
            Scanner 9.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN10">
            <summary>
            Scanner 10.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN11">
            <summary>
            Scanner 11.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN12">
            <summary>
            Scanner 12.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN13">
            <summary>
            Scanner 13.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN14">
            <summary>
            Scanner 14.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN15">
            <summary>
            Scanner 15.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN16">
            <summary>
            Scanner 16.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN17">
            <summary>
            Scanner 17.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN18">
            <summary>
            Scanner 18.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN19">
            <summary>
            Scanner 19.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN20">
            <summary>
            Scanner 20.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN21">
            <summary>
            Scanner 21.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN22">
            <summary>
            Scanner 22.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN23">
            <summary>
            Scanner 23.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN24">
            <summary>
            Scanner 24.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN25">
            <summary>
            Scanner 25.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN26">
            <summary>
            Scanner 26.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN27">
            <summary>
            Scanner 27.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN28">
            <summary>
            Scanner 28.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN29">
            <summary>
            Scanner 29.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN30">
            <summary>
            Scanner 30.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN31">
            <summary>
            Scanner 31.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN32">
            <summary>
            Scanner 32.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN33">
            <summary>
            Scanner 33.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN34">
            <summary>
            Scanner 34.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN35">
            <summary>
            Scanner 35.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN36">
            <summary>
            Scanner 36.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN37">
            <summary>
            Scanner 37.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN38">
            <summary>
            Scanner 38.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN39">
            <summary>
            Scanner 39.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN40">
            <summary>
            Scanner 40.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN41">
            <summary>
            Scanner 41.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN42">
            <summary>
            Scanner 42.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN43">
            <summary>
            Scanner 43.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN44">
            <summary>
            Scanner 44.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN45">
            <summary>
            Scanner 45.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN46">
            <summary>
            Scanner 46.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN47">
            <summary>
            Scanner 47.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN48">
            <summary>
            Scanner 48.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN49">
            <summary>
            Scanner 49.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN50">
            <summary>
            Scanner 50.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN51">
            <summary>
            Scanner 51.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN52">
            <summary>
            Scanner 52.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN53">
            <summary>
            Scanner 53.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN54">
            <summary>
            Scanner 54.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN55">
            <summary>
            Scanner 55.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN56">
            <summary>
            Scanner 56.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN57">
            <summary>
            Scanner 57.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN58">
            <summary>
            Scanner 58.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN59">
            <summary>
            Scanner 59.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN60">
            <summary>
            Scanner 60.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN61">
            <summary>
            Scanner 61.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN62">
            <summary>
            Scanner 62.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN63">
            <summary>
            Scanner 63.
            </summary>
        </member>
        <member name="F:Spea.ScannerId.SCN64">
            <summary>
            Scanner 64.
            </summary>
        </member>
        <member name="T:Spea.ScannerExtInstrIds">
            <summary>
            Enum contains all possible IDs for external instruments.
            </summary>
        </member>
        <member name="F:Spea.ScannerExtInstrIds.EXTINSTRA">
            <summary>
            It identifies the external instrument A.
            </summary>
        </member>
        <member name="F:Spea.ScannerExtInstrIds.EXTINSTRB">
            <summary>
            It identifies the external instrument B.
            </summary>
        </member>
        <member name="T:Spea.SiteResults">
            <summary>
            Enum contains all possible result values for sites.
            </summary>
        </member>
        <member name="F:Spea.SiteResults.RESULT_PASS">
            <summary>
            The site result is PASS.
            </summary>
        </member>
        <member name="F:Spea.SiteResults.RESULT_FAIL">
            <summary>
            The site result is FAIL.
            </summary>
        </member>
        <member name="F:Spea.SiteResults.RESULT_NONE">
            <summary>
            The site has no result.
            </summary>
        </member>
        <member name="T:Spea.SysCpuId">
            <summary>
            Enum contains all possible flag IDs for system CPU.
            </summary>
        </member>
        <member name="F:Spea.SysCpuId.SYSIFLG1">
            <summary>
            It identifies the system input flag (input to the system CPU).
            </summary>
        </member>
        <member name="F:Spea.SysCpuId.SYSOFLG1">
            <summary>
            It identifies the system output flag (output from the system CPU).
            </summary>
        </member>
        <member name="T:Spea.TestplanResults">
            <summary>
            Enum contains all possible result values for the testplan.
            </summary>
        </member>
        <member name="F:Spea.TestplanResults.PASS">
            <summary>
            The result is PASS.
            </summary>
        </member>
        <member name="F:Spea.TestplanResults.FAIL">
            <summary>
            The result is FAIL.
            </summary>
        </member>
        <member name="T:Spea.InputUserFlags">
            <summary>
            Enum contains all possible groups for input userflags.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.OPTINA">
            <summary>
            Optocoupled input. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.OPTINB">
            <summary>
            Optocoupled input. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.OPTINC">
            <summary>
            Optocoupled input. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.OPTIND">
            <summary>
            Optocoupled input. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.OPTINE">
            <summary>
            Optocoupled input. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.OPTINF">
            <summary>
            Optocoupled input. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.OPTINCPU">
            <summary>
            Optocoupled input. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.TTLINA">
            <summary>
            TLL input input. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.TTLINB">
            <summary>
            TLL input input. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.TTLINC">
            <summary>
            TLL input input. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.TTLIND">
            <summary>
            TLL input input. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.TTLINE">
            <summary>
            TLL input input. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.TTLINF">
            <summary>
            TLL input input. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.InputUserFlags.TTLINCPU">
            <summary>
            TLL input input. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="T:Spea.OutputUserFlags">
            <summary>
            Enum contains all possible result values for output userflags.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OPTOUTA">
            <summary>
            Optocoupled output. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OPTOUTB">
            <summary>
            Optocoupled output. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OPTOUTC">
            <summary>
            Optocoupled output. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OPTOUTD">
            <summary>
            Optocoupled output. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OPTOUTE">
            <summary>
            Optocoupled output. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OPTOUTF">
            <summary>
            Optocoupled output. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OPTOUTCPU">
            <summary>
            Optocoupled output. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.TTLOUTA">
            <summary>
            TLL output. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.TTLOUTB">
            <summary>
            TLL output. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.TTLOUTC">
            <summary>
            TLL output. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.TTLOUTD">
            <summary>
            TLL output. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.TTLOUTE">
            <summary>
            TLL output. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.TTLOUTF">
            <summary>
            TLL output. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.TTLOUTCPU">
            <summary>
            TLL output. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNOA">
            <summary>
            Low-power relay. Contact normally open. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNOB">
            <summary>
            Low-power relay. Contact normally open. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNOC">
            <summary>
            Low-power relay. Contact normally open. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNOD">
            <summary>
            Low-power relay. Contact normally open. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNOE">
            <summary>
            Low-power relay. Contact normally open. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNOF">
            <summary>
            Low-power relay. Contact normally open. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNOCPU">
            <summary>
            Low-power relay. Contact normally open. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNCA">
            <summary>
            Low-power relay. Contact normally closed. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNCB">
            <summary>
            Low-power relay. Contact normally closed. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNCC">
            <summary>
            Low-power relay. Contact normally closed. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNCD">
            <summary>
            Low-power relay. Contact normally closed. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNCE">
            <summary>
            Low-power relay. Contact normally closed. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNCF">
            <summary>
            Low-power relay. Contact normally closed. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYNCCPU">
            <summary>
            Low-power relay. Contact normally closed. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYSWA">
            <summary>
            Low-power relay. Contact NO/NC. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYSWB">
            <summary>
            Low-power relay. Contact NO/NC. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYSWC">
            <summary>
            Low-power relay. Contact NO/NC. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYSWD">
            <summary>
            Low-power relay. Contact NO/NC. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYSWE">
            <summary>
            Low-power relay. Contact NO/NC. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYSWF">
            <summary>
            Low-power relay. Contact NO/NC. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.RLYSWCPU">
            <summary>
            Low-power relay. Contact NO/NC. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.SIGA">
            <summary>
            Connection of a signal in the test head to one external point. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.SIGB">
            <summary>
            Connection of a signal in the test head to one external point. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.SIGC">
            <summary>
            Connection of a signal in the test head to one external point. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.SIGD">
            <summary>
            Connection of a signal in the test head to one external point. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.SIGE">
            <summary>
            Connection of a signal in the test head to one external point. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.SIGF">
            <summary>
            Connection of a signal in the test head to one external point. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.SIGCPU">
            <summary>
            Connection of a signal in the test head to one external point. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OCA">
            <summary>
            Open Collector output with GND reference. Unit installed in rack 1 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OCB">
            <summary>
            Open Collector output with GND reference. Unit installed in rack 1 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OCC">
            <summary>
            Open Collector output with GND reference. Unit installed in rack 1 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OCD">
            <summary>
            Open Collector output with GND reference. Unit installed in rack 2 slot option 1.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OCE">
            <summary>
            Open Collector output with GND reference. Unit installed in rack 2 slot option 2.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OCF">
            <summary>
            Open Collector output with GND reference. Unit installed in rack 2 slot option 3.
            </summary>
        </member>
        <member name="F:Spea.OutputUserFlags.OCCPU">
            <summary>
            Open Collector output with GND reference. Flag on CPU (YACPU100).
            </summary>
        </member>
        <member name="T:Spea.WfgInput">
            <summary>
            Enum contains all possible input types for waveformgenerator.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS1">
            <summary>
            ABUS1 = ABUS1.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS2">
            <summary>
            ABUS2 = ABUS2.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS3">
            <summary>
            ABUS3 = ABUS3.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS4">
            <summary>
            ABUS4 = ABUS4.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS5">
            <summary>
            ABUS5 = ABUS5.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS6">
            <summary>
            ABUS6 = ABUS6.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS7">
            <summary>
            ABUS7 = ABUS7.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUS8">
            <summary>
            ABUS8 = ABUS8.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.ABUSALL">
            <summary>
            ABUSALL = All Abus Lines.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.NONE">
            <summary>
            NONE = No Abus Lines.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.MOBUS1">
            <summary>
            Mobus line 1.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.MOBUS2">
            <summary>
            Mobus line 2.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.EXTSOURCE">
            <summary>
            Positive external input.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.INTSOURCE">
            <summary>
            Internal waveform source.
            </summary>
        </member>
        <member name="F:Spea.WfgInput.GND">
            <summary>
            Ground.
            </summary>
        </member>
        <member name="T:Spea.WfgOutputMode">
            <summary>
            Enum contains all possible output polarities for waveformgenerator.
            </summary>
        </member>
        <member name="F:Spea.WfgOutputMode.DIFFERENTIAL">
            <summary>
            Set the differential modality.
            </summary>
        </member>
        <member name="F:Spea.WfgOutputMode.SINGLE_ENDED">
            <summary>
            Set the single ended modality.
            </summary>
        </member>
        <member name="F:Spea.WfgOutputMode.DUAL">
            <summary>
            Set the dual modality.
            </summary>
        </member>
        <member name="T:Spea.WfgAmpRange">
            <summary>
            Enum contains all possible amplitude ranges for waveformgenerator output.
            </summary>
        </member>
        <member name="F:Spea.WfgAmpRange.R1V">
            <summary>
            Output voltage range = 1V.
            </summary>
        </member>
        <member name="F:Spea.WfgAmpRange.R10V">
            <summary>
            Output voltage range = 10V.
            </summary>
        </member>
        <member name="T:Spea.WfgOffsetRange">
            <summary>
            Enum contains all possible offset ranges for waveformgenerator output.
            </summary>
        </member>
        <member name="F:Spea.WfgOffsetRange.R1V">
            <summary>
            Output voltage range = 1V.
            </summary>
        </member>
        <member name="F:Spea.WfgOffsetRange.R10V">
            <summary>
            Output voltage range = 10V.
            </summary>
        </member>
        <member name="T:Spea.WfgImpedance">
            <summary>
            Enum contains all possible impance values for waveformgenerator output.
            </summary>
        </member>
        <member name="F:Spea.WfgImpedance.Z_3_OHM">
            <summary>
            Output impedance = 3 Ohm.
            </summary>
        </member>
        <member name="F:Spea.WfgImpedance.Z_10_OHM">
            <summary>
            Output impedance = 10 Ohm.
            </summary>
        </member>
        <member name="F:Spea.WfgImpedance.Z_50_OHM">
            <summary>
            Output impedance = 50 Ohm.
            </summary>
        </member>
        <member name="F:Spea.WfgImpedance.Z_600_OHM">
            <summary>
            Output impedance = 600 Ohm.
            </summary>
        </member>
        <member name="T:Spea.WfgTiming">
            <summary>
            Enum contains all possible timing flags for waveformgenerator output.
            </summary>
        </member>
        <member name="F:Spea.WfgTiming.TIM1">
            <summary>
            TIM1 = SBUS1   (ATEST).
            </summary>
        </member>
        <member name="F:Spea.WfgTiming.TIM2">
            <summary>
            TIM2 = SBUS2   (APH1 – Analogue phase 1).
            </summary>
        </member>
        <member name="F:Spea.WfgTiming.TIM3">
            <summary>
            TIM3 = SBUS3   (APH2 – Analogue phase 2).
            </summary>
        </member>
        <member name="F:Spea.WfgTiming.TIM4">
            <summary>
            TIM4 = SBUS4   (APH3 – Analogue phase 3).
            </summary>
        </member>
        <member name="T:Spea.WfgWaveformType">
            <summary>
            Enum contains all possible waveform types for waveformgenerator output.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.SINE">
            <summary>
            Sinus.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.SQUARE">
            <summary>
            Square.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.TRIANGLE">
            <summary>
            Triangle.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.POS_RAMP">
            <summary>
            Positive Ramp.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.NEG_RAMP">
            <summary>
            Negative Ramp.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.POS_DC">
            <summary>
            Positive Voltage DC.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.NEG_DC">
            <summary>
            Negative Voltage DC.
            </summary>
        </member>
        <member name="F:Spea.WfgWaveformType.ZERO_DC">
            <summary>
            Zero volt DC.
            </summary>
        </member>
        <member name="T:Spea.WfgOutputFormat">
            <summary>
            Enum contains all possible output formats for waveformgenerator output.
            </summary>
        </member>
        <member name="F:Spea.WfgOutputFormat.CONT_ON">
            <summary>
            Continuous ON.
            </summary>
        </member>
        <member name="F:Spea.WfgOutputFormat.CONT_OFF">
            <summary>
            Continuous OFF.
            </summary>
        </member>
        <member name="F:Spea.WfgOutputFormat.D_PULSE">
            <summary>
            Direct pulse.
            </summary>
        </member>
        <member name="F:Spea.WfgOutputFormat.I_PULSE">
            <summary>
            Invert pulse.
            </summary>
        </member>
        <member name="T:Spea.OutputWindow">
            <summary>
            Used to indicate in which window of Runpack a message should be printed.
            </summary>
        </member>
        <member name="F:Spea.OutputWindow.SystemLog">
            <summary>
            The system log window represents the lower window of Runpack.
            General information about the execution of the test is usually printed in this window.
            </summary>
        </member>
        <member name="F:Spea.OutputWindow.TestReport">
            <summary>
            The test report window represents the upper window of Runpack.
            Information about failed tests are usually printed in this window.
            </summary>
        </member>
        <member name="T:Spea.Status">
            <summary>
            The possible return values for <see cref="T:Spea.LeoF"/> methods.
            </summary>
        </member>
        <member name="F:Spea.Status.PASS">
            <summary>
            The instruction has been successfully executed without errors.
            </summary>
        </member>
        <member name="F:Spea.Status.FAIL">
            <summary>
            The instruction has been executed with errors.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ACGEN_NOT_PRESENT">
            <summary>
            The AC Generator module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ACGEN_V_VALUE">
            <summary>
            The voltage value parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ACGEN_V_RANGE">
            <summary>
            The voltage range parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ACGEN_I_VALUE">
            <summary>
            The current value parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ACGEN_I_LIMIT">
            <summary>
            The current limit parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ACGEN_FREQUENCY">
            <summary>
            The frequency value is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_AUX_NOT_PRESENT">
            <summary>
            The AUX module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_FLAG_ID">
            <summary>
            The FlagId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_LINE_FOR_FLAG">
            <summary>
            The SbusLine parameter is not valid for the selected FlagId.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PHASE_NOT_VALID">
            <summary>
            The PhaseId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_TON_TOFF">
            <summary>
            The parameter Ton or Toff1 or Toff2 is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_CYCLES">
            <summary>
            The Cycles parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_OUT_SOURCE">
            <summary>
            The OutSource parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_START_SOURCE">
            <summary>
            The StartSource parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_START_MODE">
            <summary>
            The StartMode parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_START_POLE">
            <summary>
            The StartPole parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_BSCAN_CHAIN_NAME">
            <summary>
            The ChainName parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_BSCAN_DRAWING_REFERENCE">
            <summary>
            The DrwRef parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_BSCAN_PIN_NAME_ARRAY">
            <summary>
            The PinNameArray is NULL.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_BSCAN_PIN_LEVEL_ARRAY">
            <summary>
            The PinLevelArray is NULL.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_BSCAN_PIN_LEVEL">
            <summary>
            One or more Pin level contained on PinLevelArray parameter are not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_BST">
            <summary>
            The BST module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_POINT">
            <summary>
            The Point parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_SOURCE">
            <summary>
            The Source parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_MBUS">
            <summary>
            The MbusLine parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_VOLTAGE">
            <summary>
            The Vvalue parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_CURRENT">
            <summary>
            The Ivalue parameter is out of possible programming range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_CURRENT_RANGE">
            <summary>
            The Ivalue parameter is out of the selected current range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_OUT_FORMAT">
            <summary>
            The OutFormat parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_POWER">
            <summary>
            The power is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_CHAN_STRING">
            <summary>
            The ChanList parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_NOT_PRESENT">
            <summary>
            The PMU module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_CH_A">
            <summary>
            The ChA parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_CH_B">
            <summary>
            The ChB parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_REF">
            <summary>
            The Ref parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_HOT_POLE">
            <summary>
            The Hot parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_COLD_POLE">
            <summary>
            The Cold parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_RANGE">
            <summary>
            The Range parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_VTRIGGER">
            <summary>
            The Threshlod parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_SLOPE">
            <summary>
            The Slope parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_RESOL">
            <summary>
            The Resol parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.INVALID">
            <summary>
            The measure done is not a valid measure.
            </summary>
        </member>
        <member name="F:Spea.Status.OVER_RANGE">
            <summary>
            The value to be measured is over the selected range of the counter.
            </summary>
        </member>
        <member name="F:Spea.Status.NO_STROBE">
            <summary>
            No input signal has been detected.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_FLAG_ID">
            <summary>
            The FlagId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_POLARITY">
            <summary>
            The Polarity parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCALOAD_NOT_PRESENT">
            <summary>
            The DC Active Load module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCALOAD_RIPPLE_MODE">
            <summary>
            The Mode parameter is not correct.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCALOAD_RIPPLE_RANGE">
            <summary>
            The Range parameter is not correct.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCALOAD_V_VALUE">
            <summary>
            The VValue parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCALOAD_I_VALUE">
            <summary>
            The IValue parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCGEN_NOT_PRESENT">
            <summary>
            The DC Generator module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCGEN_V_VALUE">
            <summary>
            The voltage value parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCGEN_I_VALUE">
            <summary>
            The current value parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_PATTERN_NOT_VALID">
            <summary>
            The Pattern parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_TESTPOINTS">
            <summary>
            The TestPoints parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_V_HIGH">
            <summary>
            The Vh parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_V_LOW">
            <summary>
            The Vl parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_V_REF">
            <summary>
            The Vref parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_IMPEDANCE">
            <summary>
            The Impedance parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_LEVEL">
            <summary>
            The Level parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_TP_NOT_VALID">
            <summary>
            Testpoint not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_TP_NOT_SET_FOR_ACQ">
            <summary>
            Testpoint not previously set for the acquisition.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_ACQ_TIMEOUT">
            <summary>
            Timeout during acquisition.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_ACQ_MEMORY_FULL">
            <summary>
            Acquisitions number exceeds maximum storable quantity.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_START_STROBE_MISSING">
            <summary>
            Start strobe missing.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_ACQ_OVERFLOW">
            <summary>
            Maximum measurable time expired (related to the selected resolution).
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_NOT_PRESENT">
            <summary>
            The SU module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_POINT">
            <summary>
            The Point parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_SOURCE">
            <summary>
            The Source parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_MBUS">
            <summary>
            The MbusLine parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_GAIN">
            <summary>
            The Gain parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_AMPLITUDE_RANGE">
            <summary>
            The Amplitude range is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_AMPLITUDE">
            <summary>
            The Amplitude parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_OFFSET_RANGE">
            <summary>
            The Offset range is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_RANGE">
            <summary>
            The Amplitude range and Offset range are not coherent.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_DC_OFFSET">
            <summary>
            The DC Offset parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_CURRENT_RANGE">
            <summary>
            The Ivalue parameter is out of the selected Irange parameter.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_WAVEFORM_TYPE">
            <summary>
            The Waveform type parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_FREQUENCY">
            <summary>
            The Frequency parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_OUT_FORMAT">
            <summary>
            The OutFormat parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_VOLTAGE">
            <summary>
            The Vvalue parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_CURRENT">
            <summary>
            The Ivalue parameter is out of possible programming range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_OUT_MODE">
            <summary>
            The OutMode parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_SLEW_RATE">
            <summary>
            The SlewRate parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_BY_PASS">
            <summary>
            The ByPass parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_VOLTAGE_RANGE">
            <summary>
            The Vvalue parameter is out of the selected Vrange parameter.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SU_FLAG">
            <summary>
            The Flag parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.OUT_OF_MEMORY">
            <summary>
            The number of acquisitions exceeds the dimensions of the acquisition RAM.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_INP_STAGE">
            <summary>
            The InputStage parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_COUPLING">
            <summary>
            The Coupling parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_FILTER">
            <summary>
            The Filter parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_V_RANGE">
            <summary>
            The VRange parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_MEAS_MODE">
            <summary>
            The MeasMode parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_MEAS_TYPE">
            <summary>
            The MeasType parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMU_ENBL_ACQ_RAM">
            <summary>
            The EnableAcqRam parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_MODE">
            <summary>
            The Mode parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_ESBUS_LINE">
            <summary>
            The EsbusLine parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_SBUS_LINE">
            <summary>
            The SbusLine parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_SYNC_CONFLICT">
            <summary>
            There is a conflict in the Synchro Bus.
            </summary>
        </member>
        <member name="F:Spea.Status.WRN_FLAG_ALREADY_CONN">
            <summary>
            The selected flag is already connect.
            </summary>
        </member>
        <member name="F:Spea.Status.WRN_FLAG_WAS_CONN_ON_LINE">
            <summary>
            The selected flag is already connect in a other line.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ZBMUMTX_BOARD_ID">
            <summary>
            The Board Id parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ZBMUMTX_INVALID_HANDLE">
            <summary>
            The USB handle is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ZBMUMTX_FT_NO_DEVICES">
            <summary>
            No FTDI devices available.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ZBMUMTX_FT_INSTRUCTION">
            <summary>
            Error executing FTDI instruction.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ZBMUMTX_FT_BIT_MODE">
            <summary>
            The parameter Bit Mode is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ZBMUMTX_I2C_INSTRUCTION">
            <summary>
            Error executing I2C instruction.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_RAC_NOT_PRESENT">
            <summary>
            The RAC module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ZBMUMTX_SPI_INSTRUCTION">
            <summary>
            Error executing SPI instruction.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INVALID_SYNC_LINE">
            <summary>
            The SbusLine parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_ID">
            <summary>
            The ObpId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_NOT_PRESENT">
            <summary>
            The OBP module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_VREF">
            <summary>
            The Vref parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_DATATYPE">
            <summary>
            The DataType parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_VHIGH">
            <summary>
            The Vh parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_VLOW">
            <summary>
            The Vl parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_IMPEDANCE">
            <summary>
            The Impedance parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_VTH">
            <summary>
            The Vth parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_STKSTATE">
            <summary>
            The StkState parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_HASHTYPE">
            <summary>
            The HashType parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_DEVICENAME">
            <summary>
            The DeviceName parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_DIENUMBER">
            <summary>
            The Die parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_SITE_NUMBER">
            <summary>
            The Site parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_FILENAME">
            <summary>
            The FileName parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_FILETYPE">
            <summary>
            The FileType parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_HEX_OPTIONS">
            <summary>
            The Options parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_SREC_OPTIONS">
            <summary>
            The Options parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_SVF_FREQUENCY">
            <summary>
            The Frequency parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_SVF_RETRY_NB">
            <summary>
            The RetryNumber parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_SVF_OPTIONS">
            <summary>
            The Options parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_MODELNAME">
            <summary>
            The ModelName parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_DONGLE">
            <summary>
            Error in Dongle check.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_IDCODE">
            <summary>
            The IdCode parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_CH_LIST">
            <summary>
            The ChList parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_PLUTYPE">
            <summary>
            The ObpPluType parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_PLULOAD">
            <summary>
            An error occurred during the PLU load.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_SECTOR_NUM">
            <summary>
            The Sector Num parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_OBP_SKIPVALUE">
            <summary>
            The SkipValue parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_ATTRIBUTE_ID">
            <summary>
            The AttributeId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_BAUDRATE">
            <summary>
            The Baudrate parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_CHECKSUM">
            <summary>
            The CheckSum parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_NUMBER">
            <summary>
            The PortId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_CH_TX">
            <summary>
            The ChanTx parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_CH_RX">
            <summary>
            The ChanRx parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.LIN_SEND_ECHO_MISSING">
            <summary>
            Error while sending frame (missing echo of bytes send).
            </summary>
        </member>
        <member name="F:Spea.Status.LIN_SEND_ECHO_ERROR">
            <summary>
            Error while sending frame (wrong echo of bytes send).
            </summary>
        </member>
        <member name="F:Spea.Status.LIN_RECEIVE_TIMEOUT">
            <summary>
            Timeout during frame reception.
            </summary>
        </member>
        <member name="F:Spea.Status.LIN_CHECKSUM_ERROR">
            <summary>
            Wrong checksum of the received frame.
            </summary>
        </member>
        <member name="F:Spea.Status.LIN_FRAME_MISSING">
            <summary>
            No frame available in the receive buffer (PluFrameSendReceive not executed correctly).
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_FRAME_ID">
            <summary>
            The FrameId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_FRAME_DATA_LEN">
            <summary>
            The FrameDataLen parameter is not valid
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_LIN_FRAME_READ_DATA_LEN">
            <summary>
            The FrameDataLen parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_NUMBER">
            <summary>
            The “PortId” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_BAUDRATE">
            <summary>
            The “Baudrate” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_IDLE_LEVEL">
            <summary>
            The “IdleLevel” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_CH_TX">
            <summary>
            The “ChanTx” parametere is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_CH_RX">
            <summary>
            The “ChanRx” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_BIT_SEQUENCE_QTY">
            <summary>
            The “BitSequenceQty” is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_BIT_QTY">
            <summary>
            The “BitQty” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_BIT_DATA_LEN">
            <summary>
            The “BitDataLen” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_RX_START_CONDITION_BIT_QTY">
            <summary>
            The “RxStartConditionBitQty” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PLU_SERCOM_TIMEOUT">
            <summary>
            The “Timeout” parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ASC_TIMEOUT">
            <summary>
            The receive is not completed within the maximum specified time.
            </summary>
        </member>
        <member name="F:Spea.Status.ASC_OVERRUN_ERROR">
            <summary>
            Overrun error occurs on serial port.
            </summary>
        </member>
        <member name="F:Spea.Status.ASC_FRAME_ERROR">
            <summary>
            Frame error occurs during data receive (at least on one character).
            </summary>
        </member>
        <member name="F:Spea.Status.ASC_PARITY_ERROR">
            <summary>
            Parity error occurs during data receive (at least on one character).
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMX_NOT_PRESENT">
            <summary>
            The Power Matrix module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PMX_SECTION">
            <summary>
            The section parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PPSU_NOT_PRESENT">
            <summary>
            The PPSU module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PPSU_V_VALUE">
            <summary>
            The Vvalue parameter is out of range
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PPSU_I_VALUE">
            <summary>
            The Ivalue parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_UABUS">
            <summary>
            The ProbeGroup parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_ID">
            <summary>
            The ProbeId parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_CHAN">
            <summary>
            The ProbeChan parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_ROW">
            <summary>
            The ProbeRow parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_OUT_IMP">
            <summary>
            The ProbeOutImp parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_VH">
            <summary>
            The ProbeVh parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_VTH">
            <summary>
            The ProbeVth parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_PROCO_PROBE_VHH">
            <summary>
            The ProbeVhh parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_ACGEN_TYPE">
            <summary>
            The type parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCALOAD_READ_TYPE">
            <summary>
            The Type parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DCGEN_TYPE">
            <summary>
            The type parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_RELAY_MODE">
            <summary>
            Invalid Relay Mode.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_RELAY_TIME">
            <summary>
            Invalid Relay Time.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_RUNA_TIMEOUT">
            <summary>
            RunA Timeout error.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_RUNA_TIMING_PROG">
            <summary>
            RunA Timing programming error.
            </summary>
        </member>
        <member name="F:Spea.Status.RP3ERR_TPRJ_CANNOT_RUN">
            <summary>
            The Analogue Test Plan cannot be run.
            </summary>
        </member>
        <member name="F:Spea.Status.RP3ERR_ANL_TPLAN_NOT_FOUND">
            <summary>
            The Analogue Test Plan was not found.
            </summary>
        </member>
        <member name="F:Spea.Status.RP3ERR_ANL_INV_TASK_NAME">
            <summary>
            The task name is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.RP3ERR_ANL_INV_TASK_LABEL">
            <summary>
            The task label is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.RP3ERR_ANL_INV_TASK_NUM">
            <summary>
            The task number is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_MODE">
            <summary>
            The Mode parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_DIG_TIMEOUT">
            <summary>
            The Timeout parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.RESULT_NONE">
            <summary>
            The site has no result.
            </summary>
        </member>
        <member name="F:Spea.Status.RESULT_NOT_MOUNTED">
            <summary>
            The site is not mounted.
            </summary>
        </member>
        <member name="F:Spea.Status.RESULT_REJECT">
            <summary>
            The site has been rejected.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_TP_STRING">
            <summary>
            The TpList parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_INV_GROUP_ID">
            <summary>
            The FlagGroup parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_UFLGROUP_NOT_PRESENT">
            <summary>
            The selected Flag is not present in the group.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_UFL_NOT_PRESENT">
            <summary>
            The User Flags are not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_NOT_PRESENT">
            <summary>
            The Wfg module is not present.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_ABUS">
            <summary>
            The ABUS row parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_MOBUS">
            <summary>
            The MOBUS parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_SOURCE">
            <summary>
            The Source parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_OUTPUT_MODE">
            <summary>
            The OutputMode parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_AMPLITUDE_RANGE">
            <summary>
            The AmpRange parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_AMPLITUDE">
            <summary>
            The Amplitude parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_OFFSET_RANGE">
            <summary>
            The OffRange parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_DC_OFFSET">
            <summary>
            The DCOffset parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_IMPEDANCE">
            <summary>
            The Impedance parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_FLAG">
            <summary>
            The Flag parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_WFORM_TYPE">
            <summary>
            The WformType parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_FREQUENCY">
            <summary>
            The Frequency parameter is out of range.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_WFG_OUT_FORMAT">
            <summary>
            The OutFormat parameter is not valid.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_OVER_VOLTAGE">
            <summary>
            Power Limit (over voltage).
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_UNDER_VOLTAGE">
            <summary>
            Power Limit (under voltage).
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_OVER_CURRENT">
            <summary>
            Power Limit (over current).
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_OVER_TEMPERATURE">
            <summary>
            Power Limit (over temperature).
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_SAFETY1">
            <summary>
            Safety A open.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_NACK">
            <summary>
            Unexpected error.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_FAN_FAILURE">
            <summary>
            Fan failure.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_SHORT_CIRCUIT">
            <summary>
            Short circuit.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_POWER_FAILURE">
            <summary>
            Power failure.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_OPEN_CIRCUIT">
            <summary>
            Open circuit.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_PROTECTION">
            <summary>
            Generator protection actived.
            </summary>
        </member>
        <member name="F:Spea.Status.ERR_POW_SAFETY2">
            <summary>
            Safety B open.
            </summary>
        </member>
        <member name="T:Spea.FlagValues">
            <summary>
            Represents the possible value for the status of user flags.
            </summary>
        </member>
        <member name="F:Spea.FlagValues.ON">
            <summary>
            The user flag is set, i.e. NO and COM are connected.
            </summary>
        </member>
        <member name="F:Spea.FlagValues.OFF">
            <summary>
            The user flag isn't set, i.e. NO and COM are not connected.
            </summary>
        </member>
        <member name="T:Spea.LeoFSettings">
            <summary>
            This class implements all parameters of LeoF module that can be configured using the Settings.json file.
            </summary>
        </member>
        <member name="M:Spea.LeoFSettings.#ctor(System.Boolean,Spea.LeoFSettings.BayBridge)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.LeoFSettings"/> class.
            </summary>
            <param name="isOffline">A value indicating if the offline mode is active. The offline mode deactivate some AtosF APIs so that a user can use the library to debug offline.</param>
            <param name="bayBridgeStatus">The bay bridge status for the project.</param>
        </member>
        <member name="M:Spea.LeoFSettings.#ctor(Spea.Settings.DocumentedSetting{System.Boolean},Spea.Settings.DocumentedSetting{Spea.LeoFSettings.BayBridge})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.LeoFSettings"/> class when deserializing.
            </summary>
            <param name="isOfflineSetting">The documented setting indicating if the offline mode is active. The offline mode deactivate some AtosF APIs so that a user can use the library to debug offline.</param>
            <param name="bayBridgeStatusSetting">The documented setting indicating the bay bridge status for the project.</param>
        </member>
        <member name="T:Spea.LeoFSettings.BayBridge">
            <summary>
            Describes the possible bay bridge configurations.
            </summary>
        </member>
        <member name="F:Spea.LeoFSettings.BayBridge.None">
            <summary>
            No bay bridge is active.
            </summary>
        </member>
        <member name="F:Spea.LeoFSettings.BayBridge.TwoBaysOneCore">
            <summary>
            Two bays are bridged together to work as one core.
            </summary>
        </member>
        <member name="F:Spea.LeoFSettings.BayBridge.FourBaysTwoCores">
            <summary>
            Four bays are bridged pairwise to work as two cores.
            </summary>
        </member>
        <member name="F:Spea.LeoFSettings.BayBridge.FourBaysOneCore">
            <summary>
            Four bays are bridged together to work as one core.
            </summary>
        </member>
        <member name="P:Spea.LeoFSettings.IsOffline">
            <summary>
            Gets a value indicating whether the offline mode is active. The offline mode deactivate some AtosF APIs so that a user can use the library to debug offline.
            </summary>
        </member>
        <member name="P:Spea.LeoFSettings.BayBridgeStatus">
            <summary>
            Gets the bay bridge status for the project.
            </summary>
        </member>
        <member name="P:Spea.LeoFSettings.IsOfflineSetting">
            <summary>
            Gets or sets the documented setting IsOffline for serialization.
            </summary>
        </member>
        <member name="P:Spea.LeoFSettings.BayBridgeStatusSetting">
            <summary>
            Gets or sets the documented setting BayBridgeStatus for serialization.
            </summary>
        </member>
        <member name="T:Spea.TTestMeas">
            <summary>
            It implements <see cref="T:AtosF.modAtosF2.TTestMeas"/>, which provide details about an analog test (inclusive its results).
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.HighThreshold">
            <summary>
            Gets or sets the high threshold.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.LowThreshold">
            <summary>
            Gets or sets the low threshold.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.MeasuredValue">
            <summary>
            Gets or sets the measured value.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.Site">
            <summary>
            Gets or sets the site number.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.TaskName">
            <summary>
            Gets or sets the task name.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.TaskNumber">
            <summary>
            Gets or sets the task number.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.TestNumber">
            <summary>
            Gets or sets the test number in the task.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.TestRemark">
            <summary>
            Gets or sets the test remark.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.TestResult">
            <summary>
            Gets or sets the test result.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.TplanId">
            <summary>
            Gets or sets the testplan identifier.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.TprjId">
            <summary>
            Gets or sets the test project identifier.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.UniqueTestId">
            <summary>
            Gets or sets the unique test identifier.
            </summary>
        </member>
        <member name="P:Spea.TTestMeas.Unit">
            <summary>
            Gets or sets the measure unit ("ohm", "V", …).
            </summary>
        </member>
        <member name="M:Spea.TTestMeas.op_Implicit(AtosF.modAtosF2.TTestMeas)~Spea.TTestMeas">
            <summary>
            Makes it possible to cast AtosF.modAtosF2.TTestMeas to LeoF.TTestMeas.
            </summary>
            <param name="t">LeoF.TTestMeas value.</param>
        </member>
        <member name="M:Spea.TTestMeas.op_Implicit(Spea.TTestMeas)~AtosF.modAtosF2.TTestMeas">
            <summary>
            Makes it possible to cast LeoF.TTestMeas to AtosF.modAtosF2.TTestMeas.
            </summary>
            <param name="t">AtosF.modAtosF2.TTestMeas value.</param>
        </member>
        <member name="T:Spea.LogColor">
            <summary>
            Colors used with print methods of <see cref="T:Spea.LogController"/>.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Aqua">
            <summary>
            Aqua Blue.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Black">
            <summary>.
            Black
            </summary>
        </member>
        <member name="F:Spea.LogColor.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Fuchsia">
            <summary>
            Fuchsia.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Gray">
            <summary>
            Gray.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Lime">
            <summary>
            Lime Green.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Maroon">
            <summary>
            Maroon.
            </summary>
        </member>
        <member name="F:Spea.LogColor.MedGray">
            <summary>
            Lighter Gray.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Navy">
            <summary>
            Navy Blue.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Olive">
            <summary>
            Olive Green.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Purple">
            <summary>
            Purple.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Silver">
            <summary>
            Silver (a gray ton lighter than <see cref="F:Spea.LogColor.MedGray"/>).
            </summary>
        </member>
        <member name="F:Spea.LogColor.Teal">
            <summary>
            Teal.
            </summary>
        </member>
        <member name="F:Spea.LogColor.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:Spea.LogColor.Yellow">
            <summary>
            Yellow.
            </summary>
        </member>
        <member name="T:Spea.LoggingOption">
            <summary>
            .
            </summary>
        </member>
        <member name="F:Spea.LoggingOption.Runpack">
            <summary>
            Log only into Runpack.
            </summary>
        </member>
        <member name="F:Spea.LoggingOption.File">
            <summary>
            Log only into file.
            </summary>
        </member>
        <member name="F:Spea.LoggingOption.Both">
            <summary>
            Log into file and Runpack.
            </summary>
        </member>
        <member name="T:Spea.LogController">
            <summary>
            This class provides methods for logging information to CdColl and to Runpack.
            </summary>
        </member>
        <member name="F:Spea.LogController.loggingHistory">
            <summary>
            Will contain all logging Messages which were sent to the Runpack window.
            </summary>
        </member>
        <member name="F:Spea.LogController.lock">
            <summary>
            Used to lock logging functions to allow them to be used in multithread applications.
            </summary>
        </member>
        <member name="M:Spea.LogController.EnterLogQueue">
            <summary>
            Enters the log queue, so that different bays can log to runpack in a sorted manner.
            It should be followed with <see cref="M:Spea.LogController.ExitLogQueue"/>, after the log commands that should be orchestrated are issued.
            </summary>
        </member>
        <member name="M:Spea.LogController.ExitLogQueue">
            <summary>
            Exits the log queue, synchronizing outputs with other bays.
            </summary>
        </member>
        <member name="M:Spea.LogController.LogFail(Spea.LogInfo,Spea.TestResult,System.Boolean,System.Boolean)">
            <summary>
            Log a FAIL result to CdColl and (optionally) to Test Report window.
            </summary>
            <param name="logInfo">The logging information.</param>
            <param name="testResult">The test result (Default: <see cref="F:Spea.TestResult.FAILBOTH"/>).</param>
            <param name="testReport">A value indicating whether FAIL result should be logged to Test Report window.</param>
            <param name="dataLog">Enables/disables datalogging.</param>
        </member>
        <member name="M:Spea.LogController.LogPass(Spea.LogInfo,System.Boolean)">
            <summary>
            Log a PASS result in CdColl.
            </summary>
            <param name="logInfo">The logging information.</param>
            <param name="dataLog">Enables/disables datalogging.</param>
        </member>
        <member name="M:Spea.LogController.Print(System.String,Spea.OutputWindow,System.Boolean)">
            <summary>
            Prints a message in the selected Runpack window.
            </summary>
            <param name="message">The message.</param>
            <param name="window">The selected Runpack window.</param>
            <param name="newLine">A value indicating if a newline should be printed after the message.</param>
        </member>
        <member name="M:Spea.LogController.GetLogHistory">
            <summary>
            Returns the logging history.
            </summary>
            <returns>List of string including all logs.</returns>
        </member>
        <member name="M:Spea.LogController.PrintPassTag(Spea.OutputWindow,System.Boolean)">
            <summary>
            Prints the word PASS with a green background in the selected Runpack window.
            </summary>
            <param name="window">The selected Runpack window.</param>
            <param name="newLine">A value indicating if a newline should be printed after the message.</param>
        </member>
        <member name="M:Spea.LogController.PrintFailTag(Spea.OutputWindow,System.Boolean)">
            <summary>
            Prints the word FAIL with a red background in the selected Runpack window.
            </summary>
            <param name="window">The selected Runpack window.</param>
            <param name="newLine">A value indicating if a newline should be printed after the message.</param>
        </member>
        <member name="M:Spea.LogController.PrintTag(System.String,Spea.LogColor,Spea.OutputWindow,System.Boolean)">
            <summary>
            Prints a tag in the form of [CONTENT] with a background color of choice in the selected Runpack window.
            </summary>
            <param name="tag">The content of the tag.</param>
            <param name="color">The color of choice.</param>
            <param name="window">The selected Runpack window.</param>
            <param name="newLine">A value indicating if a newline should be printed after the message.</param>
        </member>
        <member name="M:Spea.LogController.PrintWithTag(System.String,System.String,Spea.LogColor,Spea.OutputWindow,System.Boolean)">
            <summary>
            Prints a tag followed with a message in the selected Runpack window. <para/>
            The tag will have the background color provided by the user as <paramref name="color"/>.<para/>
            Example: "[TAG] My message in Runpack".
            </summary>
            <param name="message">The message.</param>
            <param name="tag">The content of the tag.</param>
            <param name="color">The color of choice.</param>
            <param name="window">The selected Runpack window.</param>
            <param name="newLine">A value indicating if a newline should be printed after the message.</param>
        </member>
        <member name="M:Spea.LogController.PrintWithTagAndPass(System.String,System.String,Spea.LogColor,Spea.OutputWindow,System.Boolean)">
            <summary>
            Print a tag followed with a message and a PASS tag in the selected Runpack window. <para/>
            The tag will have the background color provided by the user as <paramref name="color"/>.<para/>
            The PASS tag has a green background.<para/>
            Example: "[TAG] My message in Runpack PASS".
            </summary>
            <param name="message">The message.</param>
            <param name="tag">The content of the tag.</param>
            <param name="color">The color of choice.</param>
            <param name="window">The selected Runpack window.</param>
            <param name="newLine">A value indicating if a newline should be printed after the message.</param>
        </member>
        <member name="M:Spea.LogController.PrintWithTagAndFail(System.String,System.String,Spea.LogColor,Spea.OutputWindow,System.Boolean)">
            <summary>
            Print a tag followed with a message and a FAIL tag in the selected Runpack window. <para/>
            The tag will have the background color provided by the user as <paramref name="color"/>.<para/>
            The FAIL tag has a red background.<para/>
            Example: "[TAG] My message in Runpack FAIL".
            </summary>
            <param name="message">The message.</param>
            <param name="tag">The content of the tag.</param>
            <param name="color">The color of choice.</param>
            <param name="window">The selected Runpack window.</param>
            <param name="newLine">A value indicating if a newline should be printed after the message.</param>
        </member>
        <member name="M:Spea.LogController.GetContrastyForegroundColor(Spea.LogColor)">
            <summary>
            It selects a color for the background that has a good contrast to the given background color.
            It will select <see cref="F:Spea.LogColor.White"/> for dark backgrounds and <see cref="F:Spea.LogColor.Black"/>
            for light backgrounds.
            </summary>
            <param name="backgroundColor">The background color.</param>
            <returns>The contrasty foreground color.</returns>
        </member>
        <member name="M:Spea.LogController.ConfigureLogging(Spea.LoggingOption,System.String,System.String)">
            <summary>
            Configures where the text of the logcontroller should be written.
            </summary>
            <param name="loggingOption">Logging Options.</param>
            <param name="filePath">Path in which the logFile should be created.</param>
            <param name="filename">Filename of the LogFile.</param>
            <exception cref="T:System.Exception">Directory not existing.</exception>
        </member>
        <member name="M:Spea.LogController.GetCommandLine(System.Diagnostics.Process)">
            <summary>
            Gets the command line of the running process.
            </summary>
            <param name="process">The process to operate on.</param>
            <returns>The full command line of the running process.</returns>
        </member>
        <member name="T:Spea.LogInfo">
            <summary>
            Class representing logging information that can used with functions <see cref="M:Spea.LogController.LogPass(Spea.LogInfo,System.Boolean)"/>
            and <see cref="M:Spea.LogController.LogFail(Spea.LogInfo,Spea.TestResult,System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.TestNumber">
            <summary>
            Gets or sets the unique test number.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.DrawingReference">
            <summary>
            Gets or sets the drawing reference of tested component.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.Remark">
            <summary>
            Gets or sets the test remark.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.MeasuredValue">
            <summary>
            Gets or sets the measured value.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.ThrLow">
            <summary>
            Gets or sets lower limit for the measurement.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.ThrHigh">
            <summary>
            Gets or sets the upper limit for the measurement.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.MeasUnit">
            <summary>
            Gets or sets the measurement unit.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.TpList">
            <summary>
            Gets or sets a list of test points used in the measurement.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.AltMsg">
            <summary>
            Gets or sets an alternative message.
            </summary>
        </member>
        <member name="P:Spea.LogInfo.Site">
            <summary>
            Gets or sets the site where the measurement was performed.
            </summary>
        </member>
        <member name="T:Spea.Obp.FileType">
            <summary>
            Possible filetypes to dump at.
            </summary>
        </member>
        <member name="F:Spea.Obp.FileType.HEX">
            <summary>
            Intel-Hex.
            </summary>
        </member>
        <member name="F:Spea.Obp.FileType.SREC">
            <summary>
            Motorola S-Record.
            </summary>
        </member>
        <member name="F:Spea.Obp.FileType.BIN">
            <summary>
            Binary format.
            </summary>
        </member>
        <member name="T:Spea.Obp.Dumper">
            <summary>
            Class contains function for creating dumpfile with obpreaddata.
            </summary>
        </member>
        <member name="M:Spea.Obp.Dumper.#ctor(Spea.ObpID,Spea.Obp.FileType,Spea.DataType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.Obp.Dumper"/> class.
            </summary>
            <param name="obpId">The Obp-version which is used.</param>
            <param name="fileType">the file type which is used to dump in.</param>
            <param name="dataType">the type of data which is expected from the obpmodel.</param>
            <param name="dumpPath">path to folder, where files should be stored.</param>
        </member>
        <member name="M:Spea.Obp.Dumper.CreateDumpFile(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            [OBP500] Creates a dumpfile of memory starting from given address.
            </summary>
            <param name="fileName">Name of the dumpfile.</param>
            <param name="startAddress">Address to start dumping at.</param>
            <param name="lengthInByte">Length of Bytes to dump.</param>
            <param name="lineLength">length of lines in file. Will be ignored if chosen BIN.</param>
            <param name="site">site which sould be dumped. Used for OBP500.</param>
            <returns>Status PASS/FAIL.</returns>
            <exception cref="T:System.Exception">If wrong use of combination of site and obp-type.</exception>
        </member>
        <member name="M:Spea.Obp.Dumper.CreateDumpFile(System.String,System.Int32,System.Int32,System.Int32,System.Int16,System.Boolean)">
            <summary>
            [OBP400] Creates a dumpfile of memory starting from given address.
            </summary>
            <param name="fileName">Name of the dumpfile.</param>
            <param name="startAddress">Address to start dumping at.</param>
            <param name="lengthInByte">Length of Bytes to dump.</param>
            <param name="lineLength">length of lines in file. Will be ignored if chosen BIN.</param>
            <param name="die">Die which sould be dumped. Used for OBP400.</param>
            <param name="isMultiDie">Multi Die or Single Die driver. </param>
            <returns>Status PASS/FAIL.</returns>
            <exception cref="T:System.Exception">If wrong use of combination of die and obp-type.</exception>
        </member>
        <member name="T:Spea.Obp.Firmware.FileType">
            <summary>
            Possible filetypes for file creation.
            </summary>
        </member>
        <member name="F:Spea.Obp.Firmware.FileType.HEX">
            <summary>
            Intel hex.
            </summary>
        </member>
        <member name="F:Spea.Obp.Firmware.FileType.SREC">
            <summary>
            Motorola srecord.
            </summary>
        </member>
        <member name="F:Spea.Obp.Firmware.FileType.BIN">
            <summary>
            Binary filetype.
            </summary>
        </member>
        <member name="T:Spea.Obp.Firmware.FirmwareTools">
            <summary>
            Includes functions to manipulate firmware-files.
            </summary>
        </member>
        <member name="M:Spea.Obp.Firmware.FirmwareTools.Modify(System.String,System.Collections.Generic.List{Spea.Obp.Firmware.FirmwareTools.FirmwareData},System.Boolean,System.Int32)">
            <summary>
            Takes the original firmware file and inserts/overwrites the given data at the corresponding addresses.
            </summary>
            <param name="originalFirmwareFile">Path to the original firmware file.</param>
            <param name="customData">Combination of startaddresses and userdata.</param>
            <param name="addDateToFileName">Adds the current date to the filename so that all files will be kept.</param>
            <param name="lineLength">Length of line in file.</param>
        </member>
        <member name="M:Spea.Obp.Firmware.FirmwareTools.Modify(System.String,System.Collections.Generic.List{Spea.Obp.Firmware.FirmwareTools.FirmwareData},System.String,System.Boolean,System.Int32)">
            <summary>
            Takes the original firmware file and inserts/overwrites the given data at the corresponding addresses.
            </summary>
            <param name="originalFirmwareFile">Path to the original firmware file.</param>
            <param name="customData">Combination of startaddresses and userdata.</param>
            <param name="nameForNewFile">The name for the new file. No path just the name.</param>
            <param name="addDateToFileName">Adds the current date to the filename so that all files will be kept.</param>
            <param name="lineLength">Length of line in file.</param>
        </member>
        <member name="M:Spea.Obp.Firmware.FirmwareTools.Modify(System.String,System.Collections.Generic.List{Spea.Obp.Firmware.FirmwareTools.FirmwareData},System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Takes the original firmware file and inserts/overwrites the given data at the corresponding addresses.
            </summary>
            <param name="originalFirmwareFile">Path to the original firmware file.</param>
            <param name="customData">Combination of startaddresses and userdata.</param>
            <param name="nameForNewFile">The name for the new file. No path just the name.</param>
            <param name="customPathForNewFile">Path where the new file should be created.</param>
            <param name="addDateToFileName">Adds the current date to the filename so that all files will be kept.</param>
            <param name="lineLength">Length of line in file.</param>
        </member>
        <member name="M:Spea.Obp.Firmware.FirmwareTools.Create(System.Collections.Generic.List{Spea.Obp.Firmware.FirmwareTools.FirmwareData},System.String,System.String,Spea.Obp.Firmware.FileType,System.Boolean,System.Int32)">
            <summary>
            Creates a firmwarefile with the given data at the corresponding addresses.
            </summary>
            <param name="data">Combination of startaddresses and data.</param>
            <param name="fileName">The name for the new file. No path just the name.</param>
            <param name="pathForFile">Path where the new file should be created.</param>
            <param name="fileType">Type of file, which should be created.</param>
            <param name="addDateToFileName">Adds the current date to the filename so that all files will be kept.</param>
            <param name="lineLength">Length of line in file.</param>
        </member>
        <member name="T:Spea.Obp.Firmware.FirmwareTools.FirmwareData">
            <summary>
            Structure for series of Data manipulated or edited in a firmwareFile.
            </summary>
        </member>
        <member name="P:Spea.Obp.Firmware.FirmwareTools.FirmwareData.StartAddress">
            <summary>
            Gets or sets the StartAddress, where the data begin.
            </summary>
        </member>
        <member name="P:Spea.Obp.Firmware.FirmwareTools.FirmwareData.Data">
            <summary>
            Gets or sets the Data written to defined StartAddress.
            </summary>
        </member>
        <member name="T:Spea.Obp.Setup.FlashFile">
            <summary>
            Represents a flash file with its properties.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.FlashFile.FileName">
            <summary>
            Gets or sets the name of the flash file.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.FlashFile.Type">
            <summary>
            Gets or sets the type of the flash file (HEX, SREC, BIN, etc).
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.FlashFile.DataType">
            <summary>
            Gets or sets the data type of the flash file content (DDBYTE, WORD, DWORD, QWORD).
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.FlashFile.Hash">
            <summary>
            Gets or sets the hash of the flash file content.
            </summary>
        </member>
        <member name="T:Spea.Obp.Setup.FlashFileCollection">
            <summary>
            Represents a collection of flash files, allowing for the creation and management of a list of flash files based on specific criteria.
            Everything is read from the Obejcts.INI file.
            </summary>
        </member>
        <member name="F:Spea.Obp.Setup.FlashFileCollection.list">
            <summary>
            A static list that holds the individual flash files.
            </summary>
        </member>
        <member name="M:Spea.Obp.Setup.FlashFileCollection.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.Obp.Setup.FlashFileCollection"/> class.
            </summary>
            <param name="drawRef">The reference used to draw or select flash files.</param>
            <param name="customFilePath">Indicates whether a custom file path is used instead of the default path.</param>
        </member>
        <member name="P:Spea.Obp.Setup.FlashFileCollection.List">
            <summary>
            Gets or sets the list of flash files.
            </summary>
        </member>
        <member name="M:Spea.Obp.Setup.FlashFileCollection.CalculateMD5(System.String)">
            <summary>
            Calculates the MD5 hash for a given filename.
            </summary>
            <param name="filename">The filename for which to calculate the MD5 hash.</param>
            <returns>The calculated MD5 hash as a string.</returns>
        </member>
        <member name="M:Spea.Obp.Setup.FlashFileCollection.CreateFileList(System.String,System.Collections.Generic.List{Spea.Obp.Setup.FlashFile},System.Boolean)">
            <summary>
            Creates a list of flash files based on the provided drawing reference, list, and whether a custom file path is used.
            </summary>
            <param name="drawRef">The reference used to draw or select flash files.</param>
            <param name="list">The list to which the flash files will be added.</param>
            <param name="customFilePath">Indicates whether a custom file path is used instead of the default path.</param>
        </member>
        <member name="T:Spea.Obp.Setup.ObpIcDescription">
            <summary>
            Represents the description of an Integrated Circuit (IC) for OBP setup, including its drawing reference, model name, device name, signals, and associated flash files.
            </summary>
        </member>
        <member name="M:Spea.Obp.Setup.ObpIcDescription.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{Spea.Obp.Setup.ObpSignal},System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{System.Int32,System.Int16},System.Collections.Generic.Dictionary{System.Int32,System.Int16},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.Obp.Setup.ObpIcDescription"/> class.
            </summary>
            <param name="drawRef">The drawing reference associated with the IC.</param>
            <param name="modelName">The model name of the OBP driver.</param>
            <param name="deviceName">The device name of the IC.</param>
            <param name="obpSignals">A list of OBP signals associated with the IC.</param>
            <param name="useFlashFiles">Indicates whether flash files should be used.</param>
            <param name="flashFileCustomPath">Indicates if a custom path for flash files is used.</param>
            <param name="siteDieRelation">Optional dictionary containing the site to die relation for OBP400 multidie models.</param>
            <param name="siteBoardRelation">Optional dictionary containing the site to board relation for OBP400 models.</param>
            <param name="commFreq">"Communication frequency to be used.</param>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.DrawRef">
            <summary>
            Gets or sets the drawing reference associated with the IC.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.ModelName">
            <summary>
            Gets or sets the model name of the Obp driver.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.DeviceName">
            <summary>
            Gets or sets the device name of the IC.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.CommFreq">
            <summary>
            Gets or sets the communication frequency.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.FlashFiles">
            <summary>
            Gets or sets the list of flash files associated with the IC.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.ObpSignals">
            <summary>
            Gets or sets the list of OBP signals associated with the IC.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.SiteDieRelation">
            <summary>
            Gets or sets the Site to Die relation dictionary for OBP400 multidie models.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpIcDescription.SiteBoardRelation">
            <summary>
            Gets or sets the Site to board relation dictionary for OBP400 models.
            </summary>
        </member>
        <member name="T:Spea.Obp.Setup.ObpSignal">
            <summary>
            Describes the Signal for OBP.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpSignal.Name">
            <summary>
            Gets or sets the name of the signal.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpSignal.SignalTp">
            <summary>
            Gets or sets testpoint used on SPEA machine for programming Signal.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpSignal.Vh">
            <summary>
            Gets or sets high level voltage of signal.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpSignal.Sensor">
            <summary>
            Gets or sets threshhold voltage of signal.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpSignal.Impedance">
            <summary>
            Gets or sets output impedance used on the SPEA channel for this signal.
            </summary>
        </member>
        <member name="P:Spea.Obp.Setup.ObpSignal.PullUp">
            <summary>
            Gets or sets the pullup resistor value for this signal (only OBP500).
            </summary>
        </member>
        <member name="T:Spea.Settings">
            <summary>
            Class representing all settings of the AtosFWarapper library.
            Can be serialized and deserialized from settings.json <see cref="P:Spea.Settings.SettingsPath"/>.
            </summary>
        </member>
        <member name="F:Spea.Settings.leoFSettings">
            <summary>
            The settings of the LeoF module.
            </summary>
        </member>
        <member name="M:Spea.Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.Settings"/> class. This constructor only used to create an object for serialization.
            </summary>
        </member>
        <member name="M:Spea.Settings.#ctor(Spea.LeoFSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.Settings"/> class. This constructor is used for deserialization.
            </summary>
            <param name="leoFSettings">The settings of the LeoF module.</param>
        </member>
        <member name="P:Spea.Settings.LeoFSettings">
            <summary>
            Gets or sets the settings for the LeoF module, this will also trigger serialization and deserialization of settings.json.
            </summary>
        </member>
        <member name="P:Spea.Settings.IsLoaded">
            <summary>
            Gets or sets a value indicating whether settings.json was at least once deserialized.
            </summary>
        </member>
        <member name="P:Spea.Settings.SettingsPath">
            <summary>
            Gets or sets the path in which settings.json is stored. The path is the same as the .exe file that is running.
            </summary>
        </member>
        <member name="M:Spea.Settings.Load">
            <summary>
            Deserializes settings.json, if it doesn't exist, creates the settings.json file with current settings.
            </summary>
        </member>
        <member name="M:Spea.Settings.Write">
            <summary>
            Serializes the settings to settings.json.
            </summary>
        </member>
        <member name="M:Spea.Settings.Get``1(``0)">
            <summary>
            Used to desserialize settings.json before getting the value of a field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field of interest.</param>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:Spea.Settings.Set``1(``0@,``0@)">
            <summary>
            Used to desserialize settings.json before setting the value of a field and to serialize it again after the value is set.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">A reference to the field of interest.</param>
            <param name="value">The new value for the field.</param>
        </member>
        <member name="M:Spea.Settings.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Check if file is beeing accessed by other thread.
            </summary>
            <param name="file">The information about the file.</param>
            <returns>A value indicating if the file is locked by other thread.</returns>
        </member>
        <member name="T:Spea.Settings.DocumentedSetting`1">
            <summary>
            A class representing a documented setting used for serialization. It adds a description to any type.
            </summary>
            <typeparam name="T">The type of the setting that should be documented.</typeparam>
        </member>
        <member name="P:Spea.Settings.DocumentedSetting`1.Description">
            <summary>
            Gets or sets the description of the setting.
            </summary>
        </member>
        <member name="P:Spea.Settings.DocumentedSetting`1.Value">
            <summary>
            Gets or sets the value of the setting.
            </summary>
        </member>
        <member name="T:Spea.SystemExplorer.Rack">
            <summary>
            The representation of a system rack or bay.
            </summary>
        </member>
        <member name="M:Spea.SystemExplorer.Rack.#ctor(System.Int32,System.Collections.Generic.List{Spea.SystemExplorer.Slot})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.SystemExplorer.Rack"/> class.
            </summary>
            <param name="number">The rack number.</param>
            <param name="slots">The slot list.</param>
        </member>
        <member name="P:Spea.SystemExplorer.Rack.Number">
            <summary>
            Gets or sets the rack number.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Rack.Slots">
            <summary>
            Gets or sets the slot list.
            </summary>
        </member>
        <member name="T:Spea.SystemExplorer.SpeaUnits">
            <summary>
            An enumeration representing the different types of units that can be connected to slots.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.UNKNOWN">
            <summary>
            The unit is of an unknown type.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YACONPS">
            <summary>
            An YACONPS unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YASU">
            <summary>
            An YASU unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YAICT">
            <summary>
            An YAICT unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YASAU">
            <summary>
            An YASAU unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YA32UFLR">
            <summary>
            An YA32UFLR unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YA32ESCAN">
            <summary>
            An YA32ESCAN unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YASEZ64OPT">
            <summary>
            An YASEZ64OPT unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YA16RLY">
            <summary>
            An YA16RLY unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YACPU">
            <summary>
            An YACPU unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YAPMU">
            <summary>
            An YAPMU unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YAGEN">
            <summary>
            An YAGEN unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YADIO">
            <summary>
            An YADIO unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YAPSMX">
            <summary>
            An YAPSMX unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YASCA">
            <summary>
            An YASCA unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YADTIM">
            <summary>
            An YADTIM unit.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SpeaUnits.YARAC">
            <summary>
            An YARAC unit.
            </summary>
        </member>
        <member name="T:Spea.SystemExplorer.Slot">
            <summary>
            The representation of a slot.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.Slot.DbdioId">
            <summary>
            An identificator for scanners with DBDIO units.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.Slot.DoubleScannerId">
            <summary>
            An identificator for scanners with DBSCAN units (double scanners).
            </summary>
        </member>
        <member name="M:Spea.SystemExplorer.Slot.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.SystemExplorer.Slot"/> class.
            </summary>
            <param name="number">The slot number.</param>
            <param name="unitName">The name of the unit connected to the slot.</param>
        </member>
        <member name="M:Spea.SystemExplorer.Slot.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.SystemExplorer.Slot"/> class for scanners.
            </summary>
            <param name="number">The slot number.</param>
            <param name="unitName">The name of the scanner connected to the slot.</param>
            <param name="startChannel">The first channel associated with this scanner.</param>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.Number">
            <summary>
            Gets the slot number.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.UnitType">
            <summary>
            Gets the type of the unit connected to the slot.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.UnitName">
            <summary>
            Gets the name of the unit connected to the slot.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.HasDigitalCapabilities">
            <summary>
            Gets a value indicating whether the unit has digital scanner capabilities.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.HasAnalogCapabilities">
            <summary>
            Gets a value indicating whether the unit has analog scanner capabilities.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.IsDoubleScanner">
            <summary>
            Gets a value indicating whether the unit has a DBSCAN attached to it (double scanner).
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.StartChannel">
            <summary>
            Gets the start channel number.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.EndChannel">
            <summary>
            Gets the end channel number.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.DoubleScannerStartChannel">
            <summary>
            Gets the start channel number of the double scanner.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.Slot.DoubleScannerEndChannel">
            <summary>
            Gets the end channel number of the double scanner.
            </summary>
        </member>
        <member name="T:Spea.SystemExplorer.SystemExplorer">
            <summary>
            The main class of the System Explorer library.
            Each provide ways for accessing the current system configuration as read by Leonardo during the initialization of Runpack.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SystemExplorer.ConfigFolderDefault">
            <summary>
            The default path to the configuration folder which contains the necessary INI-Files.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SystemExplorer.SystemConfig">
            <summary>
            The name of the System Configuration INI-File.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SystemExplorer.HardwareSetup">
            <summary>
            The name of the Hardware Setup INI-File.
            </summary>
        </member>
        <member name="F:Spea.SystemExplorer.SystemExplorer.RackFilesKey">
            <summary>
            The base name for the keys in the Hardware Setup file which contains the System Rack Files.
            </summary>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.SystemExplorer.SystemExplorer"/> class by passing a path to the configuration folder
            which contains HwSetup.ini, System.config and all system rack files.
            </summary>
            <param name="configFolder">The path to the configuration folder.</param>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.SystemExplorer.SystemExplorer"/> class.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.SystemExplorer.ConfigFolder">
            <summary>
            Gets the folder which the <see cref="T:Spea.SystemExplorer.SystemExplorer"/> used for extracting its information from INI-Files.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.SystemExplorer.Racks">
            <summary>
            Gets the list of Racks of the system.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.SystemExplorer.DigitalChannels">
            <summary>
            Gets the list of channels that have digital capabilities.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.SystemExplorer.AnalogChannels">
            <summary>
            Gets the list of channels that have analog capabilities.
            </summary>
        </member>
        <member name="P:Spea.SystemExplorer.SystemExplorer.IniParser">
            <summary>
            Gets or sets the parser used to parse INI-Files.
            </summary>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.IsChannelDigital(System.Int32)">
            <summary>
            Checks whether a channel has digital capabilities.
            </summary>
            <param name="channel">The channel number.</param>
            <returns>A variable which informs whether a channel has digital capabilities.</returns>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.IsChannelAnalog(System.Int32)">
            <summary>
            Checks whether a channel has analog capabilities.
            </summary>
            <param name="channel">The channel number.</param>
            <returns>A variable which informs whether a channel has analog capabilities.</returns>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.Initialize">
            <summary>
            Initializes the system explorer by populating the Racks list with the information retrieved from the INI files
            in the folder specified by <see cref="P:Spea.SystemExplorer.SystemExplorer.ConfigFolder"/>.
            </summary>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.GetRackFilesNames">
            <summary>
            It returns a dictionary containing the names of the files which are used to configure the system racks.
            The keys of this dictionary are the same as found in the HwSetup file (SystemRackFile1, SystemRackFile2...).
            </summary>
            <returns>The system rack file names dictionary.</returns>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.GetRackConfiguration(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            It returns a dictionary where the keys are Racks (Rack1, Rack2...) and the values are dictionaries, which keys
            are slots and values are the unit connected to which slot.
            </summary>
            <param name="rackFiles">A dictionary as returned by <see cref="M:Spea.SystemExplorer.SystemExplorer.GetRackFilesNames"/>.</param>
            <returns>The rack configuration dictionary.</returns>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.GetChannselStart(IniParser.Model.IniData,System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Returns the first channel associated with a YASCAN or YADIO unit in a specifc slot based on the
            information in the system rack file.
            </summary>
            <param name="rackFile">The system rack file which describes the slot configuration.</param>
            <param name="slot">A key-value-pair, in which the key is the slot name and the value is the unit name connected to the slot.</param>
            <returns>The first channel associated with the unit or 0 if the unit is neither an YASCAN nor an YADIO.</returns>
        </member>
        <member name="M:Spea.SystemExplorer.SystemExplorer.ExtractNumber(System.String)">
            <summary>
            Extracts and returns all digits in a string.
            </summary>
            <param name="original">The string from which the digits should be extracted.</param>
            <returns>A string containing only the digits of the original string.</returns>
        </member>
        <member name="T:Spea.TestEnvironment.DcGenConfig">
            <summary>
            Describes the configuration of a DC-generator for use with a test environment.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.DcGenConfig.#ctor(Spea.DcGenInstrId,System.Double,System.Double,Spea.CanInstruments.DcGenType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.DcGenConfig"/> class.
            </summary>
            <param name="id">The ID of the DC-generator.</param>
            <param name="voltage">The output voltage.</param>
            <param name="current">The current limit.</param>
            <param name="type">The type of the DC-Gen (Default DCG110).</param>
        </member>
        <member name="P:Spea.TestEnvironment.DcGenConfig.Id">
            <summary>
            Gets the ID of the DC-generator.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.DcGenConfig.Type">
            <summary>
            Gets the Type of the DC-generator.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.DcGenConfig.Voltage">
            <summary>
            Gets the output voltage.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.DcGenConfig.Current">
            <summary>
            Gets the current limit.
            </summary>
        </member>
        <member name="T:Spea.TestEnvironment.Fixture`2">
            <summary>
            Responsible for setting and resetting user flags based on function.
            </summary>
            <typeparam name="TUserFlagFunction">An enum containing all functions achieved via user flags.</typeparam>
            <typeparam name="TPmxChannel">An enum containing all functions achieved via pmx channels.</typeparam>
        </member>
        <member name="M:Spea.TestEnvironment.Fixture`2.#ctor(System.Collections.Generic.Dictionary{`0,Spea.TestEnvironment.UserFlag},System.Collections.Generic.Dictionary{`1,Spea.TestEnvironment.PmxChannel})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.Fixture`2"/> class.
            </summary>
            <param name="userFlagFromFunction">A mapping of function to.  </param>
            <param name="pmxFlagFunctionFromNumber">A mapping offunction to .</param>
        </member>
        <member name="M:Spea.TestEnvironment.Fixture`2.#ctor(System.Collections.Generic.Dictionary{`0,Spea.TestEnvironment.UserFlag})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.Fixture`2"/> class.
            </summary>
            <param name="userFlagFromFunction">A mapping of function to.  </param>
        </member>
        <member name="M:Spea.TestEnvironment.Fixture`2.#ctor(System.Collections.Generic.Dictionary{`1,Spea.TestEnvironment.PmxChannel})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.Fixture`2"/> class.
            </summary>
            <param name="pmxChannelFunctionFromNumber">A mapping of function to.  </param>
        </member>
        <member name="M:Spea.TestEnvironment.Fixture`2.SetFlag(`0)">
            <summary>
            Sets the User Flag correspondent to a function.
            </summary>
            <param name="function">The function that setting the user flag achieves.</param>
        </member>
        <member name="M:Spea.TestEnvironment.Fixture`2.ResetFlag(`0)">
            <summary>
            Resets the User Flag correspondent to a function.
            </summary>
            <param name="function">The function that setting the user flag achieves.</param>
        </member>
        <member name="M:Spea.TestEnvironment.Fixture`2.SetPmx(`1)">
            <summary>
            Sets the Pmx Flag correspondent to a function.
            </summary>
            <param name="function">The function that setting the pmx flag achieves.</param>
        </member>
        <member name="M:Spea.TestEnvironment.Fixture`2.ResetPmx(`1)">
            <summary>
            Resets the Pmx Flag correspondent to a function.
            </summary>
            <param name="function">The function that setting the pmx flag achieves.</param>
        </member>
        <member name="T:Spea.TestEnvironment.ModifiableState">
            <summary>
            A modifiable state.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.#ctor(Spea.TestEnvironment.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.ModifiableState"/> class.
            </summary>
            <param name="state">The state to be modfied.</param>
        </member>
        <member name="P:Spea.TestEnvironment.ModifiableState.State">
            <summary>
            Gets or sets the internal state.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.op_Implicit(Spea.TestEnvironment.ModifiableState)~Spea.TestEnvironment.State">
            <summary>
            Implicit cast to state type.
            </summary>
            <param name="modifiableState">The modifiable state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.FpsOn(Spea.FpsId[])">
            <summary>
            Adds Fixed Power Supply (FPS) to the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be added to the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.FpsOn(System.Collections.Generic.IEnumerable{Spea.FpsId})">
            <summary>
            Adds Fixed Power Supply (FPS) to the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be added to the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.FpsOff(Spea.FpsId[])">
            <summary>
            Removes Fixed Power Supply (FPS) from the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be removed from the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.FpsOff(System.Collections.Generic.IEnumerable{Spea.FpsId})">
            <summary>
            Removes Fixed Power Supply (FPS) from the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be removed from the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.SetPps(Spea.TestEnvironment.PpsConfig[])">
            <summary>
            Adds or modifies pps configurations in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.SetPps(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.PpsConfig})">
            <summary>
            Adds or modifies pps configurations in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ResetPps(Spea.PPS[])">
            <summary>
            Resets pps in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ResetPps(System.Collections.Generic.IEnumerable{Spea.PPS})">
            <summary>
            Resets PPS in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.SetStimuli(Spea.TestEnvironment.StimulusConfig[])">
            <summary>
            Adds or modifies stimuli configurations in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.SetStimuli(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.StimulusConfig})">
            <summary>
            Adds or modifies stimuli configurations in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ResetStimuli(Spea.Instruments.StimulusId[])">
            <summary>
            Resets stimuli in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ResetStimuli(System.Collections.Generic.IEnumerable{Spea.Instruments.StimulusId})">
            <summary>
            Resets stimuli in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.SetDcGens(Spea.TestEnvironment.DcGenConfig[])">
            <summary>
            Adds or modifies DC-Generators configurations in this state.
            </summary>
            <param name="dcGens">The configuration of the DC-Generators that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.SetDcGens(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.DcGenConfig})">
            <summary>
            Adds or modifies DC-Generators configurations in this state.
            </summary>
            <param name="dcGens">The configuration of the DC-Generators that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ResetDcGens(Spea.DcGenInstrId[])">
            <summary>
            Resets DC-Generators in this state.
            </summary>
            <param name="dcGens">The ID of the DC-Generators that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ResetDcGens(System.Collections.Generic.IEnumerable{Spea.DcGenInstrId})">
            <summary>
            Resets DC-Generators in this state.
            </summary>
            <param name="dcGens">The ID of the DC-Generators that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ConnectTps(Spea.Abus,System.Int32[])">
            <summary>
            Adds test points to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.ConnectTps(Spea.Abus,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds test points to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.DisconnectTps(Spea.Abus,System.Int32[])">
            <summary>
            Disconnects test points from one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be disconnected from the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState.DisconnectTps(Spea.Abus,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Disconnects test points from one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be disconnected from the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="T:Spea.TestEnvironment.ModifiableState`2">
            <summary>
            A modifiable state.
            </summary>
            <typeparam name="TUserFlagFunction">The type which describes the functionality of the user flags for the specific application.</typeparam>
            <typeparam name="TPmxChannel">The type which describes the functionality of the pmx channels for the specific application..</typeparam>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.#ctor(Spea.TestEnvironment.State{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.ModifiableState`2"/> class.
            </summary>
            <param name="state">The state to be modfied.</param>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.op_Implicit(Spea.TestEnvironment.ModifiableState{`0,`1})~Spea.TestEnvironment.State{`0,`1}">
            <summary>
            Implicit cast to state type.
            </summary>
            <param name="modifiableState">The modifiable state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetUserFlags(`0[])">
            <summary>
            Specifies which user flags to set.
            </summary>
            <param name="userFlagFunctions">The user flags which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetUserFlags(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Specifies which user flags to set.
            </summary>
            <param name="userFlagFunctions">The user flags which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetPmxChannels(`1[])">
            <summary>
            Specifies which pmx flags to set.
            </summary>
            <param name="pmxFlagFunctions">The pmx channels which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetPmxChannels(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Specifies which pmx channels to set.
            </summary>
            <param name="pmxFlagFunctions">The pmx channels which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetSiteDependentUserFlags(System.Int32,Spea.TestEnvironment.SiteToUserFlagsMap{`0})">
            <summary>
            Specifies which user flags to set.
            </summary>
            <param name="site">The current site being tested.</param>
            <param name="siteMap">A map describing which user flags should be set depending on the current site.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetSiteDependentPmxChannels(System.Int32,Spea.TestEnvironment.SiteToPmxChannelsMap{`1})">
            <summary>
            Specifies which user channels to set.
            </summary>
            <param name="site">The current site being tested.</param>
            <param name="siteMap">A map describing which user channels should be set depending on the current site.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetUserFlags(`0[])">
            <summary>
            Specifies which user flags to reset.
            </summary>
            <param name="userFlagFunctions">The user flags which should be reset.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetUserFlags(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Specifies which user flags to reset.
            </summary>
            <param name="userFlagFunctions">The user flags which should be reset.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetPmxChannels(`1[])">
            <summary>
            Specifies which pmx channels to reset.
            </summary>
            <param name="pmxFlagFunctions">The pmx channels which should be reset.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetPmxChannels(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Specifies which pmx channels to reset.
            </summary>
            <param name="pmxFlagFunctions">The user channels which should be reset.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetSiteDependentUserFlags(System.Int32,Spea.TestEnvironment.SiteToUserFlagsMap{`0})">
            <summary>
            Specifies which user flags to reset.
            </summary>
            <param name="site">The current site being tested.</param>
            <param name="siteMap">A map describing which user flags should be reset depending on the current site.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetSiteDependentPmxChannels(System.Int32,Spea.TestEnvironment.SiteToUserFlagsMap{`1})">
            <summary>
            Specifies which pmx channels to reset.
            </summary>
            <param name="site">The current site being tested.</param>
            <param name="siteMap">A map describing which pmx channels should be reset depending on the current site.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.FpsOn(Spea.FpsId[])">
            <summary>
            Adds Fixed Power Supply (FPS) to the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be added to the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.FpsOn(System.Collections.Generic.IEnumerable{Spea.FpsId})">
            <summary>
            Adds Fixed Power Supply (FPS) to the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be added to the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.FpsOff(Spea.FpsId[])">
            <summary>
            Removes Fixed Power Supply (FPS) from the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be removed from the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.FpsOff(System.Collections.Generic.IEnumerable{Spea.FpsId})">
            <summary>
            Removes Fixed Power Supply (FPS) from the list of the FPS that should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be removed from the environment.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetPps(Spea.TestEnvironment.PpsConfig[])">
            <summary>
            Adds or modifies pps configurations in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetPps(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.PpsConfig})">
            <summary>
            Adds or modifies pps configurations in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetPps(Spea.PPS[])">
            <summary>
            Resets pps in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetPps(System.Collections.Generic.IEnumerable{Spea.PPS})">
            <summary>
            Resets pps in this state.
            </summary>
            <param name="pps">The configuration of the PPS that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetStimuli(Spea.TestEnvironment.StimulusConfig[])">
            <summary>
            Adds or modifies stimuli configurations in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetStimuli(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.StimulusConfig})">
            <summary>
            Adds or modifies stimuli configurations in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetStimuli(Spea.Instruments.StimulusId[])">
            <summary>
            Resets stimuli in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetStimuli(System.Collections.Generic.IEnumerable{Spea.Instruments.StimulusId})">
            <summary>
            Resets stimuli in this state.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetDcGens(Spea.TestEnvironment.DcGenConfig[])">
            <summary>
            Adds or modifies DC-Generators configurations in this state.
            </summary>
            <param name="dcGens">The configuration of the DC-Generators that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.SetDcGens(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.DcGenConfig})">
            <summary>
            Adds or modifies DC-Generators configurations in this state.
            </summary>
            <param name="dcGens">The configuration of the DC-Generators that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetDcGens(Spea.DcGenInstrId[])">
            <summary>
            Resets DC-Generators in this state.
            </summary>
            <param name="dcGens">The ID of the DC-Generators that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ResetDcGens(System.Collections.Generic.IEnumerable{Spea.DcGenInstrId})">
            <summary>
            Resets DC-Generators in this state.
            </summary>
            <param name="dcGens">The ID of the DC-Generators that should be reseted in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ConnectTps(Spea.Abus,System.Int32[])">
            <summary>
            Adds test points to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.ConnectTps(Spea.Abus,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds test points to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.DisconnectTps(Spea.Abus,System.Int32[])">
            <summary>
            Disconnects test points from one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be disconnected from the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.ModifiableState`2.DisconnectTps(Spea.Abus,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Disconnects test points from one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be disconnected from the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="T:Spea.TestEnvironment.PmxChannel">
            <summary>
            Represents a single user flag.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.PmxChannel.#ctor(System.Int32,Spea.PmxSection,Spea.PmxInstrId)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.PmxChannel"/> class.
            </summary>
            <param name="number">The number of the pmx flag.</param>
            <param name="section">The section of the pmx.</param>
            <param name="id">The id of the pmx.</param>
            <exception cref="T:System.ArgumentException">When parameter <paramref name="number"/> is less than 1.</exception>
        </member>
        <member name="M:Spea.TestEnvironment.PmxChannel.#ctor(System.Int32,Spea.PmxSection)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.PmxChannel"/> class.
            </summary>
            <param name="number">The number of the pmx flag.</param>
            <param name="section">The section of the pmx.</param>
            <exception cref="T:System.ArgumentException">When parameter <paramref name="number"/> is less than 1.</exception>
        </member>
        <member name="M:Spea.TestEnvironment.PmxChannel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.PmxChannel"/> class.
            </summary>
            <param name="number">The number of the pmx flag.</param>
            <exception cref="T:System.ArgumentException">When parameter <paramref name="number"/> is less than 1.</exception>
        </member>
        <member name="P:Spea.TestEnvironment.PmxChannel.DefaultInstrument">
            <summary>
            Gets or sets the user flag group that is used as default, when only passing a UF number to the constructor.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.PmxChannel.DefaultSection">
            <summary>
            Gets or sets the user flag group that is used as default, when only passing a UF number to the constructor.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.PmxChannel.Number">
            <summary>
            Gets the number of the user flag.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.PmxChannel.Section">
            <summary>
            Gets the section of the pmx.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.PmxChannel.Id">
            <summary>
            Gets the id of the pmx.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.PmxChannel.op_Implicit(System.Int32)~Spea.TestEnvironment.PmxChannel">
            <summary>
            Converts an integer to a pmxchannel in HV-Relay on PMX1.
            </summary>
            <param name="number">The user flag number.</param>
        </member>
        <member name="T:Spea.TestEnvironment.PpsConfig">
            <summary>
            Describes the configuration of a stimulus for use with a test environment.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.PpsConfig.#ctor(Spea.PPS,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.PpsConfig"/> class.
            </summary>
            <param name="id">The ID of the PPS.</param>
            <param name="voltage">The output voltage.</param>
            <param name="current">The current limit.</param>
        </member>
        <member name="P:Spea.TestEnvironment.PpsConfig.Id">
            <summary>
            Gets the ID of the stimulus.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.PpsConfig.Voltage">
            <summary>
            Gets the output voltage.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.PpsConfig.Current">
            <summary>
            Gets the current limit.
            </summary>
        </member>
        <member name="T:Spea.TestEnvironment.ReadOnlyState">
            <summary>
            A class that made test environment states' internal data available as read only.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.ReadOnlyState.#ctor(Spea.TestEnvironment.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.ReadOnlyState"/> class.
            </summary>
            <param name="state">The state to be made available as read only.</param>
        </member>
        <member name="P:Spea.TestEnvironment.ReadOnlyState.FpsOn">
            <summary>
            Gets the list of FPS that are on in this state.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.ReadOnlyState.StimuliOn">
            <summary>
            Gets a dictionary containing information about which Stimuli are active in this state and how they are configured.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.ReadOnlyState.DcGenOn">
            <summary>
            Gets a dictionary containing information about which DC-Generators are active in this state and how they are configured.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.ReadOnlyState.TpsConnectedToAbus">
            <summary>
            Gets a dictionary containing information about which ABUS are in use in this state and which test points are connected to it.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.ReadOnlyState.PpsOn">
            <summary>
            Gets a dictionary containing information about which ABUS are in use in this state and which test points are connected to it.
            </summary>
        </member>
        <member name="T:Spea.TestEnvironment.ReadOnlyState`2">
            <summary>
            A class that made test environment states' internal data available as read only.
            </summary>
            <typeparam name="TUserFlagFunction">The type which describes the functionality of the user flags for the specific application.</typeparam>
            <typeparam name="TPmxChannel">The type which describes the functionality of the pmx channels for the specific application.</typeparam>
        </member>
        <member name="M:Spea.TestEnvironment.ReadOnlyState`2.#ctor(Spea.TestEnvironment.State{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.ReadOnlyState`2"/> class.
            </summary>
            <param name="state">The state to be made available as read only.</param>
        </member>
        <member name="P:Spea.TestEnvironment.ReadOnlyState`2.ActiveUserFlags">
            <summary>
            Gets the list of user flag functions that are active in this state.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.ReadOnlyState`2.ActivePmxChannels">
            <summary>
            Gets the list of pmx flag functions that are active in this state.
            </summary>
        </member>
        <member name="T:Spea.TestEnvironment.SiteToPmxChannelsMap`1">
            <summary>
            Maps user flags (value) to one site (key).
            </summary>
            <typeparam name="TPmxChannelPurpose">The type which describes the purpose of the pmx channels for the specific application.</typeparam>
        </member>
        <member name="T:Spea.TestEnvironment.SiteToUserFlagsMap`1">
            <summary>
            Maps user flags (value) to one site (key).
            </summary>
            <typeparam name="TUserFlagPurpose">The type which describes the purpose of the user flags for the specific application.</typeparam>
        </member>
        <member name="T:Spea.TestEnvironment.State">
            <summary>
            Represents the state of the test environment.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.State.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.State"/> class.
            </summary>
            <exception cref="T:System.Exception">It throws an exception if one of the update requests possibilities isn't included in the default _updateOrder.</exception>
        </member>
        <member name="M:Spea.TestEnvironment.State.#ctor(Spea.TestEnvironment.State)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.State"/> class by copying the state from another instance.
            </summary>
            <param name="state">The state to be copied.</param>
            <exception cref="T:System.Exception">It throws an exception if one of the update requests possibilities isn't included in the default _updateOrder.</exception>
        </member>
        <member name="P:Spea.TestEnvironment.State.UpdateOrder">
            <summary>
            Gets a list containing the order of updates used to modifiy a test envrionment so that it reaches this state.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.State.FpsOn">
            <summary>
            Gets or sets the list of FPS that are on in this state.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.State.StimuliOn">
            <summary>
            Gets a dictionary containing information about which Stimuli are active in this state and how they are configured.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.State.PpsOn">
            <summary>
            Gets a dictionary containing information about which PPS are active in this state and how they are configured.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.State.DcGenOn">
            <summary>
            Gets a dictionary containing information about which DC-Generator are active in this state and how they are configured.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.State.TpsConnectedToAbus">
            <summary>
            Gets a dictionary containing information about which ABUS are in use in this state and which test points are connected to it.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.State.UpdateRequests">
            <summary>
            Gets or sets the list of updates requested by user.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.State.op_Equality(Spea.TestEnvironment.State,Spea.TestEnvironment.State)">
            <summary>
            Override of the == operator for this class.
            </summary>
            <param name="obj1">Parameter on the left of the operator.</param>
            <param name="obj2">Parameter on the right of the operator.</param>
            <returns>True if objects are equal.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.op_Inequality(Spea.TestEnvironment.State,Spea.TestEnvironment.State)">
            <summary>
            Override of != operator for this class.
            </summary>
            <param name="obj1">Parameter on the left of the operator.</param>
            <param name="obj2">Parameter on the right of the operator.</param>
            <returns>True if objects aren't equal.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasFpsOn(Spea.FpsId[])">
            <summary>
            Specifies which Fixed Power Supply (FPS) should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be active and connected in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasFpsOn(System.Collections.Generic.IEnumerable{Spea.FpsId})">
            <summary>
            Specifies which Fixed Power Supply (FPS) should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be active and connected in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasPpsOn(Spea.TestEnvironment.PpsConfig[])">
            <summary>
            Specifies how each pps should be configured in this state. Pps not listed are disconnectet and disabled.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasPpsOn(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.PpsConfig})">
            <summary>
            Specifies how each pps should be configured in this state. PPS not listed are disconnectet and disabled.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasStimuliOn(Spea.TestEnvironment.StimulusConfig[])">
            <summary>
            Specifies how each stimuli should be configured in this state. Stimuli not listed are disconnectet and disabled.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasStimuliOn(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.StimulusConfig})">
            <summary>
            Specifies how each stimuli should be configured in this state. Stimuli not listed are disconnectet and disabled.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasDcGensOn(Spea.TestEnvironment.DcGenConfig[])">
            <summary>
            Specifies how each DC-generator should be configured in this state. DC-Generators not listed are disconnectet and disabled.
            </summary>
            <param name="dcGens">The configuration of the DC-Generator that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasDcGensOn(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.DcGenConfig})">
            <summary>
            Specifies how each DC-generator should be configured in this state. DC-Generators not listed are disconnectet and disabled.
            </summary>
            <param name="dcGens">The configuration of the DC-Generator that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasTpsConnectedToAbus(Spea.Abus,System.Int32[])">
            <summary>
            Specifies which test points should be connected to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.HasTpsConnectedToAbus(Spea.Abus,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Specifies which test points should be connected to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spea.TestEnvironment.State.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Spea.TestEnvironment.State`2">
            <summary>
            Represents the state of the test environment.
            </summary>
            <typeparam name="TUserFlagFunction">The type which describes the functionality of the user flags for the specific application.</typeparam>
            <typeparam name="TPmxChannel">The type which describes the functionality of the pmx channels for the specific application.</typeparam>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.State`2"/> class.
            </summary>
            <exception cref="T:System.Exception">It throws an exception if one of the update requests possibilities isn't included in the default _updateOrder.</exception>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.#ctor(Spea.TestEnvironment.State{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.State`2"/> class by copying the state from another instance.
            </summary>
            <param name="state">The state to be copied.</param>
            <exception cref="T:System.Exception">It throws an exception if one of the update requests possibilities isn't included in the default _updateOrder.</exception>s
        </member>
        <member name="P:Spea.TestEnvironment.State`2.ActiveUserFlags">
            <summary>
            Gets or sets the list of user flag functions that are active in this state.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.State`2.ActivePmxChannels">
            <summary>
            Gets or sets the list of user flag functions that are active in this state.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.op_Equality(Spea.TestEnvironment.State{`0,`1},Spea.TestEnvironment.State{`0,`1})">
            <summary>
            Override of the == operator for this class.
            </summary>
            <param name="obj1">Parameter on the left of the operator.</param>
            <param name="obj2">Parameter on the right of the operator.</param>
            <returns>True if objects are equal.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.op_Inequality(Spea.TestEnvironment.State{`0,`1},Spea.TestEnvironment.State{`0,`1})">
            <summary>
            Override of != operator for this class.
            </summary>
            <param name="obj1">Parameter on the left of the operator.</param>
            <param name="obj2">Parameter on the right of the operator.</param>
            <returns>True if objects aren't equal.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasActiveUserFlags(`0[])">
            <summary>
            Specifies which user flags should be active in this state.
            </summary>
            <param name="userFlagFunctions">The user flags which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasActiveUserFlags(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Specifies which user flags should be active in this state.
            </summary>
            <param name="userFlagFunctions">The user flags which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasActivePmxChannels(`1[])">
            <summary>
            Specifies which pmx flags should be active in this state.
            </summary>
            <param name="pmxFlagFunctions">The pmx flags which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasActivePmxChannels(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Specifies which pmx flags should be active in this state.
            </summary>
            <param name="pmxFlagFunctions">The pmx flags which should be set.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasSiteDependentActiveUserFlags(System.Int32,Spea.TestEnvironment.SiteToUserFlagsMap{`0})">
            <summary>
            Specifies which user flags should be active in this state depending on the current site being tested.
            </summary>
            <param name="site">The current site being tested.</param>
            <param name="siteMap">A map describing which user flags should be switched depending on the current site.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasSiteDependentActivePmxChannels(System.Int32,Spea.TestEnvironment.SiteToPmxChannelsMap{`1})">
            <summary>
            Specifies which pmx flags should be active in this state depending on the current site being tested.
            </summary>
            <param name="site">The current site being tested.</param>
            <param name="siteMap">A map describing which pmx flags should be switched depending on the current site.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasFpsOn(Spea.FpsId[])">
            <summary>
            Specifies which Fixed Power Supply (FPS) should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be active and connected in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasFpsOn(System.Collections.Generic.IEnumerable{Spea.FpsId})">
            <summary>
            Specifies which Fixed Power Supply (FPS) should be on and connected in this state.
            </summary>
            <param name="fpsIds">The Fixed Power supplies which should be active and connected in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasPpsOn(Spea.TestEnvironment.PpsConfig[])">
            <summary>
            Specifies how each pps should be configured in this state. PPS not listed are disconnectet and disabled.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasPpsOn(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.PpsConfig})">
            <summary>
            Specifies how each pps should be configured in this state. PPS not listed are disconnectet and disabled.
            </summary>
            <param name="pps">The configuration of the PPS that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasStimuliOn(Spea.TestEnvironment.StimulusConfig[])">
            <summary>
            Specifies how each stimuli should be configured in this state. Stimuli not listed are disconnectet and disabled.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasStimuliOn(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.StimulusConfig})">
            <summary>
            Specifies how each stimuli should be configured in this state. Stimuli not listed are disconnectet and disabled.
            </summary>
            <param name="stimuli">The configuration of the Stimuli that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasDcGensOn(Spea.TestEnvironment.DcGenConfig[])">
            <summary>
            Specifies how each DC-generator should be configured in this state. DC-Generators not listed are disconnectet and disabled.
            </summary>
            <param name="dcGens">The configuration of the DC-Generator that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasDcGensOn(System.Collections.Generic.IEnumerable{Spea.TestEnvironment.DcGenConfig})">
            <summary>
            Specifies how each DC-generator should be configured in this state. DC-Generators not listed are disconnectet and disabled.
            </summary>
            <param name="dcGens">The configuration of the DC-Generator that should be active in this state.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasTpsConnectedToAbus(Spea.Abus,System.Int32[])">
            <summary>
            Specifies which test points should be connected to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.HasTpsConnectedToAbus(Spea.Abus,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Specifies which test points should be connected to one of the ABUS in this state.
            </summary>
            <param name="abus">The ID of the ABUS.</param>
            <param name="testPoints">The test points that should be connected to the ABUS.</param>
            <returns>This state object, so that methods can be chained.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Spea.TestEnvironment.State`2.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Spea.TestEnvironment.StimulusConfig">
            <summary>
            Describes the configuration of a stimulus for use with a test environment.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.StimulusConfig.#ctor(Spea.Instruments.StimulusId,System.Double,System.Double,Spea.Instruments.StimulusConnectionPoint,Spea.Instruments.StimulusConnectionPoint,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.StimulusConfig"/> class.
            </summary>
            <param name="id">The ID of the stimulus.</param>
            <param name="voltage">The output voltage.</param>
            <param name="current">The current limit.</param>
            <param name="hot">The hot connection.</param>
            <param name="cold">The cold connection.</param>
            <param name="useSense">Wheter external sense should be used.</param>
        </member>
        <member name="P:Spea.TestEnvironment.StimulusConfig.Id">
            <summary>
            Gets the ID of the stimulus.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.StimulusConfig.Voltage">
            <summary>
            Gets the output voltage.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.StimulusConfig.Current">
            <summary>
            Gets the current limit.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.StimulusConfig.Hot">
            <summary>
            Gets the hot connection.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.StimulusConfig.Cold">
            <summary>
            Gets the cold connection.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.StimulusConfig.UseSense">
            <summary>
            Gets a value indicating whether the external sense should be used.
            </summary>
        </member>
        <member name="T:Spea.TestEnvironment.TestEnv">
            <summary>
            .
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnv.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.TestEnv"/> class. <br/>
            There should be only one TestEnv object in a program.
            </summary>
            <param name="isLogEnabled">Enables logging of test environment changes.</param>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnv.CurrentState">
            <summary>
            Gets the current Test Environment State.
            </summary>
        </member>
        <member name="T:Spea.TestEnvironment.TestEnvBase`2">
            <summary>
            Describes the base class of the testenviroment.
            </summary>
            <typeparam name="TState">Is the set state type of the testenviroment.</typeparam>
            <typeparam name="TModifiableState">Is the modifiable state type of the testenviroment.</typeparam>
        </member>
        <member name="T:Spea.TestEnvironment.TestEnvBase`2.LogAction">
            <summary>
            A action used to log changes in the test environment.
            </summary>
            <param name="sections">A list of sections defining the change.</param>
            <param name="currentState">The current state (before change).</param>
            <param name="targetState">The target state (after change).</param>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnvBase`2.IsReset">
            <summary>
            Gets a value indicating whether the test environment is in reseted state.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnvBase`2.IsLogEnabled">
            <summary>
            Gets or sets a value indicating whether the test environment changes should be looged.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnvBase`2.CustomLog">
            <summary>
            Gets or sets a method to be used for logging instead of the default.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnvBase`2.InternalCurrentState">
            <summary>
            Gets or sets the current state which can be read by the user.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnvBase`2.UpdateActionMapping">
            <summary>
            Gets or sets the dictonary for relation between the update request and the update action.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.Set(System.Func{`0,`0})">
             <summary>
             Sets the test environment to the desired state.
             The parameter <paramref name="stateDefinition"/> should be used to describe the new desired state. <br/>
             <br/>
             The default update order is: (DC-Generators, Stimuli, User Flags, FPS and Test Points). Any changes to the state will take priority over the default order. <br/> <br/>
             </summary>
             <param name="stateDefinition">A function which returns the desired state for the test environment.</param>
             <remarks>
             <example>
             EXAMPLE<para/>
             This example shows the test environment being used to connect test points 15, 30 and 31 to the ABUS, as well as set-up BSTV1 as power supply on this TPs.<br/>
             It is presumed that an object testEnv was already initialized.<para/>
             <code>
             The command used will perform following actions:
            
             User updates:
             - Disconnect any TPs that weren't mentioned or that changed connection.
             - Connect the TPs to the ABUS as aspecified.
             - Turn off and disconnect any stimuli that was used at least once throught the test environment and
               that wasn't mentioned or changed connection.
             - Connect and turn on the BSTV1 as specified. If BSTV1 was already connected as specified,
               it will only adjust voltage and current.
            
             Default updates:
             - Now that user changes are done, the remaining actions are performed in the default order:
                 * All DC-Generators are reseted.
                 * All registered user flags are reseted.
                 * All FPS that were used at least once through the test environment are deactivated.
            
             private void CSharpExample(TestEnv&lt;UserFlag&gt; testEnv)
             {
                 testEnv.Set(state =>
                     state.HasTpsConnectedToAbus(Abus.ABUS1, 30, 15)
                          .HasTpsConnectedToAbus(Abus.ABUS4, 31)
                          .HasStimuliOn(
                              new StimulusConfig(StimulusId.BSTV1, 13.5, 0.8, StimulusConnectionPoint.ABUS1, StimulusConnectionPoint.ABUS4)
                           )
                 );
             }
            
             Private Sub VBExample(testEnv As TestEnv(Of UserFlag))
                 testEnv.Set(
                     Function(state)
                         Return state.HasTpsConnectedToAbus(Abus.ABUS1, 30, 15) _
                         .HasTpsConnectedToAbus(Abus.ABUS4, 31) _
                         .HasStimuliOn(
                             New StimulusConfig(StimulusId.BSTV1, 13.5, 0.8, StimulusConnectionPoint.ABUS1, StimulusConnectionPoint.ABUS4)
                         )
                     End Function)
             End Sub
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.Modify(System.Func{`1,`0})">
            <summary>
            Modifies the current state of the test environment without having to redescribe the complete target state.
            </summary>
            <param name="stateDefinition">A function which returns the desired state for the test environment. The parameter the function receives is the current test environment state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.Reset">
            <summary>
            Resets the test environment.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.GetStimulus(Spea.Instruments.StimulusId)">
            <summary>
            Gets a stimulus instance from the test environment. If the instance is yet not registered, a new instance is initialized and added to the test environemnt.
            </summary>
            <param name="id">The stimulus' id.</param>
            <returns>The instance of the correspondent stimulus.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.GetPps(Spea.PPS)">
            <summary>
            Gets a pps instance from the test environment. If the instance is yet not registered, a new instance is initialized and added to the test environemnt.
            </summary>
            <param name="id">The pps' id.</param>
            <returns>The instance of the correspondent pps.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.GetDcGen(Spea.DcGenInstrId)">
            <summary>
            Gets a DcGen instance from the test environment.
            </summary>
            <param name="id">The DC-generator's id.</param>
            <returns>The instance of the correspondent stimulus.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.GetNewDcGen(Spea.DcGenInstrId,Spea.CanInstruments.DcGenType)">
            <summary>
            Gets a new DcGen instance from the test environment.
            </summary>
            <param name="id">The DC-generator's id.</param>
            <param name="type">The type of the DC-generator (Default: DCG110).</param>
            <returns>The instance of the correspondent stimulus.</returns>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.Update(`0)">
            <summary>
            Updates the current state to the target state by performing the update actions.
            </summary>
            <param name="state">Target state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.Log(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Logging function used for the testenviroment to log all actions performed.
            </summary>
            <param name="sections">List of the tags decribing the category of the action done.</param>
            <param name="currentState">State before action.</param>
            <param name="targetState">State after action.</param>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.UpdateFps(`0)">
            <summary>
            Updates the FPS state.
            </summary>
            <param name="state">Target state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.UpdatePps(`0)">
            <summary>
            Updates the PPS to target state.
            </summary>
            <param name="state">Target state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.UpdateStimuli(`0)">
            <summary>
            Updates the stimulus to target state.
            </summary>
            <param name="state">Target state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.UpdateDcGens(`0)">
            <summary>
            Updates the DC-Gen state to the target state.
            </summary>
            <param name="state">Target state.</param>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnvBase`2.UpdateTpsOnAbus(`0)">
            <summary>
            Updates the state of testpoints connected to the Abus rows to the target state.
            </summary>
            <param name="state">Target State.</param>
        </member>
        <member name="T:Spea.TestEnvironment.TestEnv`2">
            <summary>
            The test environment class provides capabilites for easily managing the state of common elements of a 3030 system in a centralized way.
            This includes setting up instruments and FPS, configuring user flags and connecting test points to the analog bus.
            </summary>
            <typeparam name="TUserFlagFunction">This enum provides names for each user flag (example: ConnectCan).</typeparam>
            <typeparam name="TPmxChannel">This enum provides names for each pmx channel (example: DC-GenConnect).</typeparam>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnv`2.#ctor(Spea.TestEnvironment.Fixture{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.TestEnv`2"/> class. <br/>
            There should be only one TestEnv object in a program.
            </summary>
            <param name="fixture">The fixture object used for mapping the functionality of the user flags.</param>
            <param name="isLogEnabled">Enables logging of test environment changes.</param>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnv`2.Fixture">
            <summary>
            Gets the fixture object which was used to initialize this instance.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnv`2.IsReset">
            <summary>
            Gets a value indicating whether the test environment is in reseted state.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.TestEnv`2.CurrentState">
            <summary>
            Gets the current Test Environment State.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnv`2.Set(System.Func{Spea.TestEnvironment.State{`0,`1},Spea.TestEnvironment.State{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="M:Spea.TestEnvironment.TestEnv`2.Modify(System.Func{Spea.TestEnvironment.ModifiableState{`0,`1},Spea.TestEnvironment.State{`0,`1}})">
            <inheritdoc/>
        </member>
        <member name="T:Spea.TestEnvironment.UpdateRequest">
            <summary>
            Represents the different update requests, which can change the test environment.
            </summary>
        </member>
        <member name="F:Spea.TestEnvironment.UpdateRequest.ActiveUserFlags">
            <summary>
            Request for updating which user flags are active.
            </summary>
        </member>
        <member name="F:Spea.TestEnvironment.UpdateRequest.ActivePmxChannels">
            <summary>
            Request for updating which pmx flags are active.
            </summary>
        </member>
        <member name="F:Spea.TestEnvironment.UpdateRequest.FpsOn">
            <summary>
            Rquest for updating which FPS is enabled.
            </summary>
        </member>
        <member name="F:Spea.TestEnvironment.UpdateRequest.PpsOn">
            <summary>
            Rquest for updating which PPS is enabled.
            </summary>
        </member>
        <member name="F:Spea.TestEnvironment.UpdateRequest.StimuliOn">
            <summary>
            Request for updating which Stimulus is on and how it is connected.
            </summary>
        </member>
        <member name="F:Spea.TestEnvironment.UpdateRequest.TpsConnectedToAbus">
            <summary>
            Request for updating which test points and how they are connected to the ABUS.
            </summary>
        </member>
        <member name="F:Spea.TestEnvironment.UpdateRequest.DcGenOn">
            <summary>
            Request for updating which DC-Generator is on and how it is connected.
            </summary>
        </member>
        <member name="T:Spea.TestEnvironment.UserFlag">
            <summary>
            Represents a single user flag.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.UserFlag.#ctor(System.Int32,Spea.OutputUserFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.UserFlag"/> struct.
            </summary>
            <param name="number">The number of the user flag.</param>
            <param name="group">The group of the user flag.</param>
            <exception cref="T:System.ArgumentException">When parameter <paramref name="number"/> is less than 1.</exception>
        </member>
        <member name="M:Spea.TestEnvironment.UserFlag.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spea.TestEnvironment.UserFlag"/> struct.
            </summary>
            <param name="number">The number of the user flag.</param>
            <exception cref="T:System.ArgumentException">When parameter <paramref name="number"/> is less than 1.</exception>
        </member>
        <member name="P:Spea.TestEnvironment.UserFlag.DefaultGroup">
            <summary>
            Gets or sets the user flag group that is used as default, when only passing a UF number to the constructor.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.UserFlag.Number">
            <summary>
            Gets the number of the user flag.
            </summary>
        </member>
        <member name="P:Spea.TestEnvironment.UserFlag.Group">
            <summary>
            Gets the group of the user flag.
            </summary>
        </member>
        <member name="M:Spea.TestEnvironment.UserFlag.op_Implicit(System.Int32)~Spea.TestEnvironment.UserFlag">
            <summary>
            Converts an integer to a user flag in RLYNOA.
            </summary>
            <param name="number">The user flag number.</param>
        </member>
    </members>
</doc>
